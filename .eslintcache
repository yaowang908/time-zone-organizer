[{"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.component.tsx":"1","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.stories.tsx":"2","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.component.tsx":"3","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getCurrentDateTimeInFormat.tsx":"4","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\data\\timezones.tsx":"5","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.component.tsx":"6","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.component.tsx":"7","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getUserDateTime.tsx":"8","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.stories.tsx":"9","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.stories.tsx":"10","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\color.settings.tsx":"11","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.style.tsx":"12","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getFormattedDate.tsx":"13","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Header.tsx":"14","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.stories.tsx":"15","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\index.tsx":"16","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\App.tsx":"17","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.style.tsx":"18","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.stories.tsx":"19","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\hours.setting.tsx":"20","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.tsx":"21","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.tsx":"22","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.stories.tsx":"23","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\useLocalStorageHook.tsx":"24","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getClientTimezone.tsx":"25"},{"size":7131,"mtime":1613945188180,"results":"26","hashOfConfig":"27"},{"size":706,"mtime":1613598364206,"results":"28","hashOfConfig":"27"},{"size":6813,"mtime":1613946829384,"results":"29","hashOfConfig":"27"},{"size":924,"mtime":1613947095617,"results":"30","hashOfConfig":"27"},{"size":8097,"mtime":1613270931542,"results":"31","hashOfConfig":"27"},{"size":1597,"mtime":1613600116416,"results":"32","hashOfConfig":"27"},{"size":8551,"mtime":1613947913009,"results":"33","hashOfConfig":"27"},{"size":2820,"mtime":1613788989019,"results":"34","hashOfConfig":"27"},{"size":605,"mtime":1608166159266,"results":"35","hashOfConfig":"27"},{"size":804,"mtime":1608166159266,"results":"36","hashOfConfig":"27"},{"size":253,"mtime":1612316458878,"results":"37","hashOfConfig":"27"},{"size":949,"mtime":1612227946553,"results":"38","hashOfConfig":"27"},{"size":359,"mtime":1613947413304,"results":"39","hashOfConfig":"27"},{"size":1356,"mtime":1608166159266,"results":"40","hashOfConfig":"27"},{"size":1140,"mtime":1612487742855,"results":"41","hashOfConfig":"27"},{"size":500,"mtime":1607822183420,"results":"42","hashOfConfig":"27"},{"size":376,"mtime":1613599325330,"results":"43","hashOfConfig":"27"},{"size":1250,"mtime":1612484781398,"results":"44","hashOfConfig":"27"},{"size":416,"mtime":1612921570468,"results":"45","hashOfConfig":"27"},{"size":514,"mtime":1610062729274,"results":"46","hashOfConfig":"27"},{"size":2415,"mtime":1608166159266,"results":"47","hashOfConfig":"27"},{"size":941,"mtime":1608166159266,"results":"48","hashOfConfig":"27"},{"size":1384,"mtime":1612921394519,"results":"49","hashOfConfig":"27"},{"size":1559,"mtime":1613876378572,"results":"50","hashOfConfig":"27"},{"size":520,"mtime":1613946964058,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hmkt3r",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.component.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.stories.tsx",[],["108","109"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.component.tsx",["110","111","112"],"import React from 'react';\r\n// import spacetime from 'spacetime';\r\nimport DatePicker from \"react-datepicker\";\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport defaultColor from '../settings/color.settings';\r\nimport Entry from '../components/Entry.component';\r\nimport getCurrentDateTimeInFormat from '../lib/getCurrentDateTimeInFormat';\r\nimport useLocalStorage from '../lib/useLocalStorageHook';\r\nimport getClientTimezone from '../lib/getClientTimezone';\r\n\r\nimport './Homepage.style.scss';\r\n\r\ninterface User {\r\n  id: number; \r\n  name: string; \r\n  timezone: string;\r\n};\r\nexport interface Props {\r\n  users: User[];\r\n  color?: {\r\n    night?: string;\r\n    day?: string;\r\n    nightText?: string;\r\n    dayText?: string;\r\n    background?: string;\r\n    textLighter?: string;\r\n    textDarker?: string;\r\n    white?: string;\r\n  };\r\n  elementWidth?: number;\r\n};\r\n\r\nconst Homepage: React.FC<Props> = ({ users, color = defaultColor, elementWidth = 50 }) => {\r\n\r\n  const defaultTimezoneInitValue = getClientTimezone();\r\n\r\n  const [ usersState, setUsersState ] = React.useState(users);\r\n  const [ localDateTimeState, setLocalDateTimeState ] = React.useState(new Date());\r\n  const [ defaultTimezoneState, setDefaultTimezoneState ] = React.useState(defaultTimezoneInitValue);\r\n  // DONE: this init defaultTimezone needs to match user's timezone\r\n  // const [ timeState, setTimeState ] = React.useState(getCurrentDateTimeInFormat().time);\r\n  // const [ dateState, setDateState ] = React.useState(getCurrentDateTimeInFormat().date);\r\n  const [ dateTimeState, setDateTimeState ] = React.useState({\r\n    time: getCurrentDateTimeInFormat().time,\r\n    date: getCurrentDateTimeInFormat().date,\r\n  });\r\n  const [usersLocalStorage, setUsersLocalStorage] = useLocalStorage<User[]>('users', users);\r\n  // TODO: when init, check local storage for users data first; \r\n\r\n  const addPersonClickHandler = () => {\r\n    // DONE: get NewYork local time as default value for new users.\r\n    // const spaceTimeNowInNewYork = spacetime.now(defaultTimezoneState);\r\n    // const timeNowInNewYork = spaceTimeNowInNewYork.hour() + ':' + spaceTimeNowInNewYork.minute() ;\r\n    // const dateNowInNewYork = ( spaceTimeNowInNewYork.month() + 1 ) + '-' + spaceTimeNowInNewYork.date() + '-' + spaceTimeNowInNewYork.year();\r\n    const newUsersState = [...usersState, {id: usersState.length,name: 'New User', timezone: defaultTimezoneState}];\r\n    \r\n    setUsersState(newUsersState);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    // process timezone for usersState\r\n    // const _date = localDateTimeState.toLocaleDateString('default', { year: 'numeric', month: 'long', day: 'numeric' });\r\n    // const _time = localDateTimeState.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });\r\n\r\n    const {date, time} = getCurrentDateTimeInFormat(defaultTimezoneState, localDateTimeState);\r\n    console.log(\"🚀 ~ file: Homepage.component.tsx ~ line 58 ~ React.useEffect ~ time\", time)\r\n    console.log(\"🚀 ~ file: Homepage.component.tsx ~ line 58 ~ React.useEffect ~ date\", date)\r\n    // setTimeState(time);\r\n    // setDateState(date);\r\n    setDateTimeState({time, date})\r\n\r\n    // DONE: next step is to make local Date and local time affect all users\r\n\r\n  }, [localDateTimeState]);\r\n\r\n  const updateUser = (id:number, newTimezone:string) => {\r\n    // update usersState\r\n    let _users = [...usersState];\r\n    let user = {..._users[id]}\r\n    user.timezone = newTimezone;\r\n    _users[id] = user;\r\n    setUsersState(_users);\r\n    setUsersLocalStorage(_users);\r\n    // console.log(\"🚀 ~ file: Homepage.component.tsx ~ line 74 ~ updateUser ~ users\", users)\r\n  };\r\n\r\n  const updateUserName = (id:number, newUsername:string) => {\r\n    // update currentUserName\r\n    let _users = [...usersState];\r\n    let user = {..._users[id]}\r\n    user.name = newUsername;\r\n    _users[id] = user;\r\n    setUsersState(_users);\r\n    setUsersLocalStorage(_users);\r\n    console.log(\"🚀 ~ file: Homepage.component.tsx ~ line 89 ~ updateUserName ~ users\", users)\r\n  };\r\n\r\n  //DONE: functions that will pass down to child components to updated userName\r\n  // time could only be changed in local format \r\n\r\n  // DONE: get all changes into on object, save to localStorage\r\n  // DONE: add a reset button\r\n  const clearLocalStorage = () => {\r\n    setUsersLocalStorage(users);\r\n    setUsersState(users);\r\n  };\r\n  const reset = () => {\r\n    confirmAlert({\r\n      title: 'Confirm to DELETE all data',\r\n      message: 'Are you sure to do this.',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: () => {clearLocalStorage()}\r\n        },\r\n        {\r\n          label: 'No',\r\n          onClick: () => {console.log('Deletion Abort!')}\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='container' style={{backgroundColor: color.background}}>\r\n      <div className=\"nav\">\r\n        <div className=\"logo\"></div>\r\n        <div className=\"menu_container\">\r\n          <div className=\"menu_item\" onClick={reset}>Reset</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"local_time\" style={{color:color.white,backgroundColor: color.background}}>\r\n        <div className=\"title input_div\">Local Time</div>\r\n        \r\n        <DatePicker \r\n          showTimeSelect\r\n          selected={localDateTimeState}\r\n          dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n          onChange={(date: Date) => setLocalDateTimeState(date)}  \r\n        />\r\n        {/* NOTE: local time change on real time */}\r\n        {/* after a second thought, I don't think it's good idea to update it per minute, this app is not really time sensitive after all */}\r\n        <div className=\"triangle\"></div>\r\n      </div>\r\n      <div className=\"indicator\"></div>\r\n      <div className=\"content\">\r\n        {usersState ? usersState.map((user, index) => (\r\n          <Entry \r\n            key={index}\r\n            updateUser={ (newTimezone:string) => {\r\n              updateUser(user.id, newTimezone);\r\n            }}\r\n            updateUserName={ (newUsername:string) => {\r\n              updateUserName(user.id, newUsername);\r\n            }}\r\n            name={user.name} \r\n            timezone={user.timezone}\r\n            localTimezone={defaultTimezoneState}\r\n            localTime={dateTimeState.time}\r\n            localDate={dateTimeState.date}\r\n            militaryFormat={false}\r\n            elementWidth={elementWidth}\r\n            />\r\n        )) : ''}\r\n      </div>\r\n      <div className=\"footer\">\r\n        <div className=\"add_person\" onClick={addPersonClickHandler}>\r\n          <div className=\"cross\"></div>\r\n          <div className=\"cross_title\">add person</div>          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getCurrentDateTimeInFormat.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\data\\timezones.tsx",[],["113","114"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.component.tsx",["115","116"],"import React, { Dispatch, SetStateAction } from 'react';\r\nimport defaultTimezones from '../data/timezones' \r\nimport Select from \"react-select\";\r\n\r\nimport './TimezonePicker.style.scss';\r\n\r\nexport interface Props {\r\n  placeHolder: string;\r\n  className?: string;\r\n  setSelectedTimezone: (newTimezone:string) => void;\r\n  defaultValue?: Timezone\r\n};\r\n\r\nexport interface Timezone {\r\n  id:number; \r\n  value:string; \r\n  label:string\r\n};\r\n\r\nconst TimezonePicker: React.FC<Props> = ({\r\n  placeHolder = 'America/New_York',\r\n  className,\r\n  setSelectedTimezone,\r\n  defaultValue = { value: \"(GMT-05:00) Eastern Time\", label: \"America/New_York\"},\r\n}) => {\r\n\r\n// DONE: return selected value\r\n// DONE: pass in selected value\r\n// DONE: style it\r\nconst [ defaultValueState, setDefaultValueState ] = React.useState({\r\n              value: defaultValue.value, \r\n              label: defaultValue.label\r\n            });\r\n\r\nReact.useEffect(() => {\r\n  setDefaultValueState(defaultValue);\r\n  // console.log(defaultValue);\r\n}, [defaultValue]);\r\n\r\n  return (\r\n    <Select \r\n      options={defaultTimezones} \r\n      onChange={(values:Timezone) => setSelectedTimezone(values.label)}\r\n      className={className?className:''}\r\n      classNamePrefix=\"react-select\"\r\n      defaultValue={defaultValueState}\r\n      theme={(theme:any) => ({\r\n        ...theme,\r\n        borderRadius: 0,\r\n        colors: {\r\n          ...theme.colors,\r\n          primary25: '#293c6b',\r\n          primary: '#ffd466',\r\n        },\r\n      })}\r\n      />\r\n    // <div>\r\n    //   {options[0]?.name}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default TimezonePicker;",["117","118"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.component.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getUserDateTime.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.stories.tsx",[],["119","120"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\color.settings.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.style.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getFormattedDate.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Header.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\index.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\App.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.style.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\hours.setting.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\useLocalStorageHook.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getClientTimezone.tsx",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":43,"column":33,"nodeType":"127","messageId":"128","endLine":43,"endColumn":56},{"ruleId":"125","severity":1,"message":"129","line":51,"column":10,"nodeType":"127","messageId":"128","endLine":51,"endColumn":27},{"ruleId":"130","severity":1,"message":"131","line":78,"column":6,"nodeType":"132","endLine":78,"endColumn":26,"suggestions":"133"},{"ruleId":"121","replacedBy":"134"},{"ruleId":"123","replacedBy":"135"},{"ruleId":"125","severity":1,"message":"136","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"137","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":41},{"ruleId":"121","replacedBy":"138"},{"ruleId":"123","replacedBy":"139"},{"ruleId":"121","replacedBy":"140"},{"ruleId":"123","replacedBy":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"@typescript-eslint/no-unused-vars","'setDefaultTimezoneState' is assigned a value but never used.","Identifier","unusedVar","'usersLocalStorage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'defaultTimezoneState'. Either include it or remove the dependency array.","ArrayExpression",["144"],["142"],["143"],"'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.",["142"],["143"],["142"],["143"],"no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},"Update the dependencies array to be: [defaultTimezoneState, localDateTimeState]",{"range":"147","text":"148"},[3345,3365],"[defaultTimezoneState, localDateTimeState]"]