[{"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.component.tsx":"1","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.stories.tsx":"2","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.component.tsx":"3","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getCurrentDateTimeInFormat.tsx":"4","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\data\\timezones.tsx":"5","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.component.tsx":"6","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.component.tsx":"7","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getUserDateTime.tsx":"8","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.stories.tsx":"9","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.stories.tsx":"10","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\color.settings.tsx":"11","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.style.tsx":"12","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getFormattedDate.tsx":"13","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Header.tsx":"14","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.stories.tsx":"15","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\index.tsx":"16","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\App.tsx":"17","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.style.tsx":"18","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.stories.tsx":"19","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\hours.setting.tsx":"20","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.tsx":"21","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.tsx":"22","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.stories.tsx":"23"},{"size":7352,"mtime":1613785915995,"results":"24","hashOfConfig":"25"},{"size":706,"mtime":1613598364206,"results":"26","hashOfConfig":"25"},{"size":5348,"mtime":1613785266861,"results":"27","hashOfConfig":"25"},{"size":1020,"mtime":1613695208426,"results":"28","hashOfConfig":"25"},{"size":8097,"mtime":1613270931542,"results":"29","hashOfConfig":"25"},{"size":1597,"mtime":1613600116416,"results":"30","hashOfConfig":"25"},{"size":8178,"mtime":1613700102404,"results":"31","hashOfConfig":"25"},{"size":2207,"mtime":1613786418471,"results":"32","hashOfConfig":"25"},{"size":605,"mtime":1608166159266,"results":"33","hashOfConfig":"25"},{"size":804,"mtime":1608166159266,"results":"34","hashOfConfig":"25"},{"size":253,"mtime":1612316458878,"results":"35","hashOfConfig":"25"},{"size":949,"mtime":1612227946553,"results":"36","hashOfConfig":"25"},{"size":269,"mtime":1612401655733,"results":"37","hashOfConfig":"25"},{"size":1356,"mtime":1608166159266,"results":"38","hashOfConfig":"25"},{"size":1140,"mtime":1612487742855,"results":"39","hashOfConfig":"25"},{"size":500,"mtime":1607822183420,"results":"40","hashOfConfig":"25"},{"size":376,"mtime":1613599325330,"results":"41","hashOfConfig":"25"},{"size":1250,"mtime":1612484781398,"results":"42","hashOfConfig":"25"},{"size":416,"mtime":1612921570468,"results":"43","hashOfConfig":"25"},{"size":514,"mtime":1610062729274,"results":"44","hashOfConfig":"25"},{"size":2415,"mtime":1608166159266,"results":"45","hashOfConfig":"25"},{"size":941,"mtime":1608166159266,"results":"46","hashOfConfig":"25"},{"size":1384,"mtime":1612921394519,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"hmkt3r",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.component.tsx",["100"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.stories.tsx",[],["101","102"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.component.tsx",["103","104","105","106","107","108","109"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getCurrentDateTimeInFormat.tsx",[],["110","111"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\data\\timezones.tsx",[],["112","113"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.component.tsx",["114","115"],"import React, { Dispatch, SetStateAction } from 'react';\r\nimport defaultTimezones from '../data/timezones' \r\nimport Select from \"react-select\";\r\n\r\nimport './TimezonePicker.style.scss';\r\n\r\nexport interface Props {\r\n  placeHolder: string;\r\n  className?: string;\r\n  setSelectedTimezone: (newTimezone:string) => void;\r\n  defaultValue?: Timezone\r\n};\r\n\r\nexport interface Timezone {\r\n  id:number; \r\n  value:string; \r\n  label:string\r\n};\r\n\r\nconst TimezonePicker: React.FC<Props> = ({\r\n  placeHolder = 'America/New_York',\r\n  className,\r\n  setSelectedTimezone,\r\n  defaultValue = { value: \"(GMT-05:00) Eastern Time\", label: \"America/New_York\"},\r\n}) => {\r\n\r\n// DONE: return selected value\r\n// DONE: pass in selected value\r\n// DONE: style it\r\nconst [ defaultValueState, setDefaultValueState ] = React.useState({\r\n              value: defaultValue.value, \r\n              label: defaultValue.label\r\n            });\r\n\r\nReact.useEffect(() => {\r\n  setDefaultValueState(defaultValue);\r\n  // console.log(defaultValue);\r\n}, [defaultValue]);\r\n\r\n  return (\r\n    <Select \r\n      options={defaultTimezones} \r\n      onChange={(values:Timezone) => setSelectedTimezone(values.label)}\r\n      className={className?className:''}\r\n      classNamePrefix=\"react-select\"\r\n      defaultValue={defaultValueState}\r\n      theme={(theme:any) => ({\r\n        ...theme,\r\n        borderRadius: 0,\r\n        colors: {\r\n          ...theme.colors,\r\n          primary25: '#293c6b',\r\n          primary: '#ffd466',\r\n        },\r\n      })}\r\n      />\r\n    // <div>\r\n    //   {options[0]?.name}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default TimezonePicker;","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.component.tsx",["116","117"],"import React from 'react';\r\n\r\nimport defaultColor from '../settings/color.settings';\r\nimport hoursFormat from '../settings/hours.setting';\r\n\r\nimport { getFormattedDate } from '../lib/getFormattedDate';\r\nimport getUserDateTime from '../lib/getUserDateTime';\r\n\r\nimport { Styled } from './Timeline.style';\r\nimport getCurrentDateTimeInFormat from '../lib/getCurrentDateTimeInFormat';\r\n\r\n/**\r\n * @param { string } timezone - selected from a drop down\r\n * @param { string } time - must be military time: 16:15, set this time to the middle\r\n * @param { string } date - current date: 12-23-2020\r\n * @param { string } sunriseTime - must be military time: 7:00\r\n * @param { string } sunsetTime - must be military time: 18:00\r\n * @param { boolean } militaryFormat - whether to show time in military format\r\n * @param { object } color \r\n *  @param { string } night - hex code default: '#0A2875',\r\n *  @param { string } day - hex code default: '#FFEDC0',\r\n *  @param { string } nightText - hex code default: '#90AFFF',\r\n *  @param { string } dayText - hex code default: '#0A2875',\r\n *  @param { string } background - hex code default: '#0A2875',\r\n *  @param { string } textLighter - hex code default: '#FDFDFF',\r\n *  @param { string } textDarker - hex code default: '#4B67AD',\r\n * @param { number } elementWidth - number of the element width in px\r\n */\r\n\r\nexport interface Props {\r\n  timezone: string;\r\n  localTimezone: string;\r\n  time: string;\r\n  date: string;\r\n  elementWidth?: number;\r\n  sunriseTime?: string;\r\n  sunsetTime?: string;\r\n  militaryFormat?: boolean;\r\n  color?: {\r\n    night?: string;\r\n    day?: string;\r\n    nightText?: string;\r\n    dayText?: string;\r\n    background?: string;\r\n    textLighter?: string;\r\n    textDarker?: string;\r\n  }\r\n}\r\n\r\nconst Timeline: React.FC<Props> = ({\r\n    timezone, \r\n    localTimezone,\r\n    time, \r\n    date,\r\n    elementWidth, \r\n    sunriseTime = '6:00', \r\n    sunsetTime = '18:00', \r\n    militaryFormat = true,\r\n    color = defaultColor\r\n}) => {\r\n  \r\n  const [ userTimeState, setLocalTimeState ] = React.useState(time);\r\n  const [ userDateState, setLocalDateState ] = React.useState(date);\r\n\r\n  // const getUserTime = () => {\r\n  //   // timezone, time, date, localTimezone\r\n  //   return getUserDateTime(\r\n  //       timezone, \r\n  //       localTimeState,\r\n  //       localDateState, \r\n  //       localTimezone\r\n  //     ).time;\r\n  // };\r\n  // const getUserDate = () => {\r\n  //   return getUserDateTime(\r\n  //       timezone, \r\n  //       localTimeState, \r\n  //       localDateState, \r\n  //       localTimezone\r\n  //     ).date;\r\n  // };\r\n  const [hoursArr, setHoursArr] = React.useState<string[]>([]);\r\n  const [curHour, setCurHour] = React.useState<string>('0');\r\n  const [curMin, setCurMin] = React.useState<string>('0');\r\n  const [eleWidth, setEleWidth] = React.useState<number>(75);\r\n  // const [dateState, setDateState] = React.useState<string>(getUserDate());\r\n  \r\n\r\n  React.useEffect(() => {\r\n    if( elementWidth && elementWidth > 0 ) {\r\n      setEleWidth(elementWidth);\r\n    }\r\n  }, [elementWidth]);\r\n  \r\n  React.useEffect(()=>{\r\n    // console.log(\"🚀 ~ file: Timeline.component.tsx ~ line 125 ~ React.useEffect ~ time\", time)\r\n    setLocalTimeState(time);\r\n  }, [time]);\r\n  React.useEffect(()=>{\r\n    console.log(\"🚀 ~ file: Timeline.component.tsx ~ line 125 ~ React.useEffect ~ date\", date)\r\n    setLocalDateState(date);\r\n    // setDateState(getUserDateTime(\r\n    //     timezone, \r\n    //     localTimeState, \r\n    //     localDateState, \r\n    //     localTimezone\r\n    //   ).date);\r\n  }, [date]);\r\n  \r\n\r\n  React.useEffect(() => {\r\n    const cur = userTimeState.split(' ')[0].split(':');\r\n    // console.log(\"🚀 ~ file: Timeline.component.tsx ~ line 105 ~ React.useEffect ~ cur\", cur)\r\n    // console.log(timezone);\r\n    const [_curHour, _curMin ]= cur;\r\n    setCurHour(_curHour);\r\n    setCurMin(_curMin);\r\n  }, [timezone, userTimeState]);\r\n\r\n  React.useEffect(() => {\r\n    //recreate hoursArr base on the time parameter at middle\r\n    let tempHoursArr = hoursFormat.normal;\r\n    if (!militaryFormat) tempHoursArr = hoursFormat.military;\r\n    const prevArr = tempHoursArr.slice(0, Number(curHour) + 1);\r\n    const nextArr = tempHoursArr.slice(Number(curHour) + 1, hoursArr.length);\r\n    const baseArr = [...nextArr, ...prevArr, ...nextArr, ...prevArr];\r\n    // console.dir(1);\r\n    setHoursArr(baseArr);\r\n  }, [militaryFormat, hoursArr.length, curHour, userTimeState, userDateState]);\r\n\r\n  const holderCallbackRef = (ele: (HTMLDivElement | null)) => {\r\n      if (ele) {\r\n        // set cur hour in middle\r\n        const marginSetByMin = ( Number(curMin) / 60 ) * eleWidth; \r\n        ele.scrollLeft = (ele.scrollWidth / 2) - (ele.clientWidth / 2) - (eleWidth / 2) + marginSetByMin;\r\n      }\r\n  };\r\n\r\n  const getTimeWhenUsingMilitaryFormat = (_time:string) => {\r\n    // console.dir(_time);\r\n    // console.dir(hoursFormat.normal.indexOf(_time));\r\n    return hoursFormat.normal.indexOf(_time);\r\n  };\r\n  const getTime = (_time:string) => {\r\n    if(!militaryFormat) return Number(_time);\r\n      return getTimeWhenUsingMilitaryFormat(_time);\r\n  }\r\n\r\n  const setBackgroundColor = (t:string) => {  \r\n    const thisTime:number = getTime(t);\r\n    const type = {\r\n      night: 'NIGHT',\r\n      dawn: 'DAWN',\r\n      day: 'DAY',\r\n      dusk: 'DUSK',\r\n    }\r\n    // sunriseTime = '18:00', \r\n    // sunsetTime = '6:00', \r\n    const sunriseHour = Number(sunriseTime.split(':')[0]);\r\n    const sunsetHour = Number(sunsetTime.split(':')[0]);\r\n    let thisType = type.night;\r\n    if (thisTime < sunriseHour) thisType = type.night;\r\n    if (thisTime > sunriseHour && thisTime < sunsetHour ) thisType = type.day;\r\n    if (thisTime > sunsetHour) thisType = type.night;\r\n    if (thisTime === sunriseHour) thisType = type.dawn;\r\n    if (thisTime === sunsetHour) thisType = type.dusk;\r\n\r\n    const baseStyle = {\"width\":\"100%\"};\r\n\r\n    switch (thisType) {\r\n      case type.night:\r\n        return Object.assign({} as React.CSSProperties, baseStyle, {'backgroundColor': defaultColor.night});\r\n      case type.dawn:\r\n        return Object.assign({} as React.CSSProperties, baseStyle,  {'backgroundImage': `linear-gradient( 90deg, ${defaultColor.night} 13%, ${defaultColor.day} 86%)`, 'color': defaultColor.white });\r\n      case type.day:\r\n        return Object.assign({} as React.CSSProperties, baseStyle, {'backgroundColor': defaultColor.day});\r\n      case type.dusk:\r\n        return Object.assign({} as React.CSSProperties, baseStyle, {'backgroundImage': `linear-gradient( 90deg, ${defaultColor.day} 13%, ${defaultColor.night} 86%)`, 'color': defaultColor.white });\r\n      default:\r\n        return Object.assign({} as React.CSSProperties, baseStyle, {'backgroundColor': defaultColor.night});\r\n    }\r\n  }\r\n  \r\n  let zeroCount = 0;\r\n  const getAnnotation = (txt :string) => {\r\n    const curDate = new Date(Date.parse(txt));\r\n    let nextDate = new Date();\r\n    nextDate.setDate(curDate.getDate() + 1);\r\n    const annotationStyle = {\r\n      'position': 'absolute',\r\n      'top': '14px',\r\n      'fontSize': '0.6em',\r\n    } as React.CSSProperties;\r\n// DONE: show date under midnight cell\r\n//DONE: change date base on real data\r\n    if (zeroCount === 0) {\r\n      zeroCount += 1;\r\n      return <div style={annotationStyle} >{getFormattedDate(curDate)}</div>;\r\n    } else {\r\n      zeroCount += 1;\r\n      return <div style={annotationStyle} >{getFormattedDate(nextDate)}</div>;\r\n    }\r\n    \r\n    // return txt;\r\n  };\r\n\r\n  /**\r\n   * DONE: 3: click on time zone to edit time zone \r\n   * */\r\n\r\n  return (\r\n    <Styled.Container bg={color.background} txtColor={color.nightText}>\r\n      <Styled.Holder elementWidth={eleWidth} ref={holderCallbackRef} isScrollEnabled={false}>\r\n        {\r\n          hoursArr.map((x, index) => {\r\n            return (\r\n            <div key={index} style={{\"display\":\"flex\",\"flexDirection\":\"column\",\"position\":\"relative\", \"alignItems\":\"center\", \"fontSize\":\"1rem\"}}>\r\n              <div style={setBackgroundColor(x)} >{x}</div>\r\n              {(x === '0') ? getAnnotation(userDateState) : ''}\r\n            </div>\r\n            );\r\n          })\r\n        }\r\n      </Styled.Holder>\r\n    </Styled.Container>\r\n  )\r\n}\r\n\r\nexport default Timeline;","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getUserDateTime.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\color.settings.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.style.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getFormattedDate.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Header.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\index.tsx",[],["118","119"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\App.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.style.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\hours.setting.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.stories.tsx",[],{"ruleId":"120","severity":1,"message":"121","line":8,"column":8,"nodeType":"122","messageId":"123","endLine":8,"endColumn":34},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"120","severity":1,"message":"128","line":37,"column":33,"nodeType":"122","messageId":"123","endLine":37,"endColumn":56},{"ruleId":"120","severity":1,"message":"129","line":49,"column":11,"nodeType":"122","messageId":"123","endLine":49,"endColumn":27},{"ruleId":"120","severity":1,"message":"130","line":50,"column":11,"nodeType":"122","messageId":"123","endLine":50,"endColumn":27},{"ruleId":"131","severity":1,"message":"132","line":71,"column":6,"nodeType":"133","endLine":71,"endColumn":26,"suggestions":"134"},{"ruleId":"120","severity":1,"message":"135","line":84,"column":9,"nodeType":"122","messageId":"123","endLine":84,"endColumn":23},{"ruleId":"120","severity":1,"message":"136","line":85,"column":9,"nodeType":"122","messageId":"123","endLine":85,"endColumn":27},{"ruleId":"120","severity":1,"message":"137","line":86,"column":9,"nodeType":"122","messageId":"123","endLine":86,"endColumn":23},{"ruleId":"124","replacedBy":"138"},{"ruleId":"126","replacedBy":"139"},{"ruleId":"124","replacedBy":"140"},{"ruleId":"126","replacedBy":"141"},{"ruleId":"120","severity":1,"message":"142","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":25},{"ruleId":"120","severity":1,"message":"143","line":1,"column":27,"nodeType":"122","messageId":"123","endLine":1,"endColumn":41},{"ruleId":"120","severity":1,"message":"144","line":7,"column":8,"nodeType":"122","messageId":"123","endLine":7,"endColumn":23},{"ruleId":"120","severity":1,"message":"121","line":10,"column":8,"nodeType":"122","messageId":"123","endLine":10,"endColumn":34},{"ruleId":"124","replacedBy":"145"},{"ruleId":"126","replacedBy":"146"},"@typescript-eslint/no-unused-vars","'getCurrentDateTimeInFormat' is defined but never used.","Identifier","unusedVar","no-native-reassign",["147"],"no-negated-in-lhs",["148"],"'setDefaultTimezoneState' is assigned a value but never used.","'timeNowInNewYork' is assigned a value but never used.","'dateNowInNewYork' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'defaultTimezoneState'. Either include it or remove the dependency array.","ArrayExpression",["149"],"'changeUserName' is assigned a value but never used.","'changeUserTimezone' is assigned a value but never used.","'changeUserTime' is assigned a value but never used.",["147"],["148"],["147"],["148"],"'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","'getUserDateTime' is defined but never used.",["147"],["148"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},"Update the dependencies array to be: [defaultTimezoneState, localDateTimeState]",{"range":"152","text":"153"},[2931,2951],"[defaultTimezoneState, localDateTimeState]"]