[{"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.component.tsx":"1","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.stories.tsx":"2","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.component.tsx":"3","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getCurrentDateTimeInFormat.tsx":"4","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\data\\timezones.tsx":"5","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.component.tsx":"6","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.component.tsx":"7","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getUserDateTime.tsx":"8","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.stories.tsx":"9","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.stories.tsx":"10","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\color.settings.tsx":"11","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.style.tsx":"12","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getFormattedDate.tsx":"13","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Header.tsx":"14","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.stories.tsx":"15","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\index.tsx":"16","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\App.tsx":"17","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.style.tsx":"18","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.stories.tsx":"19","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\hours.setting.tsx":"20","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.tsx":"21"},{"size":5342,"mtime":1613600031131,"results":"22","hashOfConfig":"23"},{"size":706,"mtime":1613598364206,"results":"24","hashOfConfig":"23"},{"size":4766,"mtime":1613599527356,"results":"25","hashOfConfig":"23"},{"size":799,"mtime":1613255880288,"results":"26","hashOfConfig":"23"},{"size":8097,"mtime":1613270931542,"results":"27","hashOfConfig":"23"},{"size":1597,"mtime":1613600116416,"results":"28","hashOfConfig":"23"},{"size":7432,"mtime":1613429721648,"results":"29","hashOfConfig":"23"},{"size":1071,"mtime":1613272544849,"results":"30","hashOfConfig":"23"},{"size":605,"mtime":1608166159266,"results":"31","hashOfConfig":"23"},{"size":804,"mtime":1608166159266,"results":"32","hashOfConfig":"23"},{"size":253,"mtime":1612316458878,"results":"33","hashOfConfig":"23"},{"size":949,"mtime":1612227946553,"results":"34","hashOfConfig":"23"},{"size":269,"mtime":1612401655733,"results":"35","hashOfConfig":"23"},{"size":1356,"mtime":1608166159266,"results":"36","hashOfConfig":"23"},{"size":1140,"mtime":1612487742855,"results":"37","hashOfConfig":"23"},{"size":500,"mtime":1607822183420,"results":"38","hashOfConfig":"23"},{"size":361,"mtime":1613429513871,"results":"39","hashOfConfig":"23"},{"size":1250,"mtime":1612484781398,"results":"40","hashOfConfig":"23"},{"size":416,"mtime":1612921570468,"results":"41","hashOfConfig":"23"},{"size":514,"mtime":1610062729274,"results":"42","hashOfConfig":"23"},{"size":2415,"mtime":1608166159266,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hmkt3r",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.component.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\pages\\Homepage.component.tsx",["89","90","91","92","93","94","95","96"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getCurrentDateTimeInFormat.tsx",[],["97","98"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\data\\timezones.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.component.tsx",["99","100"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.component.tsx",["101","102"],"import React from 'react';\r\n\r\nimport defaultColor from '../settings/color.settings';\r\nimport hoursFormat from '../settings/hours.setting';\r\n\r\nimport { getFormattedDate } from '../lib/getFormattedDate';\r\nimport getUserDateTime from '../lib/getUserDateTime';\r\n\r\nimport { Styled } from './Timeline.style';\r\nimport getCurrentDateTimeInFormat from '../lib/getCurrentDateTimeInFormat';\r\n\r\n/**\r\n * @param { string } timezone - selected from a drop down\r\n * @param { string } time - must be military time: 16:15, set this time to the middle\r\n * @param { string } date - current date: 12-23-2020\r\n * @param { string } sunriseTime - must be military time: 7:00\r\n * @param { string } sunsetTime - must be military time: 18:00\r\n * @param { boolean } militaryFormat - whether to show time in military format\r\n * @param { object } color \r\n *  @param { string } night - hex code default: '#0A2875',\r\n *  @param { string } day - hex code default: '#FFEDC0',\r\n *  @param { string } nightText - hex code default: '#90AFFF',\r\n *  @param { string } dayText - hex code default: '#0A2875',\r\n *  @param { string } background - hex code default: '#0A2875',\r\n *  @param { string } textLighter - hex code default: '#FDFDFF',\r\n *  @param { string } textDarker - hex code default: '#4B67AD',\r\n * @param { number } elementWidth - number of the element width in px\r\n */\r\n\r\nexport interface Props {\r\n  timezone: string;\r\n  localTimezone: string;\r\n  time: string;\r\n  date: string;\r\n  elementWidth?: number;\r\n  sunriseTime?: string;\r\n  sunsetTime?: string;\r\n  militaryFormat?: boolean;\r\n  color?: {\r\n    night?: string;\r\n    day?: string;\r\n    nightText?: string;\r\n    dayText?: string;\r\n    background?: string;\r\n    textLighter?: string;\r\n    textDarker?: string;\r\n  }\r\n}\r\n\r\nconst Timeline: React.FC<Props> = ({\r\n    timezone, \r\n    localTimezone,\r\n    time, \r\n    date,\r\n    elementWidth, \r\n    sunriseTime = '6:00', \r\n    sunsetTime = '18:00', \r\n    militaryFormat = true,\r\n    color = defaultColor\r\n}) => {\r\n  \r\n  const getUserTime = () => {\r\n    // timezone, time, date, localTimezone\r\n    return getUserDateTime(\r\n        timezone, \r\n        getCurrentDateTimeInFormat(timezone).time, \r\n        getCurrentDateTimeInFormat(timezone).date, \r\n        localTimezone\r\n      ).time;\r\n  };\r\n  const getUserDate = () => {\r\n    return getUserDateTime(\r\n        timezone, \r\n        getCurrentDateTimeInFormat(timezone).time, \r\n        getCurrentDateTimeInFormat(timezone).date, \r\n        localTimezone\r\n      ).date;\r\n  };\r\n  const [hoursArr, setHoursArr] = React.useState<string[]>([]);\r\n  const [curHour, setCurHour] = React.useState<string>('0');\r\n  const [curMin, setCurMin] = React.useState<string>('0');\r\n  const [eleWidth, setEleWidth] = React.useState<number>(75);\r\n  const [dateState, setDateState] = React.useState<string>(getUserDate());\r\n  \r\n\r\n  React.useEffect(() => {\r\n    if( elementWidth && elementWidth > 0 ) {\r\n      setEleWidth(elementWidth);\r\n    }\r\n  }, [elementWidth]);\r\n\r\n  React.useEffect(() => {\r\n    const cur = getUserTime().split(' ')[0].split(':');\r\n    // console.log(timezone);\r\n    const [_curHour, _curMin ]= cur;\r\n    setCurHour(_curHour);\r\n    setCurMin(_curMin);\r\n  }, [timezone]);\r\n\r\n  React.useEffect(() => {\r\n    //recreate hoursArr base on the time parameter at middle\r\n    let tempHoursArr = hoursFormat.normal;\r\n    if (!militaryFormat) tempHoursArr = hoursFormat.military;\r\n    const prevArr = tempHoursArr.slice(0, Number(curHour) + 1);\r\n    const nextArr = tempHoursArr.slice(Number(curHour) + 1, hoursArr.length);\r\n    const baseArr = [...nextArr, ...prevArr, ...nextArr, ...prevArr];\r\n    // console.dir(1);\r\n    setHoursArr(baseArr);\r\n  }, [militaryFormat, hoursArr.length, curHour]);\r\n\r\n  const holderCallbackRef = (ele: (HTMLDivElement | null)) => {\r\n      if (ele) {\r\n        // set cur hour in middle\r\n        const marginSetByMin = ( Number(curMin) / 60 ) * eleWidth; \r\n        ele.scrollLeft = (ele.scrollWidth / 2) - (ele.clientWidth / 2) - (eleWidth / 2) + marginSetByMin;\r\n      }\r\n  };\r\n\r\n  const getTimeWhenUsingMilitaryFormat = (_time:string) => {\r\n    // console.dir(_time);\r\n    // console.dir(hoursFormat.normal.indexOf(_time));\r\n    return hoursFormat.normal.indexOf(_time);\r\n  };\r\n  const getTime = (_time:string) => {\r\n    if(!militaryFormat) return Number(_time);\r\n      return getTimeWhenUsingMilitaryFormat(_time);\r\n  }\r\n\r\n  const setBackgroundColor = (t:string) => {  \r\n    const thisTime:number = getTime(t);\r\n    const type = {\r\n      night: 'NIGHT',\r\n      dawn: 'DAWN',\r\n      day: 'DAY',\r\n      dusk: 'DUSK',\r\n    }\r\n    // sunriseTime = '18:00', \r\n    // sunsetTime = '6:00', \r\n    const sunriseHour = Number(sunriseTime.split(':')[0]);\r\n    const sunsetHour = Number(sunsetTime.split(':')[0]);\r\n    let thisType = type.night;\r\n    if (thisTime < sunriseHour) thisType = type.night;\r\n    if (thisTime > sunriseHour && thisTime < sunsetHour ) thisType = type.day;\r\n    if (thisTime > sunsetHour) thisType = type.night;\r\n    if (thisTime === sunriseHour) thisType = type.dawn;\r\n    if (thisTime === sunsetHour) thisType = type.dusk;\r\n\r\n    const baseStyle = {\"width\":\"100%\"};\r\n\r\n    switch (thisType) {\r\n      case type.night:\r\n        return Object.assign({} as React.CSSProperties, baseStyle, {'backgroundColor': defaultColor.night});\r\n      case type.dawn:\r\n        return Object.assign({} as React.CSSProperties, baseStyle,  {'backgroundImage': `linear-gradient( 90deg, ${defaultColor.night} 13%, ${defaultColor.day} 86%)`, 'color': defaultColor.white });\r\n      case type.day:\r\n        return Object.assign({} as React.CSSProperties, baseStyle, {'backgroundColor': defaultColor.day});\r\n      case type.dusk:\r\n        return Object.assign({} as React.CSSProperties, baseStyle, {'backgroundImage': `linear-gradient( 90deg, ${defaultColor.day} 13%, ${defaultColor.night} 86%)`, 'color': defaultColor.white });\r\n      default:\r\n        return Object.assign({} as React.CSSProperties, baseStyle, {'backgroundColor': defaultColor.night});\r\n    }\r\n  }\r\n  \r\n  let zeroCount = 0;\r\n  const getAnnotation = (txt :string) => {\r\n    const curDate = new Date(Date.parse(txt));\r\n    let nextDate = new Date();\r\n    nextDate.setDate(curDate.getDate() + 1);\r\n    const annotationStyle = {\r\n      'position': 'absolute',\r\n      'top': '14px',\r\n      'fontSize': '0.6em',\r\n    } as React.CSSProperties;\r\n// DONE: show date under midnight cell\r\n//DONE: change date base on real data\r\n    if (zeroCount === 0) {\r\n      zeroCount += 1;\r\n      return <div style={annotationStyle} >{getFormattedDate(curDate)}</div>;\r\n    } else {\r\n      zeroCount += 1;\r\n      return <div style={annotationStyle} >{getFormattedDate(nextDate)}</div>;\r\n    }\r\n    \r\n    // return txt;\r\n  };\r\n\r\n  /**\r\n   * DONE: 3: click on time zone to edit time zone \r\n   * */\r\n\r\n  return (\r\n    <Styled.Container bg={color.background} txtColor={color.nightText}>\r\n      <Styled.Holder elementWidth={eleWidth} ref={holderCallbackRef} isScrollEnabled={false}>\r\n        {\r\n          hoursArr.map((x, index) => {\r\n            return (\r\n            <div key={index} style={{\"display\":\"flex\",\"flexDirection\":\"column\",\"position\":\"relative\", \"alignItems\":\"center\", \"fontSize\":\"1rem\"}}>\r\n              <div style={setBackgroundColor(x)} >{x}</div>\r\n              {(x === '0') ? getAnnotation(dateState) : ''}\r\n            </div>\r\n            );\r\n          })\r\n        }\r\n      </Styled.Holder>\r\n    </Styled.Container>\r\n  )\r\n}\r\n\r\nexport default Timeline;","D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getUserDateTime.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.stories.tsx",[],["103","104"],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Button.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\color.settings.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.style.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\lib\\getFormattedDate.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Header.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Entry.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\index.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\App.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\Timeline.style.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\components\\TimezonePicker.stories.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\settings\\hours.setting.tsx",[],"D:\\Github\\Time Zone Organizer\\time-zone-organizer\\src\\stories\\Page.tsx",[],{"ruleId":"105","severity":1,"message":"106","line":37,"column":33,"nodeType":"107","messageId":"108","endLine":37,"endColumn":56},{"ruleId":"105","severity":1,"message":"109","line":38,"column":22,"nodeType":"107","messageId":"108","endLine":38,"endColumn":34},{"ruleId":"105","severity":1,"message":"110","line":39,"column":22,"nodeType":"107","messageId":"108","endLine":39,"endColumn":34},{"ruleId":"105","severity":1,"message":"111","line":44,"column":11,"nodeType":"107","messageId":"108","endLine":44,"endColumn":27},{"ruleId":"105","severity":1,"message":"112","line":45,"column":11,"nodeType":"107","messageId":"108","endLine":45,"endColumn":27},{"ruleId":"105","severity":1,"message":"113","line":74,"column":9,"nodeType":"107","messageId":"108","endLine":74,"endColumn":23},{"ruleId":"105","severity":1,"message":"114","line":75,"column":9,"nodeType":"107","messageId":"108","endLine":75,"endColumn":27},{"ruleId":"105","severity":1,"message":"115","line":76,"column":9,"nodeType":"107","messageId":"108","endLine":76,"endColumn":23},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"105","severity":1,"message":"120","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"121","line":1,"column":27,"nodeType":"107","messageId":"108","endLine":1,"endColumn":41},{"ruleId":"105","severity":1,"message":"110","line":83,"column":21,"nodeType":"107","messageId":"108","endLine":83,"endColumn":33},{"ruleId":"122","severity":1,"message":"123","line":98,"column":6,"nodeType":"124","endLine":98,"endColumn":16,"suggestions":"125"},{"ruleId":"116","replacedBy":"126"},{"ruleId":"118","replacedBy":"127"},"@typescript-eslint/no-unused-vars","'setDefaultTimezoneState' is assigned a value but never used.","Identifier","unusedVar","'setTimeState' is assigned a value but never used.","'setDateState' is assigned a value but never used.","'timeNowInNewYork' is assigned a value but never used.","'dateNowInNewYork' is assigned a value but never used.","'changeUserName' is assigned a value but never used.","'changeUserTimezone' is assigned a value but never used.","'changeUserTime' is assigned a value but never used.","no-native-reassign",["128"],"no-negated-in-lhs",["129"],"'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getUserTime'. Either include it or remove the dependency array.","ArrayExpression",["130"],["128"],["129"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [getUserTime, timezone]",{"range":"133","text":"134"},[3169,3179],"[getUserTime, timezone]"]