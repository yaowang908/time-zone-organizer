"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-datepicker";
exports.ids = ["vendor-chunks/react-datepicker"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-datepicker/dist/es/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-datepicker/dist/es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalendarContainer: () => (/* binding */ CalendarContainer),\n/* harmony export */   \"default\": () => (/* binding */ DatePicker),\n/* harmony export */   getDefaultLocale: () => (/* binding */ getDefaultLocale),\n/* harmony export */   registerLocale: () => (/* binding */ registerLocale),\n/* harmony export */   setDefaultLocale: () => (/* binding */ setDefaultLocale)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! date-fns/isDate */ \"(ssr)/./node_modules/date-fns/isDate.mjs\");\n/* harmony import */ var date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns/isValid */ \"(ssr)/./node_modules/date-fns/isValid.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/_lib/format/longFormatters.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! date-fns/addMinutes */ \"(ssr)/./node_modules/date-fns/addMinutes.mjs\");\n/* harmony import */ var date_fns_addHours__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! date-fns/addHours */ \"(ssr)/./node_modules/date-fns/addHours.mjs\");\n/* harmony import */ var date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! date-fns/addDays */ \"(ssr)/./node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! date-fns/addWeeks */ \"(ssr)/./node_modules/date-fns/addWeeks.mjs\");\n/* harmony import */ var date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! date-fns/addMonths */ \"(ssr)/./node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! date-fns/addQuarters */ \"(ssr)/./node_modules/date-fns/addQuarters.mjs\");\n/* harmony import */ var date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! date-fns/addYears */ \"(ssr)/./node_modules/date-fns/addYears.mjs\");\n/* harmony import */ var date_fns_subDays__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! date-fns/subDays */ \"(ssr)/./node_modules/date-fns/subDays.mjs\");\n/* harmony import */ var date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! date-fns/subWeeks */ \"(ssr)/./node_modules/date-fns/subWeeks.mjs\");\n/* harmony import */ var date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! date-fns/subMonths */ \"(ssr)/./node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! date-fns/subQuarters */ \"(ssr)/./node_modules/date-fns/subQuarters.mjs\");\n/* harmony import */ var date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! date-fns/subYears */ \"(ssr)/./node_modules/date-fns/subYears.mjs\");\n/* harmony import */ var date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/getSeconds.mjs\");\n/* harmony import */ var date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! date-fns/getMinutes */ \"(ssr)/./node_modules/date-fns/getMinutes.mjs\");\n/* harmony import */ var date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! date-fns/getHours */ \"(ssr)/./node_modules/date-fns/getHours.mjs\");\n/* harmony import */ var date_fns_getDay__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! date-fns/getDay */ \"(ssr)/./node_modules/date-fns/getDay.mjs\");\n/* harmony import */ var date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! date-fns/getDate */ \"(ssr)/./node_modules/date-fns/getDate.mjs\");\n/* harmony import */ var date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns/getISOWeek */ \"(ssr)/./node_modules/date-fns/getISOWeek.mjs\");\n/* harmony import */ var date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! date-fns/getMonth */ \"(ssr)/./node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! date-fns/getQuarter */ \"(ssr)/./node_modules/date-fns/getQuarter.mjs\");\n/* harmony import */ var date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns/getYear */ \"(ssr)/./node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! date-fns/getTime */ \"(ssr)/./node_modules/date-fns/getTime.mjs\");\n/* harmony import */ var date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns/setSeconds */ \"(ssr)/./node_modules/date-fns/setSeconds.mjs\");\n/* harmony import */ var date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/setMinutes */ \"(ssr)/./node_modules/date-fns/setMinutes.mjs\");\n/* harmony import */ var date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns/setHours */ \"(ssr)/./node_modules/date-fns/setHours.mjs\");\n/* harmony import */ var date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns/setMonth */ \"(ssr)/./node_modules/date-fns/setMonth.mjs\");\n/* harmony import */ var date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns/setQuarter */ \"(ssr)/./node_modules/date-fns/setQuarter.mjs\");\n/* harmony import */ var date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! date-fns/setYear */ \"(ssr)/./node_modules/date-fns/setYear.mjs\");\n/* harmony import */ var date_fns_min__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! date-fns/min */ \"(ssr)/./node_modules/date-fns/min.mjs\");\n/* harmony import */ var date_fns_max__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! date-fns/max */ \"(ssr)/./node_modules/date-fns/max.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! date-fns/differenceInCalendarDays */ \"(ssr)/./node_modules/date-fns/differenceInCalendarDays.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! date-fns/differenceInCalendarMonths */ \"(ssr)/./node_modules/date-fns/differenceInCalendarMonths.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! date-fns/differenceInCalendarYears */ \"(ssr)/./node_modules/date-fns/differenceInCalendarYears.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! date-fns/differenceInCalendarQuarters */ \"(ssr)/./node_modules/date-fns/differenceInCalendarQuarters.mjs\");\n/* harmony import */ var date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns/startOfDay */ \"(ssr)/./node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/./node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns/startOfMonth */ \"(ssr)/./node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns/startOfQuarter */ \"(ssr)/./node_modules/date-fns/startOfQuarter.mjs\");\n/* harmony import */ var date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns/startOfYear */ \"(ssr)/./node_modules/date-fns/startOfYear.mjs\");\n/* harmony import */ var date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns/endOfDay */ \"(ssr)/./node_modules/date-fns/endOfDay.mjs\");\n/* harmony import */ var date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/./node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns/endOfMonth */ \"(ssr)/./node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! date-fns/endOfYear */ \"(ssr)/./node_modules/date-fns/endOfYear.mjs\");\n/* harmony import */ var date_fns_isEqual__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns/isEqual */ \"(ssr)/./node_modules/date-fns/isEqual.mjs\");\n/* harmony import */ var date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/./node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns/isSameMonth */ \"(ssr)/./node_modules/date-fns/isSameMonth.mjs\");\n/* harmony import */ var date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns/isSameYear */ \"(ssr)/./node_modules/date-fns/isSameYear.mjs\");\n/* harmony import */ var date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns/isSameQuarter */ \"(ssr)/./node_modules/date-fns/isSameQuarter.mjs\");\n/* harmony import */ var date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! date-fns/isAfter */ \"(ssr)/./node_modules/date-fns/isAfter.mjs\");\n/* harmony import */ var date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns/isBefore */ \"(ssr)/./node_modules/date-fns/isBefore.mjs\");\n/* harmony import */ var date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns/isWithinInterval */ \"(ssr)/./node_modules/date-fns/isWithinInterval.mjs\");\n/* harmony import */ var date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns/toDate */ \"(ssr)/./node_modules/date-fns/toDate.mjs\");\n/* harmony import */ var date_fns_parse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/parse */ \"(ssr)/./node_modules/date-fns/parse.mjs\");\n/* harmony import */ var date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns/parseISO */ \"(ssr)/./node_modules/date-fns/parseISO.mjs\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/addSeconds.mjs\");\n/* harmony import */ var react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-onclickoutside */ \"(ssr)/./node_modules/react-onclickoutside/dist/react-onclickoutside.es.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var date_fns_set__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! date-fns/set */ \"(ssr)/./node_modules/date-fns/set.mjs\");\n/*!\n  react-datepicker v6.9.0\n  https://github.com/Hacker0x01/react-datepicker\n  Released under the MIT License.\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar DEFAULT_YEAR_ITEM_NUMBER = 12;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\n// ** Date Constructors **\n\nfunction newDate(value) {\n  var d = value ? typeof value === \"string\" || value instanceof String ? (0,date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__.parseISO)(value) : (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(value) : new Date();\n  return isValid(d) ? d : null;\n}\nfunction parseDate(value, dateFormat, locale, strictParsing, minDate) {\n  var parsedDate = null;\n  var localeObject = getLocaleObject(locale) || getLocaleObject(getDefaultLocale());\n  var strictParsingValueMatch = true;\n  if (Array.isArray(dateFormat)) {\n    dateFormat.forEach(function (df) {\n      var tryParseDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, df, new Date(), {\n        locale: localeObject,\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true\n      });\n      if (strictParsing) {\n        strictParsingValueMatch = isValid(tryParseDate, minDate) && value === formatDate(tryParseDate, df, locale);\n      }\n      if (isValid(tryParseDate, minDate) && strictParsingValueMatch) {\n        parsedDate = tryParseDate;\n      }\n    });\n    return parsedDate;\n  }\n  parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat, new Date(), {\n    locale: localeObject,\n    useAdditionalWeekYearTokens: true,\n    useAdditionalDayOfYearTokens: true\n  });\n  if (strictParsing) {\n    strictParsingValueMatch = isValid(parsedDate) && value === formatDate(parsedDate, dateFormat, locale);\n  } else if (!isValid(parsedDate)) {\n    dateFormat = dateFormat.match(longFormattingTokensRegExp).map(function (substring) {\n      var firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        var longFormatter = date_fns_format__WEBPACK_IMPORTED_MODULE_7__.longFormatters[firstCharacter];\n        return localeObject ? longFormatter(substring, localeObject.formatLong) : firstCharacter;\n      }\n      return substring;\n    }).join(\"\");\n    if (value.length > 0) {\n      parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat.slice(0, value.length), new Date(), {\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true\n      });\n    }\n    if (!isValid(parsedDate)) {\n      parsedDate = new Date(value);\n    }\n  }\n  return isValid(parsedDate) && strictParsingValueMatch ? parsedDate : null;\n}\nfunction isValid(date, minDate) {\n  minDate = minDate ? minDate : new Date(\"1/1/1000\");\n  return (0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date) && !(0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, minDate);\n}\n\n// ** Date Formatting **\n\nfunction formatDate(date, formatStr, locale) {\n  if (locale === \"en\") {\n    return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\n      useAdditionalWeekYearTokens: true,\n      useAdditionalDayOfYearTokens: true\n    });\n  }\n  var localeObj = getLocaleObject(locale);\n  if (locale && !localeObj) {\n    console.warn(\"A locale object was not found for the provided string [\\\"\".concat(locale, \"\\\"].\"));\n  }\n  if (!localeObj && !!getDefaultLocale() && !!getLocaleObject(getDefaultLocale())) {\n    localeObj = getLocaleObject(getDefaultLocale());\n  }\n  return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\n    locale: localeObj ? localeObj : null,\n    useAdditionalWeekYearTokens: true,\n    useAdditionalDayOfYearTokens: true\n  });\n}\nfunction safeDateFormat(date, _ref) {\n  var dateFormat = _ref.dateFormat,\n    locale = _ref.locale;\n  return date && formatDate(date, Array.isArray(dateFormat) ? dateFormat[0] : dateFormat, locale) || \"\";\n}\nfunction safeDateRangeFormat(startDate, endDate, props) {\n  if (!startDate) {\n    return \"\";\n  }\n  var formattedStartDate = safeDateFormat(startDate, props);\n  var formattedEndDate = endDate ? safeDateFormat(endDate, props) : \"\";\n  return \"\".concat(formattedStartDate, \" - \").concat(formattedEndDate);\n}\nfunction safeMultipleDatesFormat(dates, props) {\n  if (!(dates !== null && dates !== void 0 && dates.length)) {\n    return \"\";\n  }\n  var formattedFirstDate = safeDateFormat(dates[0], props);\n  if (dates.length === 1) {\n    return formattedFirstDate;\n  }\n  if (dates.length === 2) {\n    var formattedSecondDate = safeDateFormat(dates[1], props);\n    return \"\".concat(formattedFirstDate, \", \").concat(formattedSecondDate);\n  }\n  var extraDatesCount = dates.length - 1;\n  return \"\".concat(formattedFirstDate, \" (+\").concat(extraDatesCount, \")\");\n}\n\n// ** Date Setters **\n\nfunction setTime(date, _ref2) {\n  var _ref2$hour = _ref2.hour,\n    hour = _ref2$hour === void 0 ? 0 : _ref2$hour,\n    _ref2$minute = _ref2.minute,\n    minute = _ref2$minute === void 0 ? 0 : _ref2$minute,\n    _ref2$second = _ref2.second,\n    second = _ref2$second === void 0 ? 0 : _ref2$second;\n  return (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)((0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)((0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(date, second), minute), hour);\n}\nfunction getWeek(date, locale) {\n  var localeObj = locale && getLocaleObject(locale) || getDefaultLocale() && getLocaleObject(getDefaultLocale());\n  return (0,date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__.getISOWeek)(date, localeObj ? {\n    locale: localeObj\n  } : null);\n}\nfunction getDayOfWeekCode(day, locale) {\n  return formatDate(day, \"ddd\", locale);\n}\n\n// *** Start of ***\n\nfunction getStartOfDay(date) {\n  return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\n}\nfunction getStartOfWeek(date, locale, calendarStartDay) {\n  var localeObj = locale ? getLocaleObject(locale) : getLocaleObject(getDefaultLocale());\n  return (0,date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__.startOfWeek)(date, {\n    locale: localeObj,\n    weekStartsOn: calendarStartDay\n  });\n}\nfunction getStartOfMonth(date) {\n  return (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(date);\n}\nfunction getStartOfYear(date) {\n  return (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\n}\nfunction getStartOfQuarter(date) {\n  return (0,date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__.startOfQuarter)(date);\n}\nfunction getStartOfToday() {\n  return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(newDate());\n}\n\n// *** End of ***\n\nfunction getEndOfWeek(date) {\n  return (0,date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_20__.endOfWeek)(date);\n}\nfunction isSameYear(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_21__.isSameYear)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isSameMonth(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_22__.isSameMonth)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isSameQuarter(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_23__.isSameQuarter)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isSameDay(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_24__.isSameDay)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isEqual(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_isEqual__WEBPACK_IMPORTED_MODULE_25__.isEqual)(date1, date2);\n  } else {\n    return !date1 && !date2;\n  }\n}\nfunction isDayInRange(day, startDate, endDate) {\n  var valid;\n  var start = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(startDate);\n  var end = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(endDate);\n  try {\n    valid = (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n      start: start,\n      end: end\n    });\n  } catch (err) {\n    valid = false;\n  }\n  return valid;\n}\n\n// ** Date Localization **\n\nfunction registerLocale(localeName, localeData) {\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\n  if (!scope.__localeData__) {\n    scope.__localeData__ = {};\n  }\n  scope.__localeData__[localeName] = localeData;\n}\nfunction setDefaultLocale(localeName) {\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\n  scope.__localeId__ = localeName;\n}\nfunction getDefaultLocale() {\n  var scope = typeof window !== \"undefined\" ? window : globalThis;\n  return scope.__localeId__;\n}\nfunction getLocaleObject(localeSpec) {\n  if (typeof localeSpec === \"string\") {\n    // Treat it as a locale name registered by registerLocale\n    var scope = typeof window !== \"undefined\" ? window : globalThis;\n    return scope.__localeData__ ? scope.__localeData__[localeSpec] : null;\n  } else {\n    // Treat it as a raw date-fns locale object\n    return localeSpec;\n  }\n}\nfunction getFormattedWeekdayInLocale(date, formatFunc, locale) {\n  return formatFunc(formatDate(date, \"EEEE\", locale));\n}\nfunction getWeekdayMinInLocale(date, locale) {\n  return formatDate(date, \"EEEEEE\", locale);\n}\nfunction getWeekdayShortInLocale(date, locale) {\n  return formatDate(date, \"EEE\", locale);\n}\nfunction getMonthInLocale(month, locale) {\n  return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLLL\", locale);\n}\nfunction getMonthShortInLocale(month, locale) {\n  return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLL\", locale);\n}\nfunction getQuarterShortInLocale(quarter, locale) {\n  return formatDate((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(newDate(), quarter), \"QQQ\", locale);\n}\n\n// ** Utils for some components **\n\nfunction isDayDisabled(day) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref3.minDate,\n    maxDate = _ref3.maxDate,\n    excludeDates = _ref3.excludeDates,\n    excludeDateIntervals = _ref3.excludeDateIntervals,\n    includeDates = _ref3.includeDates,\n    includeDateIntervals = _ref3.includeDateIntervals,\n    filterDate = _ref3.filterDate;\n  return isOutOfBounds(day, {\n    minDate: minDate,\n    maxDate: maxDate\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameDay(day, excludeDate.date ? excludeDate.date : excludeDate);\n  }) || excludeDateIntervals && excludeDateIntervals.some(function (_ref4) {\n    var start = _ref4.start,\n      end = _ref4.end;\n    return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n      start: start,\n      end: end\n    });\n  }) || includeDates && !includeDates.some(function (includeDate) {\n    return isSameDay(day, includeDate);\n  }) || includeDateIntervals && !includeDateIntervals.some(function (_ref5) {\n    var start = _ref5.start,\n      end = _ref5.end;\n    return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n      start: start,\n      end: end\n    });\n  }) || filterDate && !filterDate(newDate(day)) || false;\n}\nfunction isDayExcluded(day) {\n  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    excludeDates = _ref6.excludeDates,\n    excludeDateIntervals = _ref6.excludeDateIntervals;\n  if (excludeDateIntervals && excludeDateIntervals.length > 0) {\n    return excludeDateIntervals.some(function (_ref7) {\n      var start = _ref7.start,\n        end = _ref7.end;\n      return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, {\n        start: start,\n        end: end\n      });\n    });\n  }\n  return excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameDay(day, excludeDate.date ? excludeDate.date : excludeDate);\n  }) || false;\n}\nfunction isMonthDisabled(month) {\n  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref8.minDate,\n    maxDate = _ref8.maxDate,\n    excludeDates = _ref8.excludeDates,\n    includeDates = _ref8.includeDates,\n    filterDate = _ref8.filterDate;\n  return isOutOfBounds(month, {\n    minDate: (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(minDate),\n    maxDate: (0,date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__.endOfMonth)(maxDate)\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameMonth(month, excludeDate);\n  }) || includeDates && !includeDates.some(function (includeDate) {\n    return isSameMonth(month, includeDate);\n  }) || filterDate && !filterDate(newDate(month)) || false;\n}\nfunction isMonthInRange(startDate, endDate, m, day) {\n  var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\n  var startDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(startDate);\n  var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\n  var endDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(endDate);\n  var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\n  if (startDateYear === endDateYear && startDateYear === dayYear) {\n    return startDateMonth <= m && m <= endDateMonth;\n  } else if (startDateYear < endDateYear) {\n    return dayYear === startDateYear && startDateMonth <= m || dayYear === endDateYear && endDateMonth >= m || dayYear < endDateYear && dayYear > startDateYear;\n  }\n}\nfunction isQuarterDisabled(quarter) {\n  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref9.minDate,\n    maxDate = _ref9.maxDate,\n    excludeDates = _ref9.excludeDates,\n    includeDates = _ref9.includeDates,\n    filterDate = _ref9.filterDate;\n  return isOutOfBounds(quarter, {\n    minDate: minDate,\n    maxDate: maxDate\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameQuarter(quarter, excludeDate);\n  }) || includeDates && !includeDates.some(function (includeDate) {\n    return isSameQuarter(quarter, includeDate);\n  }) || filterDate && !filterDate(newDate(quarter)) || false;\n}\n\n/**\n * @param {number} year\n * @param {Date} start\n * @param {Date} end\n * @returns {boolean}\n */\nfunction isYearInRange(year, start, end) {\n  if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(start) || !(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(end)) return false;\n  var startYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(start);\n  var endYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(end);\n  return startYear <= year && endYear >= year;\n}\nfunction isYearDisabled(year) {\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref10.minDate,\n    maxDate = _ref10.maxDate,\n    excludeDates = _ref10.excludeDates,\n    includeDates = _ref10.includeDates,\n    filterDate = _ref10.filterDate;\n  var date = new Date(year, 0, 1);\n  return isOutOfBounds(date, {\n    minDate: (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(minDate),\n    maxDate: (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(maxDate)\n  }) || excludeDates && excludeDates.some(function (excludeDate) {\n    return isSameYear(date, excludeDate);\n  }) || includeDates && !includeDates.some(function (includeDate) {\n    return isSameYear(date, includeDate);\n  }) || filterDate && !filterDate(newDate(date)) || false;\n}\nfunction isQuarterInRange(startDate, endDate, q, day) {\n  var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\n  var startDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(startDate);\n  var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\n  var endDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(endDate);\n  var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\n  if (startDateYear === endDateYear && startDateYear === dayYear) {\n    return startDateQuarter <= q && q <= endDateQuarter;\n  } else if (startDateYear < endDateYear) {\n    return dayYear === startDateYear && startDateQuarter <= q || dayYear === endDateYear && endDateQuarter >= q || dayYear < endDateYear && dayYear > startDateYear;\n  }\n}\nfunction isOutOfBounds(day) {\n  var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref11.minDate,\n    maxDate = _ref11.maxDate;\n  return minDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, minDate) < 0 || maxDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, maxDate) > 0;\n}\nfunction isTimeInList(time, times) {\n  return times.some(function (listTime) {\n    return (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(listTime) === (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) && (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(listTime) === (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) && (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(listTime) === (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time);\n  });\n}\nfunction isTimeDisabled(time) {\n  var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    excludeTimes = _ref12.excludeTimes,\n    includeTimes = _ref12.includeTimes,\n    filterTime = _ref12.filterTime;\n  return excludeTimes && isTimeInList(time, excludeTimes) || includeTimes && !isTimeInList(time, includeTimes) || filterTime && !filterTime(time) || false;\n}\nfunction isTimeInDisabledRange(time, _ref13) {\n  var minTime = _ref13.minTime,\n    maxTime = _ref13.maxTime;\n  if (!minTime || !maxTime) {\n    throw new Error(\"Both minTime and maxTime props required\");\n  }\n  var baseTime = newDate();\n  baseTime = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(baseTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time));\n  baseTime = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(baseTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time));\n  baseTime = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(baseTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time));\n  var min = newDate();\n  min = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(min, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(minTime));\n  min = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(min, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(minTime));\n  min = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(min, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(minTime));\n  var max = newDate();\n  max = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(max, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(maxTime));\n  max = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(max, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(maxTime));\n  max = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(max, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(maxTime));\n  var valid;\n  try {\n    valid = !(0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(baseTime, {\n      start: min,\n      end: max\n    });\n  } catch (err) {\n    valid = false;\n  }\n  return valid;\n}\nfunction monthDisabledBefore(day) {\n  var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref14.minDate,\n    includeDates = _ref14.includeDates;\n  var previousMonth = (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(day, 1);\n  return minDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(minDate, previousMonth) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(includeDate, previousMonth) > 0;\n  }) || false;\n}\nfunction monthDisabledAfter(day) {\n  var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    maxDate = _ref15.maxDate,\n    includeDates = _ref15.includeDates;\n  var nextMonth = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(day, 1);\n  return maxDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(nextMonth, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(nextMonth, includeDate) > 0;\n  }) || false;\n}\nfunction quarterDisabledBefore(date) {\n  var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref16.minDate,\n    includeDates = _ref16.includeDates;\n  var firstDateOfYear = (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\n  var previousQuarter = (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__.subQuarters)(firstDateOfYear, 1);\n  return minDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(minDate, previousQuarter) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(includeDate, previousQuarter) > 0;\n  }) || false;\n}\nfunction quarterDisabledAfter(date) {\n  var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    maxDate = _ref17.maxDate,\n    includeDates = _ref17.includeDates;\n  var lastDateOfYear = (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(date);\n  var nextQuarter = (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__.addQuarters)(lastDateOfYear, 1);\n  return maxDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(nextQuarter, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(nextQuarter, includeDate) > 0;\n  }) || false;\n}\nfunction yearDisabledBefore(day) {\n  var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref18.minDate,\n    includeDates = _ref18.includeDates;\n  var previousYear = (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(day, 1);\n  return minDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(minDate, previousYear) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(includeDate, previousYear) > 0;\n  }) || false;\n}\nfunction yearsDisabledBefore(day) {\n  var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minDate = _ref19.minDate,\n    _ref19$yearItemNumber = _ref19.yearItemNumber,\n    yearItemNumber = _ref19$yearItemNumber === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _ref19$yearItemNumber;\n  var previousYear = getStartOfYear((0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(day, yearItemNumber));\n  var _getYearsPeriod = getYearsPeriod(previousYear, yearItemNumber),\n    endPeriod = _getYearsPeriod.endPeriod;\n  var minDateYear = minDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate);\n  return minDateYear && minDateYear > endPeriod || false;\n}\nfunction yearDisabledAfter(day) {\n  var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    maxDate = _ref20.maxDate,\n    includeDates = _ref20.includeDates;\n  var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(day, 1);\n  return maxDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(nextYear, maxDate) > 0 || includeDates && includeDates.every(function (includeDate) {\n    return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(nextYear, includeDate) > 0;\n  }) || false;\n}\nfunction yearsDisabledAfter(day) {\n  var _ref21 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    maxDate = _ref21.maxDate,\n    _ref21$yearItemNumber = _ref21.yearItemNumber,\n    yearItemNumber = _ref21$yearItemNumber === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _ref21$yearItemNumber;\n  var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(day, yearItemNumber);\n  var _getYearsPeriod2 = getYearsPeriod(nextYear, yearItemNumber),\n    startPeriod = _getYearsPeriod2.startPeriod;\n  var maxDateYear = maxDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate);\n  return maxDateYear && maxDateYear < startPeriod || false;\n}\nfunction getEffectiveMinDate(_ref22) {\n  var minDate = _ref22.minDate,\n    includeDates = _ref22.includeDates;\n  if (includeDates && minDate) {\n    var minDates = includeDates.filter(function (includeDate) {\n      return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, minDate) >= 0;\n    });\n    return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_48__.min)(minDates);\n  } else if (includeDates) {\n    return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_48__.min)(includeDates);\n  } else {\n    return minDate;\n  }\n}\nfunction getEffectiveMaxDate(_ref23) {\n  var maxDate = _ref23.maxDate,\n    includeDates = _ref23.includeDates;\n  if (includeDates && maxDate) {\n    var maxDates = includeDates.filter(function (includeDate) {\n      return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, maxDate) <= 0;\n    });\n    return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_49__.max)(maxDates);\n  } else if (includeDates) {\n    return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_49__.max)(includeDates);\n  } else {\n    return maxDate;\n  }\n}\nfunction getHightLightDaysMap() {\n  var highlightDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var defaultClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"react-datepicker__day--highlighted\";\n  var dateClasses = new Map();\n  for (var i = 0, len = highlightDates.length; i < len; i++) {\n    var obj = highlightDates[i];\n    if ((0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(obj)) {\n      var key = formatDate(obj, \"MM.dd.yyyy\");\n      var classNamesArr = dateClasses.get(key) || [];\n      if (!classNamesArr.includes(defaultClassName)) {\n        classNamesArr.push(defaultClassName);\n        dateClasses.set(key, classNamesArr);\n      }\n    } else if (_typeof(obj) === \"object\") {\n      var keys = Object.keys(obj);\n      var className = keys[0];\n      var arrOfDates = obj[keys[0]];\n      if (typeof className === \"string\" && arrOfDates.constructor === Array) {\n        for (var k = 0, _len = arrOfDates.length; k < _len; k++) {\n          var _key = formatDate(arrOfDates[k], \"MM.dd.yyyy\");\n          var _classNamesArr = dateClasses.get(_key) || [];\n          if (!_classNamesArr.includes(className)) {\n            _classNamesArr.push(className);\n            dateClasses.set(_key, _classNamesArr);\n          }\n        }\n      }\n    }\n  }\n  return dateClasses;\n}\n\n/**\n * Compare the two arrays\n * @param {Array} array1\n * @param {Array} array2\n * @returns {Boolean} true, if the passed array are equal, false otherwise\n */\nfunction arraysAreEqual(array1, array2) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  return array1.every(function (value, index) {\n    return value === array2[index];\n  });\n}\n\n/**\n * Assign the custom class to each date\n * @param {Array} holidayDates array of object containing date and name of the holiday\n * @param {string} classname to be added.\n * @returns {Map} Map containing date as key and array of classname and holiday name as value\n */\nfunction getHolidaysMap() {\n  var holidayDates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var defaultClassName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"react-datepicker__day--holidays\";\n  var dateClasses = new Map();\n  holidayDates.forEach(function (holiday) {\n    var dateObj = holiday.date,\n      holidayName = holiday.holidayName;\n    if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(dateObj)) {\n      return;\n    }\n    var key = formatDate(dateObj, \"MM.dd.yyyy\");\n    var classNamesObj = dateClasses.get(key) || {};\n    if (\"className\" in classNamesObj && classNamesObj[\"className\"] === defaultClassName && arraysAreEqual(classNamesObj[\"holidayNames\"], [holidayName])) {\n      return;\n    }\n    classNamesObj[\"className\"] = defaultClassName;\n    var holidayNameArr = classNamesObj[\"holidayNames\"];\n    classNamesObj[\"holidayNames\"] = holidayNameArr ? [].concat(_toConsumableArray(holidayNameArr), [holidayName]) : [holidayName];\n    dateClasses.set(key, classNamesObj);\n  });\n  return dateClasses;\n}\nfunction timesToInjectAfter(startOfDay, currentTime, currentMultiplier, intervals, injectedTimes) {\n  var l = injectedTimes.length;\n  var times = [];\n  for (var i = 0; i < l; i++) {\n    var injectedTime = startOfDay;\n    injectedTime = (0,date_fns_addHours__WEBPACK_IMPORTED_MODULE_51__.addHours)(injectedTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(injectedTimes[i]));\n    injectedTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(injectedTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(injectedTimes[i]));\n    injectedTime = (0,date_fns__WEBPACK_IMPORTED_MODULE_53__.addSeconds)(injectedTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(injectedTimes[i]));\n    var nextTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(startOfDay, (currentMultiplier + 1) * intervals);\n    if ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(injectedTime, currentTime) && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(injectedTime, nextTime)) {\n      times.push(injectedTimes[i]);\n    }\n  }\n  return times;\n}\nfunction addZero(i) {\n  return i < 10 ? \"0\".concat(i) : \"\".concat(i);\n}\nfunction getYearsPeriod(date) {\n  var yearItemNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_YEAR_ITEM_NUMBER;\n  var endPeriod = Math.ceil((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date) / yearItemNumber) * yearItemNumber;\n  var startPeriod = endPeriod - (yearItemNumber - 1);\n  return {\n    startPeriod: startPeriod,\n    endPeriod: endPeriod\n  };\n}\nfunction getHoursInDay(d) {\n  var startOfDay = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n  var startOfTheNextDay = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 24);\n  return Math.round((+startOfTheNextDay - +startOfDay) / 3600000);\n}\n\n/**\n * Returns the start of the minute for the given date\n *\n * NOTE: this function is a DST and timezone-safe analog of `date-fns/startOfMinute`\n * do not make changes unless you know what you're doing\n *\n * See comments on https://github.com/Hacker0x01/react-datepicker/pull/4244\n * for more details\n *\n * @param {Date} d date\n * @returns {Date} start of the minute\n */\nfunction startOfMinute(d) {\n  var seconds = d.getSeconds();\n  var milliseconds = d.getMilliseconds();\n  return (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(d.getTime() - seconds * 1000 - milliseconds);\n}\n\n/**\n * Returns whether the given dates are in the same minute\n *\n * This function is a DST and timezone-safe analog of `date-fns/isSameMinute`\n *\n * @param {Date} d1\n * @param {Date} d2\n * @returns {boolean}\n */\nfunction isSameMinute(d1, d2) {\n  return startOfMinute(d1).getTime() === startOfMinute(d2).getTime();\n}\n\n/**\n * Returns a cloned date with midnight time (00:00:00)\n *\n * @param {Date} date The date for which midnight time is required\n * @param {Date} dateToCompare the date to compare with\n * @returns {Date} A new datetime object representing the input date with midnight time\n */\nfunction getMidnightDate(date) {\n  if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(date)) {\n    throw new Error(\"Invalid date\");\n  }\n  var dateWithoutTime = new Date(date);\n  dateWithoutTime.setHours(0, 0, 0, 0);\n  return dateWithoutTime;\n}\n\n/**\n * Is the first date before the second one?\n *\n * @param {Date} date The date that should be before the other one to return true\n * @param {Date} dateToCompare The date to compare with\n * @returns {boolean} The first date is before the second date\n *\n * Note:\n *  This function considers the mid-night of the given dates for comparison.\n *  It evaluates whether date is before dateToCompare based on their mid-night timestamps.\n */\nfunction isDateBefore(date, dateToCompare) {\n  if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(date) || !(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(dateToCompare)) {\n    throw new Error(\"Invalid date received\");\n  }\n  var midnightDate = getMidnightDate(date);\n  var midnightDateToCompare = getMidnightDate(dateToCompare);\n  return (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(midnightDate, midnightDateToCompare);\n}\nfunction isSpaceKeyDown(event) {\n  var SPACE_KEY = \" \";\n  return event.key === SPACE_KEY;\n}\n\nfunction generateYears(year, noOfYear, minDate, maxDate) {\n  var list = [];\n  for (var i = 0; i < 2 * noOfYear + 1; i++) {\n    var newYear = year + noOfYear - i;\n    var isInRange = true;\n    if (minDate) {\n      isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate) <= newYear;\n    }\n    if (maxDate && isInRange) {\n      isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate) >= newYear;\n    }\n    if (isInRange) {\n      list.push(newYear);\n    }\n  }\n  return list;\n}\nvar YearDropdownOptions = /*#__PURE__*/function (_React$Component) {\n  function YearDropdownOptions(props) {\n    var _this;\n    _classCallCheck(this, YearDropdownOptions);\n    _this = _callSuper(this, YearDropdownOptions, [props]);\n    _defineProperty(_this, \"renderOptions\", function () {\n      var selectedYear = _this.props.year;\n      var options = _this.state.yearsList.map(function (year) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: selectedYear === year ? \"react-datepicker__year-option react-datepicker__year-option--selected_year\" : \"react-datepicker__year-option\",\n          key: year,\n          onClick: _this.onChange.bind(_this, year),\n          \"aria-selected\": selectedYear === year ? \"true\" : undefined\n        }, selectedYear === year ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n          className: \"react-datepicker__year-option--selected\"\n        }, \"\\u2713\") : \"\", year);\n      });\n      var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : null;\n      var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : null;\n      if (!maxYear || !_this.state.yearsList.find(function (year) {\n        return year === maxYear;\n      })) {\n        options.unshift( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__year-option\",\n          key: \"upcoming\",\n          onClick: _this.incrementYears\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n          className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming\"\n        })));\n      }\n      if (!minYear || !_this.state.yearsList.find(function (year) {\n        return year === minYear;\n      })) {\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__year-option\",\n          key: \"previous\",\n          onClick: _this.decrementYears\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n          className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous\"\n        })));\n      }\n      return options;\n    });\n    _defineProperty(_this, \"onChange\", function (year) {\n      _this.props.onChange(year);\n    });\n    _defineProperty(_this, \"handleClickOutside\", function () {\n      _this.props.onCancel();\n    });\n    _defineProperty(_this, \"shiftYears\", function (amount) {\n      var years = _this.state.yearsList.map(function (year) {\n        return year + amount;\n      });\n      _this.setState({\n        yearsList: years\n      });\n    });\n    _defineProperty(_this, \"incrementYears\", function () {\n      return _this.shiftYears(1);\n    });\n    _defineProperty(_this, \"decrementYears\", function () {\n      return _this.shiftYears(-1);\n    });\n    var yearDropdownItemNumber = props.yearDropdownItemNumber,\n      scrollableYearDropdown = props.scrollableYearDropdown;\n    var noOfYear = yearDropdownItemNumber || (scrollableYearDropdown ? 10 : 5);\n    _this.state = {\n      yearsList: generateYears(_this.props.year, noOfYear, _this.props.minDate, _this.props.maxDate)\n    };\n    _this.dropdownRef = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n    return _this;\n  }\n  _inherits(YearDropdownOptions, _React$Component);\n  return _createClass(YearDropdownOptions, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var dropdownCurrent = this.dropdownRef.current;\n      if (dropdownCurrent) {\n        // Get array from HTMLCollection\n        var dropdownCurrentChildren = dropdownCurrent.children ? Array.from(dropdownCurrent.children) : null;\n        var selectedYearOptionEl = dropdownCurrentChildren ? dropdownCurrentChildren.find(function (childEl) {\n          return childEl.ariaSelected;\n        }) : null;\n        dropdownCurrent.scrollTop = selectedYearOptionEl ? selectedYearOptionEl.offsetTop + (selectedYearOptionEl.clientHeight - dropdownCurrent.clientHeight) / 2 : (dropdownCurrent.scrollHeight - dropdownCurrent.clientHeight) / 2;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)({\n        \"react-datepicker__year-dropdown\": true,\n        \"react-datepicker__year-dropdown--scrollable\": this.props.scrollableYearDropdown\n      });\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: dropdownClass,\n        ref: this.dropdownRef\n      }, this.renderOptions());\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar WrappedYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(YearDropdownOptions);\nvar YearDropdown = /*#__PURE__*/function (_React$Component) {\n  function YearDropdown() {\n    var _this;\n    _classCallCheck(this, YearDropdown);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, YearDropdown, [].concat(args));\n    _defineProperty(_this, \"state\", {\n      dropdownVisible: false\n    });\n    _defineProperty(_this, \"renderSelectOptions\", function () {\n      var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : 1900;\n      var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : 2100;\n      var options = [];\n      for (var i = minYear; i <= maxYear; i++) {\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n          key: i,\n          value: i\n        }, i));\n      }\n      return options;\n    });\n    _defineProperty(_this, \"onSelectChange\", function (e) {\n      _this.onChange(e.target.value);\n    });\n    _defineProperty(_this, \"renderSelectMode\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n        value: _this.props.year,\n        className: \"react-datepicker__year-select\",\n        onChange: _this.onSelectChange\n      }, _this.renderSelectOptions());\n    });\n    _defineProperty(_this, \"renderReadView\", function (visible) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        key: \"read\",\n        style: {\n          visibility: visible ? \"visible\" : \"hidden\"\n        },\n        className: \"react-datepicker__year-read-view\",\n        onClick: function onClick(event) {\n          return _this.toggleDropdown(event);\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__year-read-view--down-arrow\"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__year-read-view--selected-year\"\n      }, _this.props.year));\n    });\n    _defineProperty(_this, \"renderDropdown\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedYearDropdownOptions, {\n        key: \"dropdown\",\n        year: _this.props.year,\n        onChange: _this.onChange,\n        onCancel: _this.toggleDropdown,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber\n      });\n    });\n    _defineProperty(_this, \"renderScrollMode\", function () {\n      var dropdownVisible = _this.state.dropdownVisible;\n      var result = [_this.renderReadView(!dropdownVisible)];\n      if (dropdownVisible) {\n        result.unshift(_this.renderDropdown());\n      }\n      return result;\n    });\n    _defineProperty(_this, \"onChange\", function (year) {\n      _this.toggleDropdown();\n      if (year === _this.props.year) return;\n      _this.props.onChange(year);\n    });\n    _defineProperty(_this, \"toggleDropdown\", function (event) {\n      _this.setState({\n        dropdownVisible: !_this.state.dropdownVisible\n      }, function () {\n        if (_this.props.adjustDateOnChange) {\n          _this.handleYearChange(_this.props.date, event);\n        }\n      });\n    });\n    _defineProperty(_this, \"handleYearChange\", function (date, event) {\n      _this.onSelect(date, event);\n      _this.setOpen();\n    });\n    _defineProperty(_this, \"onSelect\", function (date, event) {\n      if (_this.props.onSelect) {\n        _this.props.onSelect(date, event);\n      }\n    });\n    _defineProperty(_this, \"setOpen\", function () {\n      if (_this.props.setOpen) {\n        _this.props.setOpen(true);\n      }\n    });\n    return _this;\n  }\n  _inherits(YearDropdown, _React$Component);\n  return _createClass(YearDropdown, [{\n    key: \"render\",\n    value: function render() {\n      var renderedDropdown;\n      switch (this.props.dropdownMode) {\n        case \"scroll\":\n          renderedDropdown = this.renderScrollMode();\n          break;\n        case \"select\":\n          renderedDropdown = this.renderSelectMode();\n          break;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--\".concat(this.props.dropdownMode)\n      }, renderedDropdown);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar MonthDropdownOptions = /*#__PURE__*/function (_React$Component) {\n  function MonthDropdownOptions() {\n    var _this;\n    _classCallCheck(this, MonthDropdownOptions);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, MonthDropdownOptions, [].concat(args));\n    _defineProperty(_this, \"isSelectedMonth\", function (i) {\n      return _this.props.month === i;\n    });\n    _defineProperty(_this, \"renderOptions\", function () {\n      return _this.props.monthNames.map(function (month, i) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: _this.isSelectedMonth(i) ? \"react-datepicker__month-option react-datepicker__month-option--selected_month\" : \"react-datepicker__month-option\",\n          key: month,\n          onClick: _this.onChange.bind(_this, i),\n          \"aria-selected\": _this.isSelectedMonth(i) ? \"true\" : undefined\n        }, _this.isSelectedMonth(i) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n          className: \"react-datepicker__month-option--selected\"\n        }, \"\\u2713\") : \"\", month);\n      });\n    });\n    _defineProperty(_this, \"onChange\", function (month) {\n      return _this.props.onChange(month);\n    });\n    _defineProperty(_this, \"handleClickOutside\", function () {\n      return _this.props.onCancel();\n    });\n    return _this;\n  }\n  _inherits(MonthDropdownOptions, _React$Component);\n  return _createClass(MonthDropdownOptions, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__month-dropdown\"\n      }, this.renderOptions());\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar WrappedMonthDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthDropdownOptions);\nvar MonthDropdown = /*#__PURE__*/function (_React$Component) {\n  function MonthDropdown() {\n    var _this;\n    _classCallCheck(this, MonthDropdown);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, MonthDropdown, [].concat(args));\n    _defineProperty(_this, \"state\", {\n      dropdownVisible: false\n    });\n    _defineProperty(_this, \"renderSelectOptions\", function (monthNames) {\n      return monthNames.map(function (M, i) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n          key: i,\n          value: i\n        }, M);\n      });\n    });\n    _defineProperty(_this, \"renderSelectMode\", function (monthNames) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n        value: _this.props.month,\n        className: \"react-datepicker__month-select\",\n        onChange: function onChange(e) {\n          return _this.onChange(e.target.value);\n        }\n      }, _this.renderSelectOptions(monthNames));\n    });\n    _defineProperty(_this, \"renderReadView\", function (visible, monthNames) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        key: \"read\",\n        style: {\n          visibility: visible ? \"visible\" : \"hidden\"\n        },\n        className: \"react-datepicker__month-read-view\",\n        onClick: _this.toggleDropdown\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__month-read-view--down-arrow\"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__month-read-view--selected-month\"\n      }, monthNames[_this.props.month]));\n    });\n    _defineProperty(_this, \"renderDropdown\", function (monthNames) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedMonthDropdownOptions, {\n        key: \"dropdown\",\n        month: _this.props.month,\n        monthNames: monthNames,\n        onChange: _this.onChange,\n        onCancel: _this.toggleDropdown\n      });\n    });\n    _defineProperty(_this, \"renderScrollMode\", function (monthNames) {\n      var dropdownVisible = _this.state.dropdownVisible;\n      var result = [_this.renderReadView(!dropdownVisible, monthNames)];\n      if (dropdownVisible) {\n        result.unshift(_this.renderDropdown(monthNames));\n      }\n      return result;\n    });\n    _defineProperty(_this, \"onChange\", function (month) {\n      _this.toggleDropdown();\n      if (month !== _this.props.month) {\n        _this.props.onChange(month);\n      }\n    });\n    _defineProperty(_this, \"toggleDropdown\", function () {\n      return _this.setState({\n        dropdownVisible: !_this.state.dropdownVisible\n      });\n    });\n    return _this;\n  }\n  _inherits(MonthDropdown, _React$Component);\n  return _createClass(MonthDropdown, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var monthNames = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(this.props.useShortMonthInDropdown ? function (M) {\n        return getMonthShortInLocale(M, _this2.props.locale);\n      } : function (M) {\n        return getMonthInLocale(M, _this2.props.locale);\n      });\n      var renderedDropdown;\n      switch (this.props.dropdownMode) {\n        case \"scroll\":\n          renderedDropdown = this.renderScrollMode(monthNames);\n          break;\n        case \"select\":\n          renderedDropdown = this.renderSelectMode(monthNames);\n          break;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--\".concat(this.props.dropdownMode)\n      }, renderedDropdown);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nfunction generateMonthYears(minDate, maxDate) {\n  var list = [];\n  var currDate = getStartOfMonth(minDate);\n  var lastDate = getStartOfMonth(maxDate);\n  while (!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)) {\n    list.push(newDate(currDate));\n    currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(currDate, 1);\n  }\n  return list;\n}\nvar MonthYearDropdownOptions = /*#__PURE__*/function (_React$Component) {\n  function MonthYearDropdownOptions(props) {\n    var _this;\n    _classCallCheck(this, MonthYearDropdownOptions);\n    _this = _callSuper(this, MonthYearDropdownOptions, [props]);\n    _defineProperty(_this, \"renderOptions\", function () {\n      return _this.state.monthYearsList.map(function (monthYear) {\n        var monthYearPoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(monthYear);\n        var isSameMonthYear = isSameYear(_this.props.date, monthYear) && isSameMonth(_this.props.date, monthYear);\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: isSameMonthYear ? \"react-datepicker__month-year-option--selected_month-year\" : \"react-datepicker__month-year-option\",\n          key: monthYearPoint,\n          onClick: _this.onChange.bind(_this, monthYearPoint),\n          \"aria-selected\": isSameMonthYear ? \"true\" : undefined\n        }, isSameMonthYear ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n          className: \"react-datepicker__month-year-option--selected\"\n        }, \"\\u2713\") : \"\", formatDate(monthYear, _this.props.dateFormat, _this.props.locale));\n      });\n    });\n    _defineProperty(_this, \"onChange\", function (monthYear) {\n      return _this.props.onChange(monthYear);\n    });\n    _defineProperty(_this, \"handleClickOutside\", function () {\n      _this.props.onCancel();\n    });\n    _this.state = {\n      monthYearsList: generateMonthYears(_this.props.minDate, _this.props.maxDate)\n    };\n    return _this;\n  }\n  _inherits(MonthYearDropdownOptions, _React$Component);\n  return _createClass(MonthYearDropdownOptions, [{\n    key: \"render\",\n    value: function render() {\n      var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)({\n        \"react-datepicker__month-year-dropdown\": true,\n        \"react-datepicker__month-year-dropdown--scrollable\": this.props.scrollableMonthYearDropdown\n      });\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: dropdownClass\n      }, this.renderOptions());\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar WrappedMonthYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthYearDropdownOptions);\nvar MonthYearDropdown = /*#__PURE__*/function (_React$Component) {\n  function MonthYearDropdown() {\n    var _this;\n    _classCallCheck(this, MonthYearDropdown);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, MonthYearDropdown, [].concat(args));\n    _defineProperty(_this, \"state\", {\n      dropdownVisible: false\n    });\n    _defineProperty(_this, \"renderSelectOptions\", function () {\n      var currDate = getStartOfMonth(_this.props.minDate);\n      var lastDate = getStartOfMonth(_this.props.maxDate);\n      var options = [];\n      while (!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)) {\n        var timePoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(currDate);\n        options.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"option\", {\n          key: timePoint,\n          value: timePoint\n        }, formatDate(currDate, _this.props.dateFormat, _this.props.locale)));\n        currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(currDate, 1);\n      }\n      return options;\n    });\n    _defineProperty(_this, \"onSelectChange\", function (e) {\n      _this.onChange(e.target.value);\n    });\n    _defineProperty(_this, \"renderSelectMode\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"select\", {\n        value: (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_55__.getTime)(getStartOfMonth(_this.props.date)),\n        className: \"react-datepicker__month-year-select\",\n        onChange: _this.onSelectChange\n      }, _this.renderSelectOptions());\n    });\n    _defineProperty(_this, \"renderReadView\", function (visible) {\n      var yearMonth = formatDate(_this.props.date, _this.props.dateFormat, _this.props.locale);\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        key: \"read\",\n        style: {\n          visibility: visible ? \"visible\" : \"hidden\"\n        },\n        className: \"react-datepicker__month-year-read-view\",\n        onClick: function onClick(event) {\n          return _this.toggleDropdown(event);\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__month-year-read-view--down-arrow\"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"react-datepicker__month-year-read-view--selected-month-year\"\n      }, yearMonth));\n    });\n    _defineProperty(_this, \"renderDropdown\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedMonthYearDropdownOptions, {\n        key: \"dropdown\",\n        date: _this.props.date,\n        dateFormat: _this.props.dateFormat,\n        onChange: _this.onChange,\n        onCancel: _this.toggleDropdown,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown,\n        locale: _this.props.locale\n      });\n    });\n    _defineProperty(_this, \"renderScrollMode\", function () {\n      var dropdownVisible = _this.state.dropdownVisible;\n      var result = [_this.renderReadView(!dropdownVisible)];\n      if (dropdownVisible) {\n        result.unshift(_this.renderDropdown());\n      }\n      return result;\n    });\n    _defineProperty(_this, \"onChange\", function (monthYearPoint) {\n      _this.toggleDropdown();\n      var changedDate = newDate(parseInt(monthYearPoint));\n      if (isSameYear(_this.props.date, changedDate) && isSameMonth(_this.props.date, changedDate)) {\n        return;\n      }\n      _this.props.onChange(changedDate);\n    });\n    _defineProperty(_this, \"toggleDropdown\", function () {\n      return _this.setState({\n        dropdownVisible: !_this.state.dropdownVisible\n      });\n    });\n    return _this;\n  }\n  _inherits(MonthYearDropdown, _React$Component);\n  return _createClass(MonthYearDropdown, [{\n    key: \"render\",\n    value: function render() {\n      var renderedDropdown;\n      switch (this.props.dropdownMode) {\n        case \"scroll\":\n          renderedDropdown = this.renderScrollMode();\n          break;\n        case \"select\":\n          renderedDropdown = this.renderSelectMode();\n          break;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--\".concat(this.props.dropdownMode)\n      }, renderedDropdown);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar Day = /*#__PURE__*/function (_React$Component) {\n  function Day() {\n    var _this;\n    _classCallCheck(this, Day);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Day, [].concat(args));\n    _defineProperty(_this, \"dayEl\", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef());\n    _defineProperty(_this, \"handleClick\", function (event) {\n      if (!_this.isDisabled() && _this.props.onClick) {\n        _this.props.onClick(event);\n      }\n    });\n    _defineProperty(_this, \"handleMouseEnter\", function (event) {\n      if (!_this.isDisabled() && _this.props.onMouseEnter) {\n        _this.props.onMouseEnter(event);\n      }\n    });\n    _defineProperty(_this, \"handleOnKeyDown\", function (event) {\n      var eventKey = event.key;\n      if (eventKey === \" \") {\n        event.preventDefault();\n        event.key = \"Enter\";\n      }\n      _this.props.handleOnKeyDown(event);\n    });\n    _defineProperty(_this, \"isSameDay\", function (other) {\n      return isSameDay(_this.props.day, other);\n    });\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\n      var _this$props$selectedD;\n      if (_this.props.disabledKeyboardNavigation) {\n        return false;\n      }\n      var isSelectedDate = _this.props.selectsMultiple ? (_this$props$selectedD = _this.props.selectedDates) === null || _this$props$selectedD === void 0 ? void 0 : _this$props$selectedD.some(function (date) {\n        return _this.isSameDayOrWeek(date);\n      }) : _this.isSameDayOrWeek(_this.props.selected);\n      return !isSelectedDate && _this.isSameDayOrWeek(_this.props.preSelection);\n    });\n    _defineProperty(_this, \"isDisabled\", function () {\n      return isDayDisabled(_this.props.day, _this.props);\n    });\n    _defineProperty(_this, \"isExcluded\", function () {\n      return isDayExcluded(_this.props.day, _this.props);\n    });\n    _defineProperty(_this, \"isStartOfWeek\", function () {\n      return isSameDay(_this.props.day, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n    });\n    _defineProperty(_this, \"isSameWeek\", function (other) {\n      return _this.props.showWeekPicker && isSameDay(other, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n    });\n    _defineProperty(_this, \"isSameDayOrWeek\", function (other) {\n      return _this.isSameDay(other) || _this.isSameWeek(other);\n    });\n    _defineProperty(_this, \"getHighLightedClass\", function () {\n      var _this$props = _this.props,\n        day = _this$props.day,\n        highlightDates = _this$props.highlightDates;\n      if (!highlightDates) {\n        return false;\n      }\n\n      // Looking for className in the Map of {'day string, 'className'}\n      var dayStr = formatDate(day, \"MM.dd.yyyy\");\n      return highlightDates.get(dayStr);\n    });\n    // Function to return the array containing classname associated to the date\n    _defineProperty(_this, \"getHolidaysClass\", function () {\n      var _this$props2 = _this.props,\n        day = _this$props2.day,\n        holidays = _this$props2.holidays;\n      if (!holidays) {\n        return false;\n      }\n      var dayStr = formatDate(day, \"MM.dd.yyyy\");\n      // Looking for className in the Map of {day string: {className, holidayName}}\n      if (holidays.has(dayStr)) {\n        return [holidays.get(dayStr).className];\n      }\n    });\n    _defineProperty(_this, \"isInRange\", function () {\n      var _this$props3 = _this.props,\n        day = _this$props3.day,\n        startDate = _this$props3.startDate,\n        endDate = _this$props3.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isDayInRange(day, startDate, endDate);\n    });\n    _defineProperty(_this, \"isInSelectingRange\", function () {\n      var _this$props$selecting;\n      var _this$props4 = _this.props,\n        day = _this$props4.day,\n        selectsStart = _this$props4.selectsStart,\n        selectsEnd = _this$props4.selectsEnd,\n        selectsRange = _this$props4.selectsRange,\n        selectsDisabledDaysInRange = _this$props4.selectsDisabledDaysInRange,\n        startDate = _this$props4.startDate,\n        endDate = _this$props4.endDate;\n      var selectingDate = (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate || !selectsDisabledDaysInRange && _this.isDisabled()) {\n        return false;\n      }\n      if (selectsStart && endDate && ((0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(selectingDate, endDate) || isEqual(selectingDate, endDate))) {\n        return isDayInRange(day, selectingDate, endDate);\n      }\n      if (selectsEnd && startDate && ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n        return isDayInRange(day, startDate, selectingDate);\n      }\n      if (selectsRange && startDate && !endDate && ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n        return isDayInRange(day, startDate, selectingDate);\n      }\n      return false;\n    });\n    _defineProperty(_this, \"isSelectingRangeStart\", function () {\n      var _this$props$selecting2;\n      if (!_this.isInSelectingRange()) {\n        return false;\n      }\n      var _this$props5 = _this.props,\n        day = _this$props5.day,\n        startDate = _this$props5.startDate,\n        selectsStart = _this$props5.selectsStart;\n      var selectingDate = (_this$props$selecting2 = _this.props.selectingDate) !== null && _this$props$selecting2 !== void 0 ? _this$props$selecting2 : _this.props.preSelection;\n      if (selectsStart) {\n        return isSameDay(day, selectingDate);\n      } else {\n        return isSameDay(day, startDate);\n      }\n    });\n    _defineProperty(_this, \"isSelectingRangeEnd\", function () {\n      var _this$props$selecting3;\n      if (!_this.isInSelectingRange()) {\n        return false;\n      }\n      var _this$props6 = _this.props,\n        day = _this$props6.day,\n        endDate = _this$props6.endDate,\n        selectsEnd = _this$props6.selectsEnd,\n        selectsRange = _this$props6.selectsRange;\n      var selectingDate = (_this$props$selecting3 = _this.props.selectingDate) !== null && _this$props$selecting3 !== void 0 ? _this$props$selecting3 : _this.props.preSelection;\n      if (selectsEnd || selectsRange) {\n        return isSameDay(day, selectingDate);\n      } else {\n        return isSameDay(day, endDate);\n      }\n    });\n    _defineProperty(_this, \"isRangeStart\", function () {\n      var _this$props7 = _this.props,\n        day = _this$props7.day,\n        startDate = _this$props7.startDate,\n        endDate = _this$props7.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameDay(startDate, day);\n    });\n    _defineProperty(_this, \"isRangeEnd\", function () {\n      var _this$props8 = _this.props,\n        day = _this$props8.day,\n        startDate = _this$props8.startDate,\n        endDate = _this$props8.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameDay(endDate, day);\n    });\n    _defineProperty(_this, \"isWeekend\", function () {\n      var weekday = (0,date_fns_getDay__WEBPACK_IMPORTED_MODULE_56__.getDay)(_this.props.day);\n      return weekday === 0 || weekday === 6;\n    });\n    _defineProperty(_this, \"isAfterMonth\", function () {\n      return _this.props.month !== undefined && (_this.props.month + 1) % 12 === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day);\n    });\n    _defineProperty(_this, \"isBeforeMonth\", function () {\n      return _this.props.month !== undefined && ((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day) + 1) % 12 === _this.props.month;\n    });\n    _defineProperty(_this, \"isCurrentDay\", function () {\n      return _this.isSameDay(newDate());\n    });\n    _defineProperty(_this, \"isSelected\", function () {\n      if (_this.props.selectsMultiple) {\n        var _this$props$selectedD2;\n        return (_this$props$selectedD2 = _this.props.selectedDates) === null || _this$props$selectedD2 === void 0 ? void 0 : _this$props$selectedD2.some(function (date) {\n          return _this.isSameDayOrWeek(date);\n        });\n      }\n      return _this.isSameDayOrWeek(_this.props.selected);\n    });\n    _defineProperty(_this, \"getClassNames\", function (date) {\n      var dayClassName = _this.props.dayClassName ? _this.props.dayClassName(date) : undefined;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__day\", dayClassName, \"react-datepicker__day--\" + getDayOfWeekCode(_this.props.day), {\n        \"react-datepicker__day--disabled\": _this.isDisabled(),\n        \"react-datepicker__day--excluded\": _this.isExcluded(),\n        \"react-datepicker__day--selected\": _this.isSelected(),\n        \"react-datepicker__day--keyboard-selected\": _this.isKeyboardSelected(),\n        \"react-datepicker__day--range-start\": _this.isRangeStart(),\n        \"react-datepicker__day--range-end\": _this.isRangeEnd(),\n        \"react-datepicker__day--in-range\": _this.isInRange(),\n        \"react-datepicker__day--in-selecting-range\": _this.isInSelectingRange(),\n        \"react-datepicker__day--selecting-range-start\": _this.isSelectingRangeStart(),\n        \"react-datepicker__day--selecting-range-end\": _this.isSelectingRangeEnd(),\n        \"react-datepicker__day--today\": _this.isCurrentDay(),\n        \"react-datepicker__day--weekend\": _this.isWeekend(),\n        \"react-datepicker__day--outside-month\": _this.isAfterMonth() || _this.isBeforeMonth()\n      }, _this.getHighLightedClass(\"react-datepicker__day--highlighted\"), _this.getHolidaysClass());\n    });\n    _defineProperty(_this, \"getAriaLabel\", function () {\n      var _this$props9 = _this.props,\n        day = _this$props9.day,\n        _this$props9$ariaLabe = _this$props9.ariaLabelPrefixWhenEnabled,\n        ariaLabelPrefixWhenEnabled = _this$props9$ariaLabe === void 0 ? \"Choose\" : _this$props9$ariaLabe,\n        _this$props9$ariaLabe2 = _this$props9.ariaLabelPrefixWhenDisabled,\n        ariaLabelPrefixWhenDisabled = _this$props9$ariaLabe2 === void 0 ? \"Not available\" : _this$props9$ariaLabe2;\n      var prefix = _this.isDisabled() || _this.isExcluded() ? ariaLabelPrefixWhenDisabled : ariaLabelPrefixWhenEnabled;\n      return \"\".concat(prefix, \" \").concat(formatDate(day, \"PPPP\", _this.props.locale));\n    });\n    // A function to return the holiday's name as title's content\n    _defineProperty(_this, \"getTitle\", function () {\n      var _this$props10 = _this.props,\n        day = _this$props10.day,\n        _this$props10$holiday = _this$props10.holidays,\n        holidays = _this$props10$holiday === void 0 ? new Map() : _this$props10$holiday,\n        excludeDates = _this$props10.excludeDates;\n      var compareDt = formatDate(day, \"MM.dd.yyyy\");\n      var titles = [];\n      if (holidays.has(compareDt)) {\n        titles.push.apply(titles, _toConsumableArray(holidays.get(compareDt).holidayNames));\n      }\n      if (_this.isExcluded()) {\n        titles.push(excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.filter(function (excludeDate) {\n          return isSameDay(excludeDate.date ? excludeDate.date : excludeDate, day);\n        }).map(function (excludeDate) {\n          return excludeDate.message;\n        }));\n      }\n      return titles.join(\", \");\n    });\n    _defineProperty(_this, \"getTabIndex\", function (selected, preSelection) {\n      var selectedDay = selected || _this.props.selected;\n      var preSelectionDay = preSelection || _this.props.preSelection;\n      var tabIndex = !(_this.props.showWeekPicker && (_this.props.showWeekNumber || !_this.isStartOfWeek())) && (_this.isKeyboardSelected() || _this.isSameDay(selectedDay) && isSameDay(preSelectionDay, selectedDay)) ? 0 : -1;\n      return tabIndex;\n    });\n    // various cases when we need to apply focus to the preselected day\n    // focus the day on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n    // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n    _defineProperty(_this, \"handleFocusDay\", function () {\n      var _this$dayEl$current;\n      var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var shouldFocusDay = false;\n      // only do this while the input isn't focused\n      // otherwise, typing/backspacing the date manually may steal focus away from the input\n      if (_this.getTabIndex() === 0 && !prevProps.isInputFocused && _this.isSameDay(_this.props.preSelection)) {\n        // there is currently no activeElement and not inline\n        if (!document.activeElement || document.activeElement === document.body) {\n          shouldFocusDay = true;\n        }\n        // inline version:\n        // do not focus on initial render to prevent autoFocus issue\n        // focus after month has changed via keyboard\n        if (_this.props.inline && !_this.props.shouldFocusDayInline) {\n          shouldFocusDay = false;\n        }\n        // the activeElement is in the container, and it is another instance of Day\n        if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains(\"react-datepicker__day\")) {\n          shouldFocusDay = true;\n        }\n        //day is one of the non rendered duplicate days\n        if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) {\n          shouldFocusDay = false;\n        }\n        if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) {\n          shouldFocusDay = false;\n        }\n      }\n      shouldFocusDay && ((_this$dayEl$current = _this.dayEl.current) === null || _this$dayEl$current === void 0 ? void 0 : _this$dayEl$current.focus({\n        preventScroll: true\n      }));\n    });\n    _defineProperty(_this, \"renderDayContents\", function () {\n      if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth()) return null;\n      if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth()) return null;\n      return _this.props.renderDayContents ? _this.props.renderDayContents((0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__.getDate)(_this.props.day), _this.props.day) : (0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_57__.getDate)(_this.props.day);\n    });\n    _defineProperty(_this, \"render\", function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: _this.dayEl,\n        className: _this.getClassNames(_this.props.day),\n        onKeyDown: _this.handleOnKeyDown,\n        onClick: _this.handleClick,\n        onMouseEnter: !_this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\n        onPointerEnter: _this.props.usePointerEvent ? _this.handleMouseEnter : undefined,\n        tabIndex: _this.getTabIndex(),\n        \"aria-label\": _this.getAriaLabel(),\n        role: \"option\",\n        title: _this.getTitle(),\n        \"aria-disabled\": _this.isDisabled(),\n        \"aria-current\": _this.isCurrentDay() ? \"date\" : undefined,\n        \"aria-selected\": _this.isSelected() || _this.isInRange()\n      }, _this.renderDayContents(), _this.getTitle() !== \"\" && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"overlay\"\n      }, _this.getTitle()));\n    });\n    return _this;\n  }\n  _inherits(Day, _React$Component);\n  return _createClass(Day, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleFocusDay();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.handleFocusDay(prevProps);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar WeekNumber = /*#__PURE__*/function (_React$Component) {\n  function WeekNumber() {\n    var _this;\n    _classCallCheck(this, WeekNumber);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, WeekNumber, [].concat(args));\n    _defineProperty(_this, \"weekNumberEl\", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef());\n    _defineProperty(_this, \"handleClick\", function (event) {\n      if (_this.props.onClick) {\n        _this.props.onClick(event);\n      }\n    });\n    _defineProperty(_this, \"handleOnKeyDown\", function (event) {\n      var eventKey = event.key;\n      if (eventKey === \" \") {\n        event.preventDefault();\n        event.key = \"Enter\";\n      }\n      _this.props.handleOnKeyDown(event);\n    });\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\n      return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.date, _this.props.preSelection);\n    });\n    _defineProperty(_this, \"getTabIndex\", function () {\n      return _this.props.showWeekPicker && _this.props.showWeekNumber && (_this.isKeyboardSelected() || isSameDay(_this.props.date, _this.props.selected) && isSameDay(_this.props.preSelection, _this.props.selected)) ? 0 : -1;\n    });\n    // various cases when we need to apply focus to the preselected week-number\n    // focus the week-number on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n    // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n    _defineProperty(_this, \"handleFocusWeekNumber\", function () {\n      var prevProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var shouldFocusWeekNumber = false;\n      // only do this while the input isn't focused\n      // otherwise, typing/backspacing the date manually may steal focus away from the input\n      if (_this.getTabIndex() === 0 && !prevProps.isInputFocused && isSameDay(_this.props.date, _this.props.preSelection)) {\n        // there is currently no activeElement and not inline\n        if (!document.activeElement || document.activeElement === document.body) {\n          shouldFocusWeekNumber = true;\n        }\n        // inline version:\n        // do not focus on initial render to prevent autoFocus issue\n        // focus after month has changed via keyboard\n        if (_this.props.inline && !_this.props.shouldFocusDayInline) {\n          shouldFocusWeekNumber = false;\n        }\n        // the activeElement is in the container, and it is another instance of WeekNumber\n        if (_this.props.containerRef && _this.props.containerRef.current && _this.props.containerRef.current.contains(document.activeElement) && document.activeElement && document.activeElement.classList.contains(\"react-datepicker__week-number\")) {\n          shouldFocusWeekNumber = true;\n        }\n      }\n      shouldFocusWeekNumber && _this.weekNumberEl.current && _this.weekNumberEl.current.focus({\n        preventScroll: true\n      });\n    });\n    return _this;\n  }\n  _inherits(WeekNumber, _React$Component);\n  return _createClass(WeekNumber, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleFocusWeekNumber();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.handleFocusWeekNumber(prevProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        weekNumber = _this$props.weekNumber,\n        _this$props$ariaLabel = _this$props.ariaLabelPrefix,\n        ariaLabelPrefix = _this$props$ariaLabel === void 0 ? \"week \" : _this$props$ariaLabel,\n        onClick = _this$props.onClick;\n      var weekNumberClasses = {\n        \"react-datepicker__week-number\": true,\n        \"react-datepicker__week-number--clickable\": !!onClick,\n        \"react-datepicker__week-number--selected\": !!onClick && isSameDay(this.props.date, this.props.selected),\n        \"react-datepicker__week-number--keyboard-selected\": this.isKeyboardSelected()\n      };\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: this.weekNumberEl,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(weekNumberClasses),\n        \"aria-label\": \"\".concat(ariaLabelPrefix, \" \").concat(this.props.weekNumber),\n        onClick: this.handleClick,\n        onKeyDown: this.handleOnKeyDown,\n        tabIndex: this.getTabIndex()\n      }, weekNumber);\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        ariaLabelPrefix: \"week \"\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar Week = /*#__PURE__*/function (_React$Component) {\n  function Week() {\n    var _this;\n    _classCallCheck(this, Week);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Week, [].concat(args));\n    _defineProperty(_this, \"handleDayClick\", function (day, event) {\n      if (_this.props.onDayClick) {\n        _this.props.onDayClick(day, event);\n      }\n    });\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\n      if (_this.props.onDayMouseEnter) {\n        _this.props.onDayMouseEnter(day);\n      }\n    });\n    _defineProperty(_this, \"handleWeekClick\", function (day, weekNumber, event) {\n      if (typeof _this.props.onWeekSelect === \"function\") {\n        _this.props.onWeekSelect(day, weekNumber, event);\n      }\n      if (_this.props.showWeekPicker) {\n        _this.handleDayClick(day, event);\n      }\n      if (_this.props.shouldCloseOnSelect) {\n        _this.props.setOpen(false);\n      }\n    });\n    _defineProperty(_this, \"formatWeekNumber\", function (date) {\n      if (_this.props.formatWeekNumber) {\n        return _this.props.formatWeekNumber(date);\n      }\n      return getWeek(date);\n    });\n    _defineProperty(_this, \"renderDays\", function () {\n      var startOfWeek = _this.startOfWeek();\n      var days = [];\n      var weekNumber = _this.formatWeekNumber(startOfWeek);\n      if (_this.props.showWeekNumber) {\n        var onClickAction = _this.props.onWeekSelect || _this.props.showWeekPicker ? _this.handleWeekClick.bind(_this, startOfWeek, weekNumber) : undefined;\n        days.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WeekNumber, {\n          key: \"W\",\n          weekNumber: weekNumber,\n          date: startOfWeek,\n          onClick: onClickAction,\n          selected: _this.props.selected,\n          preSelection: _this.props.preSelection,\n          ariaLabelPrefix: _this.props.ariaLabelPrefix,\n          showWeekPicker: _this.props.showWeekPicker,\n          showWeekNumber: _this.props.showWeekNumber,\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n          handleOnKeyDown: _this.props.handleOnKeyDown,\n          isInputFocused: _this.props.isInputFocused,\n          containerRef: _this.props.containerRef\n        }));\n      }\n      return days.concat([0, 1, 2, 3, 4, 5, 6].map(function (offset) {\n        var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, offset);\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Day, {\n          ariaLabelPrefixWhenEnabled: _this.props.chooseDayAriaLabelPrefix,\n          ariaLabelPrefixWhenDisabled: _this.props.disabledDayAriaLabelPrefix,\n          key: day.valueOf(),\n          day: day,\n          month: _this.props.month,\n          onClick: _this.handleDayClick.bind(_this, day),\n          usePointerEvent: _this.props.usePointerEvent,\n          onMouseEnter: _this.handleDayMouseEnter.bind(_this, day),\n          minDate: _this.props.minDate,\n          maxDate: _this.props.maxDate,\n          calendarStartDay: _this.props.calendarStartDay,\n          excludeDates: _this.props.excludeDates,\n          excludeDateIntervals: _this.props.excludeDateIntervals,\n          includeDates: _this.props.includeDates,\n          includeDateIntervals: _this.props.includeDateIntervals,\n          highlightDates: _this.props.highlightDates,\n          holidays: _this.props.holidays,\n          selectingDate: _this.props.selectingDate,\n          filterDate: _this.props.filterDate,\n          preSelection: _this.props.preSelection,\n          selected: _this.props.selected,\n          selectsStart: _this.props.selectsStart,\n          selectsEnd: _this.props.selectsEnd,\n          selectsRange: _this.props.selectsRange,\n          showWeekPicker: _this.props.showWeekPicker,\n          showWeekNumber: _this.props.showWeekNumber,\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n          selectsMultiple: _this.props.selectsMultiple,\n          selectedDates: _this.props.selectedDates,\n          startDate: _this.props.startDate,\n          endDate: _this.props.endDate,\n          dayClassName: _this.props.dayClassName,\n          renderDayContents: _this.props.renderDayContents,\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n          handleOnKeyDown: _this.props.handleOnKeyDown,\n          isInputFocused: _this.props.isInputFocused,\n          containerRef: _this.props.containerRef,\n          inline: _this.props.inline,\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\n          monthShowsDuplicateDaysEnd: _this.props.monthShowsDuplicateDaysEnd,\n          monthShowsDuplicateDaysStart: _this.props.monthShowsDuplicateDaysStart,\n          locale: _this.props.locale\n        });\n      }));\n    });\n    _defineProperty(_this, \"startOfWeek\", function () {\n      return getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay);\n    });\n    _defineProperty(_this, \"isKeyboardSelected\", function () {\n      return !_this.props.disabledKeyboardNavigation && !isSameDay(_this.startOfWeek(), _this.props.selected) && isSameDay(_this.startOfWeek(), _this.props.preSelection);\n    });\n    return _this;\n  }\n  _inherits(Week, _React$Component);\n  return _createClass(Week, [{\n    key: \"render\",\n    value: function render() {\n      var weekNumberClasses = {\n        \"react-datepicker__week\": true,\n        \"react-datepicker__week--selected\": isSameDay(this.startOfWeek(), this.props.selected),\n        \"react-datepicker__week--keyboard-selected\": this.isKeyboardSelected()\n      };\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(weekNumberClasses)\n      }, this.renderDays());\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        shouldCloseOnSelect: true\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar FIXED_HEIGHT_STANDARD_WEEK_COUNT = 6;\nvar MONTH_COLUMNS_LAYOUT = {\n  TWO_COLUMNS: \"two_columns\",\n  THREE_COLUMNS: \"three_columns\",\n  FOUR_COLUMNS: \"four_columns\"\n};\nvar MONTH_COLUMNS = _defineProperty(_defineProperty(_defineProperty({}, MONTH_COLUMNS_LAYOUT.TWO_COLUMNS, {\n  grid: [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]],\n  verticalNavigationOffset: 2\n}), MONTH_COLUMNS_LAYOUT.THREE_COLUMNS, {\n  grid: [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]],\n  verticalNavigationOffset: 3\n}), MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS, {\n  grid: [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],\n  verticalNavigationOffset: 4\n});\nvar MONTH_NAVIGATION_HORIZONTAL_OFFSET = 1;\nfunction getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker) {\n  if (showFourColumnMonthYearPicker) return MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS;\n  if (showTwoColumnMonthYearPicker) return MONTH_COLUMNS_LAYOUT.TWO_COLUMNS;\n  return MONTH_COLUMNS_LAYOUT.THREE_COLUMNS;\n}\nvar Month = /*#__PURE__*/function (_React$Component) {\n  function Month() {\n    var _this;\n    _classCallCheck(this, Month);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Month, [].concat(args));\n    _defineProperty(_this, \"MONTH_REFS\", _toConsumableArray(Array(12)).map(function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    }));\n    _defineProperty(_this, \"QUARTER_REFS\", _toConsumableArray(Array(4)).map(function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    }));\n    _defineProperty(_this, \"isDisabled\", function (date) {\n      return isDayDisabled(date, _this.props);\n    });\n    _defineProperty(_this, \"isExcluded\", function (date) {\n      return isDayExcluded(date, _this.props);\n    });\n    _defineProperty(_this, \"handleDayClick\", function (day, event) {\n      if (_this.props.onDayClick) {\n        _this.props.onDayClick(day, event, _this.props.orderInDisplay);\n      }\n    });\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\n      if (_this.props.onDayMouseEnter) {\n        _this.props.onDayMouseEnter(day);\n      }\n    });\n    _defineProperty(_this, \"handleMouseLeave\", function () {\n      if (_this.props.onMouseLeave) {\n        _this.props.onMouseLeave();\n      }\n    });\n    _defineProperty(_this, \"isRangeStartMonth\", function (m) {\n      var _this$props = _this.props,\n        day = _this$props.day,\n        startDate = _this$props.startDate,\n        endDate = _this$props.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), startDate);\n    });\n    _defineProperty(_this, \"isRangeStartQuarter\", function (q) {\n      var _this$props2 = _this.props,\n        day = _this$props2.day,\n        startDate = _this$props2.startDate,\n        endDate = _this$props2.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), startDate);\n    });\n    _defineProperty(_this, \"isRangeEndMonth\", function (m) {\n      var _this$props3 = _this.props,\n        day = _this$props3.day,\n        startDate = _this$props3.startDate,\n        endDate = _this$props3.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), endDate);\n    });\n    _defineProperty(_this, \"isRangeEndQuarter\", function (q) {\n      var _this$props4 = _this.props,\n        day = _this$props4.day,\n        startDate = _this$props4.startDate,\n        endDate = _this$props4.endDate;\n      if (!startDate || !endDate) {\n        return false;\n      }\n      return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), endDate);\n    });\n    _defineProperty(_this, \"isInSelectingRangeMonth\", function (m) {\n      var _this$props$selecting;\n      var _this$props5 = _this.props,\n        day = _this$props5.day,\n        selectsStart = _this$props5.selectsStart,\n        selectsEnd = _this$props5.selectsEnd,\n        selectsRange = _this$props5.selectsRange,\n        startDate = _this$props5.startDate,\n        endDate = _this$props5.endDate;\n      var selectingDate = (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n        return false;\n      }\n      if (selectsStart && endDate) {\n        return isMonthInRange(selectingDate, endDate, m, day);\n      }\n      if (selectsEnd && startDate) {\n        return isMonthInRange(startDate, selectingDate, m, day);\n      }\n      if (selectsRange && startDate && !endDate) {\n        return isMonthInRange(startDate, selectingDate, m, day);\n      }\n      return false;\n    });\n    _defineProperty(_this, \"isSelectingMonthRangeStart\", function (m) {\n      var _this$props$selecting2;\n      if (!_this.isInSelectingRangeMonth(m)) {\n        return false;\n      }\n      var _this$props6 = _this.props,\n        day = _this$props6.day,\n        startDate = _this$props6.startDate,\n        selectsStart = _this$props6.selectsStart;\n      var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n      var selectingDate = (_this$props$selecting2 = _this.props.selectingDate) !== null && _this$props$selecting2 !== void 0 ? _this$props$selecting2 : _this.props.preSelection;\n      if (selectsStart) {\n        return isSameMonth(_month, selectingDate);\n      } else {\n        return isSameMonth(_month, startDate);\n      }\n    });\n    _defineProperty(_this, \"isSelectingMonthRangeEnd\", function (m) {\n      var _this$props$selecting3;\n      if (!_this.isInSelectingRangeMonth(m)) {\n        return false;\n      }\n      var _this$props7 = _this.props,\n        day = _this$props7.day,\n        endDate = _this$props7.endDate,\n        selectsEnd = _this$props7.selectsEnd,\n        selectsRange = _this$props7.selectsRange;\n      var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n      var selectingDate = (_this$props$selecting3 = _this.props.selectingDate) !== null && _this$props$selecting3 !== void 0 ? _this$props$selecting3 : _this.props.preSelection;\n      if (selectsEnd || selectsRange) {\n        return isSameMonth(_month, selectingDate);\n      } else {\n        return isSameMonth(_month, endDate);\n      }\n    });\n    _defineProperty(_this, \"isInSelectingRangeQuarter\", function (q) {\n      var _this$props$selecting4;\n      var _this$props8 = _this.props,\n        day = _this$props8.day,\n        selectsStart = _this$props8.selectsStart,\n        selectsEnd = _this$props8.selectsEnd,\n        selectsRange = _this$props8.selectsRange,\n        startDate = _this$props8.startDate,\n        endDate = _this$props8.endDate;\n      var selectingDate = (_this$props$selecting4 = _this.props.selectingDate) !== null && _this$props$selecting4 !== void 0 ? _this$props$selecting4 : _this.props.preSelection;\n      if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n        return false;\n      }\n      if (selectsStart && endDate) {\n        return isQuarterInRange(selectingDate, endDate, q, day);\n      }\n      if (selectsEnd && startDate) {\n        return isQuarterInRange(startDate, selectingDate, q, day);\n      }\n      if (selectsRange && startDate && !endDate) {\n        return isQuarterInRange(startDate, selectingDate, q, day);\n      }\n      return false;\n    });\n    _defineProperty(_this, \"isWeekInMonth\", function (startOfWeek) {\n      var day = _this.props.day;\n      var endOfWeek = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, 6);\n      return isSameMonth(startOfWeek, day) || isSameMonth(endOfWeek, day);\n    });\n    _defineProperty(_this, \"isCurrentMonth\", function (day, m) {\n      return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && m === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newDate());\n    });\n    _defineProperty(_this, \"isCurrentQuarter\", function (day, q) {\n      return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && q === (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(newDate());\n    });\n    _defineProperty(_this, \"isSelectedMonth\", function (day, m, selected) {\n      return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(selected) === m && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\n    });\n    _defineProperty(_this, \"isSelectedQuarter\", function (day, q, selected) {\n      return (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(day) === q && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\n    });\n    _defineProperty(_this, \"renderWeeks\", function () {\n      var weeks = [];\n      var isFixedHeight = _this.props.fixedHeight;\n      var i = 0;\n      var breakAfterNextPush = false;\n      var currentWeekStart = getStartOfWeek(getStartOfMonth(_this.props.day), _this.props.locale, _this.props.calendarStartDay);\n      var selected = _this.props.showWeekPicker ? getStartOfWeek(_this.props.selected, _this.props.locale, _this.props.calendarStartDay) : _this.props.selected;\n      var preSelection = _this.props.showWeekPicker ? getStartOfWeek(_this.props.preSelection, _this.props.locale, _this.props.calendarStartDay) : _this.props.preSelection;\n      while (true) {\n        weeks.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Week, {\n          ariaLabelPrefix: _this.props.weekAriaLabelPrefix,\n          chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n          disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n          key: i,\n          day: currentWeekStart,\n          month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day),\n          onDayClick: _this.handleDayClick,\n          usePointerEvent: _this.props.usePointerEvent,\n          onDayMouseEnter: _this.handleDayMouseEnter,\n          onWeekSelect: _this.props.onWeekSelect,\n          formatWeekNumber: _this.props.formatWeekNumber,\n          locale: _this.props.locale,\n          minDate: _this.props.minDate,\n          maxDate: _this.props.maxDate,\n          excludeDates: _this.props.excludeDates,\n          excludeDateIntervals: _this.props.excludeDateIntervals,\n          includeDates: _this.props.includeDates,\n          includeDateIntervals: _this.props.includeDateIntervals,\n          inline: _this.props.inline,\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\n          highlightDates: _this.props.highlightDates,\n          holidays: _this.props.holidays,\n          selectingDate: _this.props.selectingDate,\n          filterDate: _this.props.filterDate,\n          preSelection: preSelection,\n          selected: selected,\n          selectsStart: _this.props.selectsStart,\n          selectsEnd: _this.props.selectsEnd,\n          selectsRange: _this.props.selectsRange,\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n          selectsMultiple: _this.props.selectsMultiple,\n          selectedDates: _this.props.selectedDates,\n          showWeekNumber: _this.props.showWeekNumbers,\n          showWeekPicker: _this.props.showWeekPicker,\n          startDate: _this.props.startDate,\n          endDate: _this.props.endDate,\n          dayClassName: _this.props.dayClassName,\n          setOpen: _this.props.setOpen,\n          shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n          renderDayContents: _this.props.renderDayContents,\n          handleOnKeyDown: _this.props.handleOnKeyDown,\n          isInputFocused: _this.props.isInputFocused,\n          containerRef: _this.props.containerRef,\n          calendarStartDay: _this.props.calendarStartDay,\n          monthShowsDuplicateDaysEnd: _this.props.monthShowsDuplicateDaysEnd,\n          monthShowsDuplicateDaysStart: _this.props.monthShowsDuplicateDaysStart\n        }));\n        if (breakAfterNextPush) break;\n        i++;\n        currentWeekStart = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(currentWeekStart, 1);\n\n        // If one of these conditions is true, we will either break on this week\n        // or break on the next week\n        var isFixedAndFinalWeek = isFixedHeight && i >= FIXED_HEIGHT_STANDARD_WEEK_COUNT;\n        var isNonFixedAndOutOfMonth = !isFixedHeight && !_this.isWeekInMonth(currentWeekStart);\n        if (isFixedAndFinalWeek || isNonFixedAndOutOfMonth) {\n          if (_this.props.peekNextMonth) {\n            breakAfterNextPush = true;\n          } else {\n            break;\n          }\n        }\n      }\n      return weeks;\n    });\n    _defineProperty(_this, \"onMonthClick\", function (e, m) {\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(_this.props.day, m);\n      if (isMonthDisabled(labelDate, _this.props)) {\n        return;\n      }\n      _this.handleDayClick(getStartOfMonth(labelDate), e);\n    });\n    _defineProperty(_this, \"onMonthMouseEnter\", function (m) {\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(_this.props.day, m);\n      if (isMonthDisabled(labelDate, _this.props)) {\n        return;\n      }\n      _this.handleDayMouseEnter(getStartOfMonth(labelDate));\n    });\n    _defineProperty(_this, \"handleMonthNavigation\", function (newMonth, newDate) {\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n      _this.props.setPreSelection(newDate);\n      _this.MONTH_REFS[newMonth].current && _this.MONTH_REFS[newMonth].current.focus();\n    });\n    _defineProperty(_this, \"onMonthKeyDown\", function (event, month) {\n      var _this$props9 = _this.props,\n        selected = _this$props9.selected,\n        preSelection = _this$props9.preSelection,\n        disabledKeyboardNavigation = _this$props9.disabledKeyboardNavigation,\n        showTwoColumnMonthYearPicker = _this$props9.showTwoColumnMonthYearPicker,\n        showFourColumnMonthYearPicker = _this$props9.showFourColumnMonthYearPicker,\n        setPreSelection = _this$props9.setPreSelection,\n        handleOnMonthKeyDown = _this$props9.handleOnMonthKeyDown;\n      var eventKey = event.key;\n      if (eventKey !== \"Tab\") {\n        // preventDefault on tab event blocks focus change\n        event.preventDefault();\n      }\n      if (!disabledKeyboardNavigation) {\n        var monthColumnsLayout = getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker);\n        var verticalOffset = MONTH_COLUMNS[monthColumnsLayout].verticalNavigationOffset;\n        var monthsGrid = MONTH_COLUMNS[monthColumnsLayout].grid;\n        switch (eventKey) {\n          case \"Enter\":\n            _this.onMonthClick(event, month);\n            setPreSelection(selected);\n            break;\n          case \"ArrowRight\":\n            _this.handleMonthNavigation(month === 11 ? 0 : month + MONTH_NAVIGATION_HORIZONTAL_OFFSET, (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(preSelection, MONTH_NAVIGATION_HORIZONTAL_OFFSET));\n            break;\n          case \"ArrowLeft\":\n            _this.handleMonthNavigation(month === 0 ? 11 : month - MONTH_NAVIGATION_HORIZONTAL_OFFSET, (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(preSelection, MONTH_NAVIGATION_HORIZONTAL_OFFSET));\n            break;\n          case \"ArrowUp\":\n            _this.handleMonthNavigation(\n            // Check if month on the first row\n            monthsGrid[0].includes(month) ? month + 12 - verticalOffset : month - verticalOffset, (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(preSelection, verticalOffset));\n            break;\n          case \"ArrowDown\":\n            _this.handleMonthNavigation(\n            // Check if month on the last row\n            monthsGrid[monthsGrid.length - 1].includes(month) ? month - 12 + verticalOffset : month + verticalOffset, (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(preSelection, verticalOffset));\n            break;\n        }\n      }\n      handleOnMonthKeyDown && handleOnMonthKeyDown(event);\n    });\n    _defineProperty(_this, \"onQuarterClick\", function (e, q) {\n      var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\n      if (isQuarterDisabled(labelDate, _this.props)) {\n        return;\n      }\n      _this.handleDayClick(getStartOfQuarter(labelDate), e);\n    });\n    _defineProperty(_this, \"onQuarterMouseEnter\", function (q) {\n      var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\n      if (isQuarterDisabled(labelDate, _this.props)) {\n        return;\n      }\n      _this.handleDayMouseEnter(getStartOfQuarter(labelDate));\n    });\n    _defineProperty(_this, \"handleQuarterNavigation\", function (newQuarter, newDate) {\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n      _this.props.setPreSelection(newDate);\n      _this.QUARTER_REFS[newQuarter - 1].current && _this.QUARTER_REFS[newQuarter - 1].current.focus();\n    });\n    _defineProperty(_this, \"onQuarterKeyDown\", function (event, quarter) {\n      var eventKey = event.key;\n      if (!_this.props.disabledKeyboardNavigation) {\n        switch (eventKey) {\n          case \"Enter\":\n            _this.onQuarterClick(event, quarter);\n            _this.props.setPreSelection(_this.props.selected);\n            break;\n          case \"ArrowRight\":\n            _this.handleQuarterNavigation(quarter === 4 ? 1 : quarter + 1, (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__.addQuarters)(_this.props.preSelection, 1));\n            break;\n          case \"ArrowLeft\":\n            _this.handleQuarterNavigation(quarter === 1 ? 4 : quarter - 1, (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__.subQuarters)(_this.props.preSelection, 1));\n            break;\n        }\n      }\n    });\n    _defineProperty(_this, \"isMonthDisabled\", function (month) {\n      var _this$props10 = _this.props,\n        day = _this$props10.day,\n        minDate = _this$props10.minDate,\n        maxDate = _this$props10.maxDate,\n        excludeDates = _this$props10.excludeDates,\n        includeDates = _this$props10.includeDates;\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\n      return (minDate || maxDate || excludeDates || includeDates) && isMonthDisabled(labelDate, _this.props);\n    });\n    _defineProperty(_this, \"getMonthClassNames\", function (m) {\n      var _this$props11 = _this.props,\n        day = _this$props11.day,\n        startDate = _this$props11.startDate,\n        endDate = _this$props11.endDate,\n        selected = _this$props11.selected,\n        preSelection = _this$props11.preSelection,\n        monthClassName = _this$props11.monthClassName;\n      var _monthClassName = monthClassName ? monthClassName((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m)) : undefined;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__month-text\", \"react-datepicker__month-\".concat(m), _monthClassName, {\n        \"react-datepicker__month-text--disabled\": _this.isMonthDisabled(m),\n        \"react-datepicker__month-text--selected\": _this.isSelectedMonth(day, m, selected),\n        \"react-datepicker__month-text--keyboard-selected\": !_this.props.disabledKeyboardNavigation && _this.isSelectedMonth(day, m, preSelection),\n        \"react-datepicker__month-text--in-selecting-range\": _this.isInSelectingRangeMonth(m),\n        \"react-datepicker__month-text--in-range\": isMonthInRange(startDate, endDate, m, day),\n        \"react-datepicker__month-text--range-start\": _this.isRangeStartMonth(m),\n        \"react-datepicker__month-text--range-end\": _this.isRangeEndMonth(m),\n        \"react-datepicker__month-text--selecting-range-start\": _this.isSelectingMonthRangeStart(m),\n        \"react-datepicker__month-text--selecting-range-end\": _this.isSelectingMonthRangeEnd(m),\n        \"react-datepicker__month-text--today\": _this.isCurrentMonth(day, m)\n      });\n    });\n    _defineProperty(_this, \"getTabIndex\", function (m) {\n      var preSelectedMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.preSelection);\n      var tabIndex = !_this.props.disabledKeyboardNavigation && m === preSelectedMonth ? \"0\" : \"-1\";\n      return tabIndex;\n    });\n    _defineProperty(_this, \"getQuarterTabIndex\", function (q) {\n      var preSelectedQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(_this.props.preSelection);\n      var tabIndex = !_this.props.disabledKeyboardNavigation && q === preSelectedQuarter ? \"0\" : \"-1\";\n      return tabIndex;\n    });\n    _defineProperty(_this, \"getAriaLabel\", function (month) {\n      var _this$props12 = _this.props,\n        _this$props12$chooseD = _this$props12.chooseDayAriaLabelPrefix,\n        chooseDayAriaLabelPrefix = _this$props12$chooseD === void 0 ? \"Choose\" : _this$props12$chooseD,\n        _this$props12$disable = _this$props12.disabledDayAriaLabelPrefix,\n        disabledDayAriaLabelPrefix = _this$props12$disable === void 0 ? \"Not available\" : _this$props12$disable,\n        day = _this$props12.day,\n        locale = _this$props12.locale;\n      var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\n      var prefix = _this.isDisabled(labelDate) || _this.isExcluded(labelDate) ? disabledDayAriaLabelPrefix : chooseDayAriaLabelPrefix;\n      return \"\".concat(prefix, \" \").concat(formatDate(labelDate, \"MMMM yyyy\", locale));\n    });\n    _defineProperty(_this, \"getQuarterClassNames\", function (q) {\n      var _this$props13 = _this.props,\n        day = _this$props13.day,\n        startDate = _this$props13.startDate,\n        endDate = _this$props13.endDate,\n        selected = _this$props13.selected,\n        minDate = _this$props13.minDate,\n        maxDate = _this$props13.maxDate,\n        preSelection = _this$props13.preSelection,\n        disabledKeyboardNavigation = _this$props13.disabledKeyboardNavigation;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__quarter-text\", \"react-datepicker__quarter-\".concat(q), {\n        \"react-datepicker__quarter-text--disabled\": (minDate || maxDate) && isQuarterDisabled((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), _this.props),\n        \"react-datepicker__quarter-text--selected\": _this.isSelectedQuarter(day, q, selected),\n        \"react-datepicker__quarter-text--keyboard-selected\": !disabledKeyboardNavigation && _this.isSelectedQuarter(day, q, preSelection),\n        \"react-datepicker__quarter-text--in-selecting-range\": _this.isInSelectingRangeQuarter(q),\n        \"react-datepicker__quarter-text--in-range\": isQuarterInRange(startDate, endDate, q, day),\n        \"react-datepicker__quarter-text--range-start\": _this.isRangeStartQuarter(q),\n        \"react-datepicker__quarter-text--range-end\": _this.isRangeEndQuarter(q)\n      });\n    });\n    _defineProperty(_this, \"getMonthContent\", function (m) {\n      var _this$props14 = _this.props,\n        showFullMonthYearPicker = _this$props14.showFullMonthYearPicker,\n        renderMonthContent = _this$props14.renderMonthContent,\n        locale = _this$props14.locale,\n        day = _this$props14.day;\n      var shortMonthText = getMonthShortInLocale(m, locale);\n      var fullMonthText = getMonthInLocale(m, locale);\n      if (renderMonthContent) {\n        return renderMonthContent(m, shortMonthText, fullMonthText, day);\n      }\n      return showFullMonthYearPicker ? fullMonthText : shortMonthText;\n    });\n    _defineProperty(_this, \"getQuarterContent\", function (q) {\n      var _this$props15 = _this.props,\n        renderQuarterContent = _this$props15.renderQuarterContent,\n        locale = _this$props15.locale;\n      var shortQuarter = getQuarterShortInLocale(q, locale);\n      return renderQuarterContent ? renderQuarterContent(q, shortQuarter) : shortQuarter;\n    });\n    _defineProperty(_this, \"renderMonths\", function () {\n      var _this$props16 = _this.props,\n        showTwoColumnMonthYearPicker = _this$props16.showTwoColumnMonthYearPicker,\n        showFourColumnMonthYearPicker = _this$props16.showFourColumnMonthYearPicker,\n        day = _this$props16.day,\n        selected = _this$props16.selected;\n      var monthColumns = MONTH_COLUMNS[getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker)].grid;\n      return monthColumns.map(function (month, i) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__month-wrapper\",\n          key: i\n        }, month.map(function (m, j) {\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            ref: _this.MONTH_REFS[m],\n            key: j,\n            onClick: function onClick(ev) {\n              _this.onMonthClick(ev, m);\n            },\n            onKeyDown: function onKeyDown(ev) {\n              if (isSpaceKeyDown(ev)) {\n                ev.preventDefault();\n                ev.key = \"Enter\";\n              }\n              _this.onMonthKeyDown(ev, m);\n            },\n            onMouseEnter: !_this.props.usePointerEvent ? function () {\n              return _this.onMonthMouseEnter(m);\n            } : undefined,\n            onPointerEnter: _this.props.usePointerEvent ? function () {\n              return _this.onMonthMouseEnter(m);\n            } : undefined,\n            tabIndex: _this.getTabIndex(m),\n            className: _this.getMonthClassNames(m),\n            \"aria-disabled\": _this.isMonthDisabled(m),\n            role: \"option\",\n            \"aria-label\": _this.getAriaLabel(m),\n            \"aria-current\": _this.isCurrentMonth(day, m) ? \"date\" : undefined,\n            \"aria-selected\": _this.isSelectedMonth(day, m, selected)\n          }, _this.getMonthContent(m));\n        }));\n      });\n    });\n    _defineProperty(_this, \"renderQuarters\", function () {\n      var _this$props17 = _this.props,\n        day = _this$props17.day,\n        selected = _this$props17.selected;\n      var quarters = [1, 2, 3, 4];\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__quarter-wrapper\"\n      }, quarters.map(function (q, j) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          key: j,\n          ref: _this.QUARTER_REFS[j],\n          role: \"option\",\n          onClick: function onClick(ev) {\n            _this.onQuarterClick(ev, q);\n          },\n          onKeyDown: function onKeyDown(ev) {\n            _this.onQuarterKeyDown(ev, q);\n          },\n          onMouseEnter: !_this.props.usePointerEvent ? function () {\n            return _this.onQuarterMouseEnter(q);\n          } : undefined,\n          onPointerEnter: _this.props.usePointerEvent ? function () {\n            return _this.onQuarterMouseEnter(q);\n          } : undefined,\n          className: _this.getQuarterClassNames(q),\n          \"aria-selected\": _this.isSelectedQuarter(day, q, selected),\n          tabIndex: _this.getQuarterTabIndex(q),\n          \"aria-current\": _this.isCurrentQuarter(day, q) ? \"date\" : undefined\n        }, _this.getQuarterContent(q));\n      }));\n    });\n    _defineProperty(_this, \"getClassNames\", function () {\n      var _this$props18 = _this.props,\n        selectingDate = _this$props18.selectingDate,\n        selectsStart = _this$props18.selectsStart,\n        selectsEnd = _this$props18.selectsEnd,\n        showMonthYearPicker = _this$props18.showMonthYearPicker,\n        showQuarterYearPicker = _this$props18.showQuarterYearPicker,\n        showWeekPicker = _this$props18.showWeekPicker;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__month\", {\n        \"react-datepicker__month--selecting-range\": selectingDate && (selectsStart || selectsEnd)\n      }, {\n        \"react-datepicker__monthPicker\": showMonthYearPicker\n      }, {\n        \"react-datepicker__quarterPicker\": showQuarterYearPicker\n      }, {\n        \"react-datepicker__weekPicker\": showWeekPicker\n      });\n    });\n    return _this;\n  }\n  _inherits(Month, _React$Component);\n  return _createClass(Month, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props19 = this.props,\n        showMonthYearPicker = _this$props19.showMonthYearPicker,\n        showQuarterYearPicker = _this$props19.showQuarterYearPicker,\n        day = _this$props19.day,\n        _this$props19$ariaLab = _this$props19.ariaLabelPrefix,\n        ariaLabelPrefix = _this$props19$ariaLab === void 0 ? \"Month \" : _this$props19$ariaLab;\n      var formattedAriaLabelPrefix = ariaLabelPrefix ? ariaLabelPrefix.trim() + \" \" : \"\";\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: this.getClassNames(),\n        onMouseLeave: !this.props.usePointerEvent ? this.handleMouseLeave : undefined,\n        onPointerLeave: this.props.usePointerEvent ? this.handleMouseLeave : undefined,\n        \"aria-label\": \"\".concat(formattedAriaLabelPrefix).concat(formatDate(day, \"MMMM, yyyy\", this.props.locale)),\n        role: \"listbox\"\n      }, showMonthYearPicker ? this.renderMonths() : showQuarterYearPicker ? this.renderQuarters() : this.renderWeeks());\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar Time = /*#__PURE__*/function (_React$Component) {\n  function Time() {\n    var _this;\n    _classCallCheck(this, Time);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Time, [].concat(args));\n    _defineProperty(_this, \"state\", {\n      height: null\n    });\n    _defineProperty(_this, \"scrollToTheSelectedTime\", function () {\n      requestAnimationFrame(function () {\n        if (!_this.list) return;\n        _this.list.scrollTop = _this.centerLi && Time.calcCenterPosition(_this.props.monthRef ? _this.props.monthRef.clientHeight - _this.header.clientHeight : _this.list.clientHeight, _this.centerLi);\n      });\n    });\n    _defineProperty(_this, \"handleClick\", function (time) {\n      if ((_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props)) {\n        return;\n      }\n      _this.props.onChange(time);\n    });\n    _defineProperty(_this, \"isSelectedTime\", function (time) {\n      return _this.props.selected && isSameMinute(_this.props.selected, time);\n    });\n    _defineProperty(_this, \"isDisabledTime\", function (time) {\n      return (_this.props.minTime || _this.props.maxTime) && isTimeInDisabledRange(time, _this.props) || (_this.props.excludeTimes || _this.props.includeTimes || _this.props.filterTime) && isTimeDisabled(time, _this.props);\n    });\n    _defineProperty(_this, \"liClasses\", function (time) {\n      var classes = [\"react-datepicker__time-list-item\", _this.props.timeClassName ? _this.props.timeClassName(time) : undefined];\n      if (_this.isSelectedTime(time)) {\n        classes.push(\"react-datepicker__time-list-item--selected\");\n      }\n      if (_this.isDisabledTime(time)) {\n        classes.push(\"react-datepicker__time-list-item--disabled\");\n      }\n\n      //convert this.props.intervals and the relevant time to seconds and check if it it's a clean multiple of the interval\n      if (_this.props.injectTimes && ((0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) * 3600 + (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) * 60 + (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time)) % (_this.props.intervals * 60) !== 0) {\n        classes.push(\"react-datepicker__time-list-item--injected\");\n      }\n      return classes.join(\" \");\n    });\n    _defineProperty(_this, \"handleOnKeyDown\", function (event, time) {\n      if (event.key === \" \") {\n        event.preventDefault();\n        event.key = \"Enter\";\n      }\n      if ((event.key === \"ArrowUp\" || event.key === \"ArrowLeft\") && event.target.previousSibling) {\n        event.preventDefault();\n        event.target.previousSibling.focus();\n      }\n      if ((event.key === \"ArrowDown\" || event.key === \"ArrowRight\") && event.target.nextSibling) {\n        event.preventDefault();\n        event.target.nextSibling.focus();\n      }\n      if (event.key === \"Enter\") {\n        _this.handleClick(time);\n      }\n      _this.props.handleOnKeyDown(event);\n    });\n    _defineProperty(_this, \"renderTimes\", function () {\n      var times = [];\n      var format = _this.props.format ? _this.props.format : \"p\";\n      var intervals = _this.props.intervals;\n      var activeDate = _this.props.selected || _this.props.openToDate || newDate();\n      var base = getStartOfDay(activeDate);\n      var sortedInjectTimes = _this.props.injectTimes && _this.props.injectTimes.sort(function (a, b) {\n        return a - b;\n      });\n      var minutesInDay = 60 * getHoursInDay(activeDate);\n      var multiplier = minutesInDay / intervals;\n      for (var i = 0; i < multiplier; i++) {\n        var currentTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(base, i * intervals);\n        times.push(currentTime);\n        if (sortedInjectTimes) {\n          var timesToInject = timesToInjectAfter(base, currentTime, i, intervals, sortedInjectTimes);\n          times = times.concat(timesToInject);\n        }\n      }\n\n      // Determine which time to focus and scroll into view when component mounts\n      var timeToFocus = times.reduce(function (prev, time) {\n        if (time.getTime() <= activeDate.getTime()) {\n          return time;\n        }\n        return prev;\n      }, times[0]);\n      return times.map(function (time, i) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"li\", {\n          key: i,\n          onClick: _this.handleClick.bind(_this, time),\n          className: _this.liClasses(time),\n          ref: function ref(li) {\n            if (time === timeToFocus) {\n              _this.centerLi = li;\n            }\n          },\n          onKeyDown: function onKeyDown(ev) {\n            _this.handleOnKeyDown(ev, time);\n          },\n          tabIndex: time === timeToFocus ? 0 : -1,\n          role: \"option\",\n          \"aria-selected\": _this.isSelectedTime(time) ? \"true\" : undefined,\n          \"aria-disabled\": _this.isDisabledTime(time) ? \"true\" : undefined\n        }, formatDate(time, format, _this.props.locale));\n      });\n    });\n    return _this;\n  }\n  _inherits(Time, _React$Component);\n  return _createClass(Time, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // code to ensure selected time will always be in focus within time window when it first appears\n      this.scrollToTheSelectedTime();\n      if (this.props.monthRef && this.header) {\n        this.setState({\n          height: this.props.monthRef.clientHeight - this.header.clientHeight\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var height = this.state.height;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__time-container \".concat(this.props.todayButton ? \"react-datepicker__time-container--with-today-button\" : \"\")\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header react-datepicker__header--time \".concat(this.props.showTimeSelectOnly ? \"react-datepicker__header--time--only\" : \"\"),\n        ref: function ref(header) {\n          _this2.header = header;\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker-time__header\"\n      }, this.props.timeCaption)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__time\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__time-box\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", {\n        className: \"react-datepicker__time-list\",\n        ref: function ref(list) {\n          _this2.list = list;\n        },\n        style: height ? {\n          height: height\n        } : {},\n        role: \"listbox\",\n        \"aria-label\": this.props.timeCaption\n      }, this.renderTimes()))));\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        intervals: 30,\n        onTimeChange: function onTimeChange() {},\n        todayButton: null,\n        timeCaption: \"Time\"\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n_defineProperty(Time, \"calcCenterPosition\", function (listHeight, centerLiRef) {\n  return centerLiRef.offsetTop - (listHeight / 2 - centerLiRef.clientHeight / 2);\n});\n\nvar VERTICAL_NAVIGATION_OFFSET = 3;\nvar Year = /*#__PURE__*/function (_React$Component) {\n  function Year(props) {\n    var _this;\n    _classCallCheck(this, Year);\n    _this = _callSuper(this, Year, [props]);\n    _defineProperty(_this, \"YEAR_REFS\", _toConsumableArray(Array(_this.props.yearItemNumber)).map(function () {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    }));\n    _defineProperty(_this, \"isDisabled\", function (date) {\n      return isDayDisabled(date, _this.props);\n    });\n    _defineProperty(_this, \"isExcluded\", function (date) {\n      return isDayExcluded(date, _this.props);\n    });\n    _defineProperty(_this, \"selectingDate\", function () {\n      var _this$props$selecting;\n      return (_this$props$selecting = _this.props.selectingDate) !== null && _this$props$selecting !== void 0 ? _this$props$selecting : _this.props.preSelection;\n    });\n    _defineProperty(_this, \"updateFocusOnPaginate\", function (refIndex) {\n      var waitForReRender = function () {\n        this.YEAR_REFS[refIndex].current.focus();\n      }.bind(_this);\n      window.requestAnimationFrame(waitForReRender);\n    });\n    _defineProperty(_this, \"handleYearClick\", function (day, event) {\n      if (_this.props.onDayClick) {\n        _this.props.onDayClick(day, event);\n      }\n    });\n    _defineProperty(_this, \"handleYearNavigation\", function (newYear, newDate) {\n      var _this$props = _this.props,\n        date = _this$props.date,\n        yearItemNumber = _this$props.yearItemNumber;\n      var _utils$getYearsPeriod = getYearsPeriod(date, yearItemNumber),\n        startPeriod = _utils$getYearsPeriod.startPeriod;\n      if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) return;\n      _this.props.setPreSelection(newDate);\n      if (newYear - startPeriod < 0) {\n        _this.updateFocusOnPaginate(yearItemNumber - (startPeriod - newYear));\n      } else if (newYear - startPeriod >= yearItemNumber) {\n        _this.updateFocusOnPaginate(Math.abs(yearItemNumber - (newYear - startPeriod)));\n      } else _this.YEAR_REFS[newYear - startPeriod].current.focus();\n    });\n    _defineProperty(_this, \"isSameDay\", function (y, other) {\n      return isSameDay(y, other);\n    });\n    _defineProperty(_this, \"isCurrentYear\", function (y) {\n      return y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate());\n    });\n    _defineProperty(_this, \"isRangeStart\", function (y) {\n      return _this.props.startDate && _this.props.endDate && isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.startDate);\n    });\n    _defineProperty(_this, \"isRangeEnd\", function (y) {\n      return _this.props.startDate && _this.props.endDate && isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.endDate);\n    });\n    _defineProperty(_this, \"isInRange\", function (y) {\n      return isYearInRange(y, _this.props.startDate, _this.props.endDate);\n    });\n    _defineProperty(_this, \"isInSelectingRange\", function (y) {\n      var _this$props2 = _this.props,\n        selectsStart = _this$props2.selectsStart,\n        selectsEnd = _this$props2.selectsEnd,\n        selectsRange = _this$props2.selectsRange,\n        startDate = _this$props2.startDate,\n        endDate = _this$props2.endDate;\n      if (!(selectsStart || selectsEnd || selectsRange) || !_this.selectingDate()) {\n        return false;\n      }\n      if (selectsStart && endDate) {\n        return isYearInRange(y, _this.selectingDate(), endDate);\n      }\n      if (selectsEnd && startDate) {\n        return isYearInRange(y, startDate, _this.selectingDate());\n      }\n      if (selectsRange && startDate && !endDate) {\n        return isYearInRange(y, startDate, _this.selectingDate());\n      }\n      return false;\n    });\n    _defineProperty(_this, \"isSelectingRangeStart\", function (y) {\n      if (!_this.isInSelectingRange(y)) {\n        return false;\n      }\n      var _this$props3 = _this.props,\n        startDate = _this$props3.startDate,\n        selectsStart = _this$props3.selectsStart;\n      var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\n      if (selectsStart) {\n        return isSameYear(_year, _this.selectingDate());\n      }\n      return isSameYear(_year, startDate);\n    });\n    _defineProperty(_this, \"isSelectingRangeEnd\", function (y) {\n      if (!_this.isInSelectingRange(y)) {\n        return false;\n      }\n      var _this$props4 = _this.props,\n        endDate = _this$props4.endDate,\n        selectsEnd = _this$props4.selectsEnd,\n        selectsRange = _this$props4.selectsRange;\n      var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\n      if (selectsEnd || selectsRange) {\n        return isSameYear(_year, _this.selectingDate());\n      }\n      return isSameYear(_year, endDate);\n    });\n    _defineProperty(_this, \"isKeyboardSelected\", function (y) {\n      var date = getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(_this.props.date, y));\n      return !_this.props.disabledKeyboardNavigation && !_this.props.inline && !isSameDay(date, getStartOfYear(_this.props.selected)) && isSameDay(date, getStartOfYear(_this.props.preSelection));\n    });\n    _defineProperty(_this, \"onYearClick\", function (e, y) {\n      var date = _this.props.date;\n      _this.handleYearClick(getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)), e);\n    });\n    _defineProperty(_this, \"onYearKeyDown\", function (e, y) {\n      var key = e.key;\n      var _this$props5 = _this.props,\n        date = _this$props5.date,\n        yearItemNumber = _this$props5.yearItemNumber,\n        handleOnKeyDown = _this$props5.handleOnKeyDown;\n      if (key !== \"Tab\") {\n        // preventDefault on tab event blocks focus change\n        e.preventDefault();\n      }\n      if (!_this.props.disabledKeyboardNavigation) {\n        switch (key) {\n          case \"Enter\":\n            _this.onYearClick(e, y);\n            _this.props.setPreSelection(_this.props.selected);\n            break;\n          case \"ArrowRight\":\n            _this.handleYearNavigation(y + 1, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.props.preSelection, 1));\n            break;\n          case \"ArrowLeft\":\n            _this.handleYearNavigation(y - 1, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(_this.props.preSelection, 1));\n            break;\n          case \"ArrowUp\":\n            {\n              var _utils$getYearsPeriod2 = getYearsPeriod(date, yearItemNumber),\n                startPeriod = _utils$getYearsPeriod2.startPeriod;\n              var offset = VERTICAL_NAVIGATION_OFFSET;\n              var newYear = y - offset;\n              if (newYear < startPeriod) {\n                var leftOverOffset = yearItemNumber % offset;\n                if (y >= startPeriod && y < startPeriod + leftOverOffset) {\n                  offset = leftOverOffset;\n                } else {\n                  offset += leftOverOffset;\n                }\n                newYear = y - offset;\n              }\n              _this.handleYearNavigation(newYear, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(_this.props.preSelection, offset));\n              break;\n            }\n          case \"ArrowDown\":\n            {\n              var _utils$getYearsPeriod3 = getYearsPeriod(date, yearItemNumber),\n                endPeriod = _utils$getYearsPeriod3.endPeriod;\n              var _offset = VERTICAL_NAVIGATION_OFFSET;\n              var _newYear = y + _offset;\n              if (_newYear > endPeriod) {\n                var _leftOverOffset = yearItemNumber % _offset;\n                if (y <= endPeriod && y > endPeriod - _leftOverOffset) {\n                  _offset = _leftOverOffset;\n                } else {\n                  _offset += _leftOverOffset;\n                }\n                _newYear = y + _offset;\n              }\n              _this.handleYearNavigation(_newYear, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.props.preSelection, _offset));\n              break;\n            }\n        }\n      }\n      handleOnKeyDown && handleOnKeyDown(e);\n    });\n    _defineProperty(_this, \"getYearClassNames\", function (y) {\n      var _this$props6 = _this.props,\n        date = _this$props6.date,\n        minDate = _this$props6.minDate,\n        maxDate = _this$props6.maxDate,\n        selected = _this$props6.selected,\n        excludeDates = _this$props6.excludeDates,\n        includeDates = _this$props6.includeDates,\n        filterDate = _this$props6.filterDate,\n        yearClassName = _this$props6.yearClassName;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__year-text\", \"react-datepicker__year-\".concat(y), yearClassName ? yearClassName((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)) : undefined, {\n        \"react-datepicker__year-text--selected\": y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected),\n        \"react-datepicker__year-text--disabled\": (minDate || maxDate || excludeDates || includeDates || filterDate) && isYearDisabled(y, _this.props),\n        \"react-datepicker__year-text--keyboard-selected\": _this.isKeyboardSelected(y),\n        \"react-datepicker__year-text--range-start\": _this.isRangeStart(y),\n        \"react-datepicker__year-text--range-end\": _this.isRangeEnd(y),\n        \"react-datepicker__year-text--in-range\": _this.isInRange(y),\n        \"react-datepicker__year-text--in-selecting-range\": _this.isInSelectingRange(y),\n        \"react-datepicker__year-text--selecting-range-start\": _this.isSelectingRangeStart(y),\n        \"react-datepicker__year-text--selecting-range-end\": _this.isSelectingRangeEnd(y),\n        \"react-datepicker__year-text--today\": _this.isCurrentYear(y)\n      });\n    });\n    _defineProperty(_this, \"getYearTabIndex\", function (y) {\n      if (_this.props.disabledKeyboardNavigation) return \"-1\";\n      var preSelected = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.preSelection);\n      return y === preSelected ? \"0\" : \"-1\";\n    });\n    _defineProperty(_this, \"getYearContainerClassNames\", function () {\n      var _this$props7 = _this.props,\n        selectingDate = _this$props7.selectingDate,\n        selectsStart = _this$props7.selectsStart,\n        selectsEnd = _this$props7.selectsEnd,\n        selectsRange = _this$props7.selectsRange;\n      return (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__year\", {\n        \"react-datepicker__year--selecting-range\": selectingDate && (selectsStart || selectsEnd || selectsRange)\n      });\n    });\n    _defineProperty(_this, \"getYearContent\", function (y) {\n      return _this.props.renderYearContent ? _this.props.renderYearContent(y) : y;\n    });\n    return _this;\n  }\n  _inherits(Year, _React$Component);\n  return _createClass(Year, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var yearsList = [];\n      var _this$props8 = this.props,\n        date = _this$props8.date,\n        yearItemNumber = _this$props8.yearItemNumber,\n        onYearMouseEnter = _this$props8.onYearMouseEnter,\n        onYearMouseLeave = _this$props8.onYearMouseLeave;\n      var _utils$getYearsPeriod4 = getYearsPeriod(date, yearItemNumber),\n        startPeriod = _utils$getYearsPeriod4.startPeriod,\n        endPeriod = _utils$getYearsPeriod4.endPeriod;\n      var _loop = function _loop(y) {\n        yearsList.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          ref: _this2.YEAR_REFS[y - startPeriod],\n          onClick: function onClick(ev) {\n            _this2.onYearClick(ev, y);\n          },\n          onKeyDown: function onKeyDown(ev) {\n            if (isSpaceKeyDown(ev)) {\n              ev.preventDefault();\n              ev.key = \"Enter\";\n            }\n            _this2.onYearKeyDown(ev, y);\n          },\n          tabIndex: _this2.getYearTabIndex(y),\n          className: _this2.getYearClassNames(y),\n          onMouseEnter: !_this2.props.usePointerEvent ? function (ev) {\n            return onYearMouseEnter(ev, y);\n          } : undefined,\n          onPointerEnter: _this2.props.usePointerEvent ? function (ev) {\n            return onYearMouseEnter(ev, y);\n          } : undefined,\n          onMouseLeave: !_this2.props.usePointerEvent ? function (ev) {\n            return onYearMouseLeave(ev, y);\n          } : undefined,\n          onPointerLeave: _this2.props.usePointerEvent ? function (ev) {\n            return onYearMouseLeave(ev, y);\n          } : undefined,\n          key: y,\n          \"aria-current\": _this2.isCurrentYear(y) ? \"date\" : undefined\n        }, _this2.getYearContent(y)));\n      };\n      for (var y = startPeriod; y <= endPeriod; y++) {\n        _loop(y);\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: this.getYearContainerClassNames()\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__year-wrapper\",\n        onMouseLeave: !this.props.usePointerEvent ? this.props.clearSelectingDate : undefined,\n        onPointerLeave: this.props.usePointerEvent ? this.props.clearSelectingDate : undefined\n      }, yearsList));\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar inputTime = /*#__PURE__*/function (_React$Component) {\n  function inputTime(props) {\n    var _this;\n    _classCallCheck(this, inputTime);\n    _this = _callSuper(this, inputTime, [props]);\n    _defineProperty(_this, \"onTimeChange\", function (time) {\n      _this.setState({\n        time: time\n      });\n      var propDate = _this.props.date;\n      var isPropDateValid = propDate instanceof Date && !isNaN(propDate);\n      var date = isPropDateValid ? propDate : new Date();\n      date.setHours(time.split(\":\")[0]);\n      date.setMinutes(time.split(\":\")[1]);\n      _this.props.onChange(date);\n    });\n    _defineProperty(_this, \"renderTimeInput\", function () {\n      var time = _this.state.time;\n      var _this$props = _this.props,\n        date = _this$props.date,\n        timeString = _this$props.timeString,\n        customTimeInput = _this$props.customTimeInput;\n      if (customTimeInput) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(customTimeInput, {\n          date: date,\n          value: time,\n          onChange: _this.onTimeChange\n        });\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n        type: \"time\",\n        className: \"react-datepicker-time__input\",\n        placeholder: \"Time\",\n        name: \"time-input\",\n        required: true,\n        value: time,\n        onChange: function onChange(ev) {\n          _this.onTimeChange(ev.target.value || timeString);\n        }\n      });\n    });\n    _this.state = {\n      time: _this.props.timeString\n    };\n    return _this;\n  }\n  _inherits(inputTime, _React$Component);\n  return _createClass(inputTime, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__input-time-container\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker-time__caption\"\n      }, this.props.timeInputLabel), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker-time__input-container\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker-time__input\"\n      }, this.renderTimeInput())));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.timeString !== state.time) {\n        return {\n          time: props.timeString\n        };\n      }\n\n      // Return null to indicate no change to state.\n      return null;\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nfunction CalendarContainer(_ref) {\n  var _ref$showTimeSelectOn = _ref.showTimeSelectOnly,\n    showTimeSelectOnly = _ref$showTimeSelectOn === void 0 ? false : _ref$showTimeSelectOn,\n    _ref$showTime = _ref.showTime,\n    showTime = _ref$showTime === void 0 ? false : _ref$showTime,\n    className = _ref.className,\n    children = _ref.children;\n  var ariaLabel = showTimeSelectOnly ? \"Choose Time\" : \"Choose Date\".concat(showTime ? \" and Time\" : \"\");\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: className,\n    role: \"dialog\",\n    \"aria-label\": ariaLabel,\n    \"aria-modal\": \"true\"\n  }, children);\n}\n\nvar DROPDOWN_FOCUS_CLASSNAMES = [\"react-datepicker__year-select\", \"react-datepicker__month-select\", \"react-datepicker__month-year-select\"];\nvar isDropdownSelect = function isDropdownSelect() {\n  var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var classNames = (element.className || \"\").split(/\\s+/);\n  return DROPDOWN_FOCUS_CLASSNAMES.some(function (testClassname) {\n    return classNames.indexOf(testClassname) >= 0;\n  });\n};\nvar Calendar = /*#__PURE__*/function (_React$Component) {\n  function Calendar(props) {\n    var _this;\n    _classCallCheck(this, Calendar);\n    _this = _callSuper(this, Calendar, [props]);\n    _defineProperty(_this, \"handleClickOutside\", function (event) {\n      _this.props.onClickOutside(event);\n    });\n    _defineProperty(_this, \"setClickOutsideRef\", function () {\n      return _this.containerRef.current;\n    });\n    _defineProperty(_this, \"handleDropdownFocus\", function (event) {\n      if (isDropdownSelect(event.target)) {\n        _this.props.onDropdownFocus();\n      }\n    });\n    _defineProperty(_this, \"getDateInView\", function () {\n      var _this$props = _this.props,\n        preSelection = _this$props.preSelection,\n        selected = _this$props.selected,\n        openToDate = _this$props.openToDate;\n      var minDate = getEffectiveMinDate(_this.props);\n      var maxDate = getEffectiveMaxDate(_this.props);\n      var current = newDate();\n      var initialDate = openToDate || selected || preSelection;\n      if (initialDate) {\n        return initialDate;\n      } else {\n        if (minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(current, minDate)) {\n          return minDate;\n        } else if (maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(current, maxDate)) {\n          return maxDate;\n        }\n      }\n      return current;\n    });\n    _defineProperty(_this, \"increaseMonth\", function () {\n      _this.setState(function (_ref) {\n        var date = _ref.date;\n        return {\n          date: (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(date, 1)\n        };\n      }, function () {\n        return _this.handleMonthChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"decreaseMonth\", function () {\n      _this.setState(function (_ref2) {\n        var date = _ref2.date;\n        return {\n          date: (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(date, 1)\n        };\n      }, function () {\n        return _this.handleMonthChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"handleDayClick\", function (day, event, monthSelectedIn) {\n      _this.props.onSelect(day, event, monthSelectedIn);\n      _this.props.setPreSelection && _this.props.setPreSelection(day);\n    });\n    _defineProperty(_this, \"handleDayMouseEnter\", function (day) {\n      _this.setState({\n        selectingDate: day\n      });\n      _this.props.onDayMouseEnter && _this.props.onDayMouseEnter(day);\n    });\n    _defineProperty(_this, \"handleMonthMouseLeave\", function () {\n      _this.setState({\n        selectingDate: null\n      });\n      _this.props.onMonthMouseLeave && _this.props.onMonthMouseLeave();\n    });\n    _defineProperty(_this, \"handleYearMouseEnter\", function (event, year) {\n      _this.setState({\n        selectingDate: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), year)\n      });\n      !!_this.props.onYearMouseEnter && _this.props.onYearMouseEnter(event, year);\n    });\n    _defineProperty(_this, \"handleYearMouseLeave\", function (event, year) {\n      !!_this.props.onYearMouseLeave && _this.props.onYearMouseLeave(event, year);\n    });\n    _defineProperty(_this, \"handleYearChange\", function (date) {\n      if (_this.props.onYearChange) {\n        _this.props.onYearChange(date);\n        _this.setState({\n          isRenderAriaLiveMessage: true\n        });\n      }\n      if (_this.props.adjustDateOnChange) {\n        if (_this.props.onSelect) {\n          _this.props.onSelect(date);\n        }\n        if (_this.props.setOpen) {\n          _this.props.setOpen(true);\n        }\n      }\n      _this.props.setPreSelection && _this.props.setPreSelection(date);\n    });\n    _defineProperty(_this, \"handleMonthChange\", function (date) {\n      _this.handleCustomMonthChange(date);\n      if (_this.props.adjustDateOnChange) {\n        if (_this.props.onSelect) {\n          _this.props.onSelect(date);\n        }\n        if (_this.props.setOpen) {\n          _this.props.setOpen(true);\n        }\n      }\n      _this.props.setPreSelection && _this.props.setPreSelection(date);\n    });\n    _defineProperty(_this, \"handleCustomMonthChange\", function (date) {\n      if (_this.props.onMonthChange) {\n        _this.props.onMonthChange(date);\n        _this.setState({\n          isRenderAriaLiveMessage: true\n        });\n      }\n    });\n    _defineProperty(_this, \"handleMonthYearChange\", function (date) {\n      _this.handleYearChange(date);\n      _this.handleMonthChange(date);\n    });\n    _defineProperty(_this, \"changeYear\", function (year) {\n      _this.setState(function (_ref3) {\n        var date = _ref3.date;\n        return {\n          date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, year)\n        };\n      }, function () {\n        return _this.handleYearChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"changeMonth\", function (month) {\n      _this.setState(function (_ref4) {\n        var date = _ref4.date;\n        return {\n          date: (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, month)\n        };\n      }, function () {\n        return _this.handleMonthChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"changeMonthYear\", function (monthYear) {\n      _this.setState(function (_ref5) {\n        var date = _ref5.date;\n        return {\n          date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(monthYear)), (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthYear))\n        };\n      }, function () {\n        return _this.handleMonthYearChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"header\", function () {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.date;\n      var startOfWeek = getStartOfWeek(date, _this.props.locale, _this.props.calendarStartDay);\n      var dayNames = [];\n      if (_this.props.showWeekNumbers) {\n        dayNames.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          key: \"W\",\n          className: \"react-datepicker__day-name\"\n        }, _this.props.weekLabel || \"#\"));\n      }\n      return dayNames.concat([0, 1, 2, 3, 4, 5, 6].map(function (offset) {\n        var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(startOfWeek, offset);\n        var weekDayName = _this.formatWeekday(day, _this.props.locale);\n        var weekDayClassName = _this.props.weekDayClassName ? _this.props.weekDayClassName(day) : undefined;\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          key: offset,\n          \"aria-label\": formatDate(day, \"EEEE\", _this.props.locale),\n          className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__day-name\", weekDayClassName)\n        }, weekDayName);\n      }));\n    });\n    _defineProperty(_this, \"formatWeekday\", function (day, locale) {\n      if (_this.props.formatWeekDay) {\n        return getFormattedWeekdayInLocale(day, _this.props.formatWeekDay, locale);\n      }\n      return _this.props.useWeekdaysShort ? getWeekdayShortInLocale(day, locale) : getWeekdayMinInLocale(day, locale);\n    });\n    _defineProperty(_this, \"decreaseYear\", function () {\n      _this.setState(function (_ref6) {\n        var date = _ref6.date;\n        return {\n          date: (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(date, _this.props.showYearPicker ? _this.props.yearItemNumber : 1)\n        };\n      }, function () {\n        return _this.handleYearChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"clearSelectingDate\", function () {\n      _this.setState({\n        selectingDate: null\n      });\n    });\n    _defineProperty(_this, \"renderPreviousButton\", function () {\n      if (_this.props.renderCustomHeader) {\n        return;\n      }\n      var allPrevDaysDisabled;\n      switch (true) {\n        case _this.props.showMonthYearPicker:\n          allPrevDaysDisabled = yearDisabledBefore(_this.state.date, _this.props);\n          break;\n        case _this.props.showYearPicker:\n          allPrevDaysDisabled = yearsDisabledBefore(_this.state.date, _this.props);\n          break;\n        case _this.props.showQuarterYearPicker:\n          allPrevDaysDisabled = quarterDisabledBefore(_this.state.date, _this.props);\n          break;\n        default:\n          allPrevDaysDisabled = monthDisabledBefore(_this.state.date, _this.props);\n          break;\n      }\n      if (!_this.props.forceShowMonthNavigation && !_this.props.showDisabledMonthNavigation && allPrevDaysDisabled || _this.props.showTimeSelectOnly) {\n        return;\n      }\n      var iconClasses = [\"react-datepicker__navigation-icon\", \"react-datepicker__navigation-icon--previous\"];\n      var classes = [\"react-datepicker__navigation\", \"react-datepicker__navigation--previous\"];\n      var clickHandler = _this.decreaseMonth;\n      if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\n        clickHandler = _this.decreaseYear;\n      }\n      if (allPrevDaysDisabled && _this.props.showDisabledMonthNavigation) {\n        classes.push(\"react-datepicker__navigation--previous--disabled\");\n        clickHandler = null;\n      }\n      var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\n      var _this$props2 = _this.props,\n        previousMonthButtonLabel = _this$props2.previousMonthButtonLabel,\n        previousYearButtonLabel = _this$props2.previousYearButtonLabel;\n      var _this$props3 = _this.props,\n        _this$props3$previous = _this$props3.previousMonthAriaLabel,\n        previousMonthAriaLabel = _this$props3$previous === void 0 ? typeof previousMonthButtonLabel === \"string\" ? previousMonthButtonLabel : \"Previous Month\" : _this$props3$previous,\n        _this$props3$previous2 = _this$props3.previousYearAriaLabel,\n        previousYearAriaLabel = _this$props3$previous2 === void 0 ? typeof previousYearButtonLabel === \"string\" ? previousYearButtonLabel : \"Previous Year\" : _this$props3$previous2;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        type: \"button\",\n        className: classes.join(\" \"),\n        onClick: clickHandler,\n        onKeyDown: _this.props.handleOnKeyDown,\n        \"aria-label\": isForYear ? previousYearAriaLabel : previousMonthAriaLabel\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: iconClasses.join(\" \")\n      }, isForYear ? _this.props.previousYearButtonLabel : _this.props.previousMonthButtonLabel));\n    });\n    _defineProperty(_this, \"increaseYear\", function () {\n      _this.setState(function (_ref7) {\n        var date = _ref7.date;\n        return {\n          date: (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(date, _this.props.showYearPicker ? _this.props.yearItemNumber : 1)\n        };\n      }, function () {\n        return _this.handleYearChange(_this.state.date);\n      });\n    });\n    _defineProperty(_this, \"renderNextButton\", function () {\n      if (_this.props.renderCustomHeader) {\n        return;\n      }\n      var allNextDaysDisabled;\n      switch (true) {\n        case _this.props.showMonthYearPicker:\n          allNextDaysDisabled = yearDisabledAfter(_this.state.date, _this.props);\n          break;\n        case _this.props.showYearPicker:\n          allNextDaysDisabled = yearsDisabledAfter(_this.state.date, _this.props);\n          break;\n        case _this.props.showQuarterYearPicker:\n          allNextDaysDisabled = quarterDisabledAfter(_this.state.date, _this.props);\n          break;\n        default:\n          allNextDaysDisabled = monthDisabledAfter(_this.state.date, _this.props);\n          break;\n      }\n      if (!_this.props.forceShowMonthNavigation && !_this.props.showDisabledMonthNavigation && allNextDaysDisabled || _this.props.showTimeSelectOnly) {\n        return;\n      }\n      var classes = [\"react-datepicker__navigation\", \"react-datepicker__navigation--next\"];\n      var iconClasses = [\"react-datepicker__navigation-icon\", \"react-datepicker__navigation-icon--next\"];\n      if (_this.props.showTimeSelect) {\n        classes.push(\"react-datepicker__navigation--next--with-time\");\n      }\n      if (_this.props.todayButton) {\n        classes.push(\"react-datepicker__navigation--next--with-today-button\");\n      }\n      var clickHandler = _this.increaseMonth;\n      if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker) {\n        clickHandler = _this.increaseYear;\n      }\n      if (allNextDaysDisabled && _this.props.showDisabledMonthNavigation) {\n        classes.push(\"react-datepicker__navigation--next--disabled\");\n        clickHandler = null;\n      }\n      var isForYear = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker;\n      var _this$props4 = _this.props,\n        nextMonthButtonLabel = _this$props4.nextMonthButtonLabel,\n        nextYearButtonLabel = _this$props4.nextYearButtonLabel;\n      var _this$props5 = _this.props,\n        _this$props5$nextMont = _this$props5.nextMonthAriaLabel,\n        nextMonthAriaLabel = _this$props5$nextMont === void 0 ? typeof nextMonthButtonLabel === \"string\" ? nextMonthButtonLabel : \"Next Month\" : _this$props5$nextMont,\n        _this$props5$nextYear = _this$props5.nextYearAriaLabel,\n        nextYearAriaLabel = _this$props5$nextYear === void 0 ? typeof nextYearButtonLabel === \"string\" ? nextYearButtonLabel : \"Next Year\" : _this$props5$nextYear;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        type: \"button\",\n        className: classes.join(\" \"),\n        onClick: clickHandler,\n        onKeyDown: _this.props.handleOnKeyDown,\n        \"aria-label\": isForYear ? nextYearAriaLabel : nextMonthAriaLabel\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: iconClasses.join(\" \")\n      }, isForYear ? _this.props.nextYearButtonLabel : _this.props.nextMonthButtonLabel));\n    });\n    _defineProperty(_this, \"renderCurrentMonth\", function () {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.date;\n      var classes = [\"react-datepicker__current-month\"];\n      if (_this.props.showYearDropdown) {\n        classes.push(\"react-datepicker__current-month--hasYearDropdown\");\n      }\n      if (_this.props.showMonthDropdown) {\n        classes.push(\"react-datepicker__current-month--hasMonthDropdown\");\n      }\n      if (_this.props.showMonthYearDropdown) {\n        classes.push(\"react-datepicker__current-month--hasMonthYearDropdown\");\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: classes.join(\" \")\n      }, formatDate(date, _this.props.dateFormat, _this.props.locale));\n    });\n    _defineProperty(_this, \"renderYearDropdown\", function () {\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!_this.props.showYearDropdown || overrideHide) {\n        return;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(YearDropdown, {\n        adjustDateOnChange: _this.props.adjustDateOnChange,\n        date: _this.state.date,\n        onSelect: _this.props.onSelect,\n        setOpen: _this.props.setOpen,\n        dropdownMode: _this.props.dropdownMode,\n        onChange: _this.changeYear,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        year: (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date),\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber\n      });\n    });\n    _defineProperty(_this, \"renderMonthDropdown\", function () {\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!_this.props.showMonthDropdown || overrideHide) {\n        return;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MonthDropdown, {\n        dropdownMode: _this.props.dropdownMode,\n        locale: _this.props.locale,\n        onChange: _this.changeMonth,\n        month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date),\n        useShortMonthInDropdown: _this.props.useShortMonthInDropdown\n      });\n    });\n    _defineProperty(_this, \"renderMonthYearDropdown\", function () {\n      var overrideHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!_this.props.showMonthYearDropdown || overrideHide) {\n        return;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MonthYearDropdown, {\n        dropdownMode: _this.props.dropdownMode,\n        locale: _this.props.locale,\n        dateFormat: _this.props.dateFormat,\n        onChange: _this.changeMonthYear,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        date: _this.state.date,\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown\n      });\n    });\n    _defineProperty(_this, \"handleTodayButtonClick\", function (e) {\n      _this.props.onSelect(getStartOfToday(), e);\n      _this.props.setPreSelection && _this.props.setPreSelection(getStartOfToday());\n    });\n    _defineProperty(_this, \"renderTodayButton\", function () {\n      if (!_this.props.todayButton || _this.props.showTimeSelectOnly) {\n        return;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__today-button\",\n        onClick: function onClick(e) {\n          return _this.handleTodayButtonClick(e);\n        }\n      }, _this.props.todayButton);\n    });\n    _defineProperty(_this, \"renderDefaultHeader\", function (_ref8) {\n      var monthDate = _ref8.monthDate,\n        i = _ref8.i;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header \".concat(_this.props.showTimeSelect ? \"react-datepicker__header--has-time-select\" : \"\")\n      }, _this.renderCurrentMonth(monthDate), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header__dropdown react-datepicker__header__dropdown--\".concat(_this.props.dropdownMode),\n        onFocus: _this.handleDropdownFocus\n      }, _this.renderMonthDropdown(i !== 0), _this.renderMonthYearDropdown(i !== 0), _this.renderYearDropdown(i !== 0)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__day-names\"\n      }, _this.header(monthDate)));\n    });\n    _defineProperty(_this, \"renderCustomHeader\", function () {\n      var headerArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var monthDate = headerArgs.monthDate,\n        i = headerArgs.i;\n      if (_this.props.showTimeSelect && !_this.state.monthContainer || _this.props.showTimeSelectOnly) {\n        return null;\n      }\n      var prevMonthButtonDisabled = monthDisabledBefore(_this.state.date, _this.props);\n      var nextMonthButtonDisabled = monthDisabledAfter(_this.state.date, _this.props);\n      var prevYearButtonDisabled = yearDisabledBefore(_this.state.date, _this.props);\n      var nextYearButtonDisabled = yearDisabledAfter(_this.state.date, _this.props);\n      var showDayNames = !_this.props.showMonthYearPicker && !_this.props.showQuarterYearPicker && !_this.props.showYearPicker;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header react-datepicker__header--custom\",\n        onFocus: _this.props.onDropdownFocus\n      }, _this.props.renderCustomHeader(_objectSpread2(_objectSpread2({}, _this.state), {}, {\n        customHeaderCount: i,\n        monthDate: monthDate,\n        changeMonth: _this.changeMonth,\n        changeYear: _this.changeYear,\n        decreaseMonth: _this.decreaseMonth,\n        increaseMonth: _this.increaseMonth,\n        decreaseYear: _this.decreaseYear,\n        increaseYear: _this.increaseYear,\n        prevMonthButtonDisabled: prevMonthButtonDisabled,\n        nextMonthButtonDisabled: nextMonthButtonDisabled,\n        prevYearButtonDisabled: prevYearButtonDisabled,\n        nextYearButtonDisabled: nextYearButtonDisabled\n      })), showDayNames && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__day-names\"\n      }, _this.header(monthDate)));\n    });\n    _defineProperty(_this, \"renderYearHeader\", function (_ref9) {\n      var monthDate = _ref9.monthDate;\n      var _this$props6 = _this.props,\n        showYearPicker = _this$props6.showYearPicker,\n        yearItemNumber = _this$props6.yearItemNumber;\n      var _getYearsPeriod = getYearsPeriod(monthDate, yearItemNumber),\n        startPeriod = _getYearsPeriod.startPeriod,\n        endPeriod = _getYearsPeriod.endPeriod;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__header react-datepicker-year-header\"\n      }, showYearPicker ? \"\".concat(startPeriod, \" - \").concat(endPeriod) : (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthDate));\n    });\n    _defineProperty(_this, \"renderHeader\", function (headerArgs) {\n      switch (true) {\n        case _this.props.renderCustomHeader !== undefined:\n          return _this.renderCustomHeader(headerArgs);\n        case _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker || _this.props.showYearPicker:\n          return _this.renderYearHeader(headerArgs);\n        default:\n          return _this.renderDefaultHeader(headerArgs);\n      }\n    });\n    _defineProperty(_this, \"renderMonths\", function () {\n      var _this$props$monthSele;\n      if (_this.props.showTimeSelectOnly || _this.props.showYearPicker) {\n        return;\n      }\n      var monthList = [];\n      var monthsToSubtract = _this.props.showPreviousMonths ? _this.props.monthsShown - 1 : 0;\n      var fromMonthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.state.date, monthsToSubtract) : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(_this.state.date, monthsToSubtract);\n      var monthSelectedIn = (_this$props$monthSele = _this.props.monthSelectedIn) !== null && _this$props$monthSele !== void 0 ? _this$props$monthSele : monthsToSubtract;\n      for (var i = 0; i < _this.props.monthsShown; ++i) {\n        var monthsToAdd = i - monthSelectedIn + monthsToSubtract;\n        var monthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(fromMonthDate, monthsToAdd) : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(fromMonthDate, monthsToAdd);\n        var monthKey = \"month-\".concat(i);\n        var monthShowsDuplicateDaysEnd = i < _this.props.monthsShown - 1;\n        var monthShowsDuplicateDaysStart = i > 0;\n        monthList.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          key: monthKey,\n          ref: function ref(div) {\n            _this.monthContainer = div;\n          },\n          className: \"react-datepicker__month-container\"\n        }, _this.renderHeader({\n          monthDate: monthDate,\n          i: i\n        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Month, {\n          chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n          disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n          weekAriaLabelPrefix: _this.props.weekAriaLabelPrefix,\n          ariaLabelPrefix: _this.props.monthAriaLabelPrefix,\n          onChange: _this.changeMonthYear,\n          day: monthDate,\n          dayClassName: _this.props.dayClassName,\n          calendarStartDay: _this.props.calendarStartDay,\n          monthClassName: _this.props.monthClassName,\n          onDayClick: _this.handleDayClick,\n          handleOnKeyDown: _this.props.handleOnDayKeyDown,\n          handleOnMonthKeyDown: _this.props.handleOnKeyDown,\n          usePointerEvent: _this.props.usePointerEvent,\n          onDayMouseEnter: _this.handleDayMouseEnter,\n          onMouseLeave: _this.handleMonthMouseLeave,\n          onWeekSelect: _this.props.onWeekSelect,\n          orderInDisplay: i,\n          formatWeekNumber: _this.props.formatWeekNumber,\n          locale: _this.props.locale,\n          minDate: _this.props.minDate,\n          maxDate: _this.props.maxDate,\n          excludeDates: _this.props.excludeDates,\n          excludeDateIntervals: _this.props.excludeDateIntervals,\n          highlightDates: _this.props.highlightDates,\n          holidays: _this.props.holidays,\n          selectingDate: _this.state.selectingDate,\n          includeDates: _this.props.includeDates,\n          includeDateIntervals: _this.props.includeDateIntervals,\n          inline: _this.props.inline,\n          shouldFocusDayInline: _this.props.shouldFocusDayInline,\n          fixedHeight: _this.props.fixedHeight,\n          filterDate: _this.props.filterDate,\n          preSelection: _this.props.preSelection,\n          setPreSelection: _this.props.setPreSelection,\n          selected: _this.props.selected,\n          selectsStart: _this.props.selectsStart,\n          selectsEnd: _this.props.selectsEnd,\n          selectsRange: _this.props.selectsRange,\n          selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n          selectsMultiple: _this.props.selectsMultiple,\n          selectedDates: _this.props.selectedDates,\n          showWeekNumbers: _this.props.showWeekNumbers,\n          startDate: _this.props.startDate,\n          endDate: _this.props.endDate,\n          peekNextMonth: _this.props.peekNextMonth,\n          setOpen: _this.props.setOpen,\n          shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n          renderDayContents: _this.props.renderDayContents,\n          renderMonthContent: _this.props.renderMonthContent,\n          renderQuarterContent: _this.props.renderQuarterContent,\n          renderYearContent: _this.props.renderYearContent,\n          disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n          showMonthYearPicker: _this.props.showMonthYearPicker,\n          showFullMonthYearPicker: _this.props.showFullMonthYearPicker,\n          showTwoColumnMonthYearPicker: _this.props.showTwoColumnMonthYearPicker,\n          showFourColumnMonthYearPicker: _this.props.showFourColumnMonthYearPicker,\n          showYearPicker: _this.props.showYearPicker,\n          showQuarterYearPicker: _this.props.showQuarterYearPicker,\n          showWeekPicker: _this.props.showWeekPicker,\n          isInputFocused: _this.props.isInputFocused,\n          containerRef: _this.containerRef,\n          monthShowsDuplicateDaysEnd: monthShowsDuplicateDaysEnd,\n          monthShowsDuplicateDaysStart: monthShowsDuplicateDaysStart\n        })));\n      }\n      return monthList;\n    });\n    _defineProperty(_this, \"renderYears\", function () {\n      if (_this.props.showTimeSelectOnly) {\n        return;\n      }\n      if (_this.props.showYearPicker) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__year--container\"\n        }, _this.renderHeader({\n          monthDate: _this.state.date\n        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Year, _extends({\n          onDayClick: _this.handleDayClick,\n          selectingDate: _this.state.selectingDate,\n          clearSelectingDate: _this.clearSelectingDate,\n          date: _this.state.date\n        }, _this.props, {\n          onYearMouseEnter: _this.handleYearMouseEnter,\n          onYearMouseLeave: _this.handleYearMouseLeave\n        })));\n      }\n    });\n    _defineProperty(_this, \"renderTimeSection\", function () {\n      if (_this.props.showTimeSelect && (_this.state.monthContainer || _this.props.showTimeSelectOnly)) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Time, {\n          selected: _this.props.selected,\n          openToDate: _this.props.openToDate,\n          onChange: _this.props.onTimeChange,\n          timeClassName: _this.props.timeClassName,\n          format: _this.props.timeFormat,\n          includeTimes: _this.props.includeTimes,\n          intervals: _this.props.timeIntervals,\n          minTime: _this.props.minTime,\n          maxTime: _this.props.maxTime,\n          excludeTimes: _this.props.excludeTimes,\n          filterTime: _this.props.filterTime,\n          timeCaption: _this.props.timeCaption,\n          todayButton: _this.props.todayButton,\n          showMonthDropdown: _this.props.showMonthDropdown,\n          showMonthYearDropdown: _this.props.showMonthYearDropdown,\n          showYearDropdown: _this.props.showYearDropdown,\n          withPortal: _this.props.withPortal,\n          monthRef: _this.state.monthContainer,\n          injectTimes: _this.props.injectTimes,\n          locale: _this.props.locale,\n          handleOnKeyDown: _this.props.handleOnKeyDown,\n          showTimeSelectOnly: _this.props.showTimeSelectOnly\n        });\n      }\n    });\n    _defineProperty(_this, \"renderInputTimeSection\", function () {\n      var time = new Date(_this.props.selected);\n      var timeValid = isValid(time) && Boolean(_this.props.selected);\n      var timeString = timeValid ? \"\".concat(addZero(time.getHours()), \":\").concat(addZero(time.getMinutes())) : \"\";\n      if (_this.props.showTimeInput) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(inputTime, {\n          date: time,\n          timeString: timeString,\n          timeInputLabel: _this.props.timeInputLabel,\n          onChange: _this.props.onTimeChange,\n          customTimeInput: _this.props.customTimeInput\n        });\n      }\n    });\n    _defineProperty(_this, \"renderAriaLiveRegion\", function () {\n      var _getYearsPeriod2 = getYearsPeriod(_this.state.date, _this.props.yearItemNumber),\n        startPeriod = _getYearsPeriod2.startPeriod,\n        endPeriod = _getYearsPeriod2.endPeriod;\n      var ariaLiveMessage;\n      if (_this.props.showYearPicker) {\n        ariaLiveMessage = \"\".concat(startPeriod, \" - \").concat(endPeriod);\n      } else if (_this.props.showMonthYearPicker || _this.props.showQuarterYearPicker) {\n        ariaLiveMessage = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date);\n      } else {\n        ariaLiveMessage = \"\".concat(getMonthInLocale((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date), _this.props.locale), \" \").concat((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date));\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        role: \"alert\",\n        \"aria-live\": \"polite\",\n        className: \"react-datepicker__aria-live\"\n      }, _this.state.isRenderAriaLiveMessage && ariaLiveMessage);\n    });\n    _defineProperty(_this, \"renderChildren\", function () {\n      if (_this.props.children) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__children-container\"\n        }, _this.props.children);\n      }\n    });\n    _this.containerRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    _this.state = {\n      date: _this.getDateInView(),\n      selectingDate: null,\n      monthContainer: null,\n      isRenderAriaLiveMessage: false\n    };\n    return _this;\n  }\n  _inherits(Calendar, _React$Component);\n  return _createClass(Calendar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      // monthContainer height is needed in time component\n      // to determine the height for the ul in the time component\n      // setState here so height is given after final component\n      // layout is rendered\n      if (this.props.showTimeSelect) {\n        this.assignMonthContainer = function () {\n          _this2.setState({\n            monthContainer: _this2.monthContainer\n          });\n        }();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this3 = this;\n      if (this.props.preSelection && (!isSameDay(this.props.preSelection, prevProps.preSelection) || this.props.monthSelectedIn !== prevProps.monthSelectedIn)) {\n        var hasMonthChanged = !isSameMonth(this.state.date, this.props.preSelection);\n        this.setState({\n          date: this.props.preSelection\n        }, function () {\n          return hasMonthChanged && _this3.handleCustomMonthChange(_this3.state.date);\n        });\n      } else if (this.props.openToDate && !isSameDay(this.props.openToDate, prevProps.openToDate)) {\n        this.setState({\n          date: this.props.openToDate\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Container = this.props.container || CalendarContainer;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n          display: \"contents\"\n        },\n        ref: this.containerRef\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Container, {\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker\", this.props.className, {\n          \"react-datepicker--time-only\": this.props.showTimeSelectOnly\n        }),\n        showTime: this.props.showTimeSelect || this.props.showTimeInput,\n        showTimeSelectOnly: this.props.showTimeSelectOnly\n      }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren()));\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        onDropdownFocus: function onDropdownFocus() {},\n        monthsShown: 1,\n        forceShowMonthNavigation: false,\n        timeCaption: \"Time\",\n        previousYearButtonLabel: \"Previous Year\",\n        nextYearButtonLabel: \"Next Year\",\n        previousMonthButtonLabel: \"Previous Month\",\n        nextMonthButtonLabel: \"Next Month\",\n        customTimeInput: null,\n        yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nvar CalendarIcon = function CalendarIcon(_ref) {\n  var icon = _ref.icon,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? \"\" : _ref$className,\n    _onClick = _ref.onClick;\n  var defaultClass = \"react-datepicker__calendar-icon\";\n  if ( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(icon)) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(icon, {\n      className: \"\".concat(icon.props.className || \"\", \" \").concat(defaultClass, \" \").concat(className),\n      onClick: function onClick(e) {\n        if (typeof icon.props.onClick === \"function\") {\n          icon.props.onClick(e);\n        }\n        if (typeof _onClick === \"function\") {\n          _onClick(e);\n        }\n      }\n    });\n  }\n  if (typeof icon === \"string\") {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"i\", {\n      className: \"\".concat(defaultClass, \" \").concat(icon, \" \").concat(className),\n      \"aria-hidden\": \"true\",\n      onClick: _onClick\n    });\n  }\n\n  // Default SVG Icon\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n    className: \"\".concat(defaultClass, \" \").concat(className),\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 448 512\",\n    onClick: _onClick\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n    d: \"M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z\"\n  }));\n};\nvar CalendarIcon$1 = CalendarIcon;\n\nvar Portal = /*#__PURE__*/function (_React$Component) {\n  function Portal(props) {\n    var _this;\n    _classCallCheck(this, Portal);\n    _this = _callSuper(this, Portal, [props]);\n    _this.el = document.createElement(\"div\");\n    return _this;\n  }\n  _inherits(Portal, _React$Component);\n  return _createClass(Portal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId);\n      if (!this.portalRoot) {\n        this.portalRoot = document.createElement(\"div\");\n        this.portalRoot.setAttribute(\"id\", this.props.portalId);\n        (this.props.portalHost || document.body).appendChild(this.portalRoot);\n      }\n      this.portalRoot.appendChild(this.el);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.portalRoot.removeChild(this.el);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/react_dom__WEBPACK_IMPORTED_MODULE_3___default().createPortal(this.props.children, this.el);\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\n// TabLoop prevents the user from tabbing outside of the popper\n// It creates a tabindex loop so that \"Tab\" on the last element will focus the first element\n// and \"Shift Tab\" on the first element will focus the last element\n\nvar focusableElementsSelector = \"[tabindex], a, button, input, select, textarea\";\nvar focusableFilter = function focusableFilter(node) {\n  return !node.disabled && node.tabIndex !== -1;\n};\nvar TabLoop = /*#__PURE__*/function (_React$Component) {\n  function TabLoop(props) {\n    var _this;\n    _classCallCheck(this, TabLoop);\n    _this = _callSuper(this, TabLoop, [props]);\n    // query all focusable elements\n    // trim first and last because they are the focus guards\n    _defineProperty(_this, \"getTabChildren\", function () {\n      return Array.prototype.slice.call(_this.tabLoopRef.current.querySelectorAll(focusableElementsSelector), 1, -1).filter(focusableFilter);\n    });\n    _defineProperty(_this, \"handleFocusStart\", function () {\n      var tabChildren = _this.getTabChildren();\n      tabChildren && tabChildren.length > 1 && tabChildren[tabChildren.length - 1].focus();\n    });\n    _defineProperty(_this, \"handleFocusEnd\", function () {\n      var tabChildren = _this.getTabChildren();\n      tabChildren && tabChildren.length > 1 && tabChildren[0].focus();\n    });\n    _this.tabLoopRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\n    return _this;\n  }\n  _inherits(TabLoop, _React$Component);\n  return _createClass(TabLoop, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.props.enableTabLoop) {\n        return this.props.children;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__tab-loop\",\n        ref: this.tabLoopRef\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__tab-loop__start\",\n        tabIndex: \"0\",\n        onFocus: this.handleFocusStart\n      }), this.props.children, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__tab-loop__end\",\n        tabIndex: \"0\",\n        onFocus: this.handleFocusEnd\n      }));\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        enableTabLoop: true\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\n\nfunction withFloating(Component) {\n  var WithFloating = function WithFloating(props) {\n    var alt_props = _objectSpread2(_objectSpread2({}, props), {}, {\n      popperModifiers: props.popperModifiers || [],\n      popperProps: props.popperProps || {},\n      hidePopper: typeof props.hidePopper === \"boolean\" ? props.hidePopper : true\n    });\n    var arrowRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef();\n    var floatingProps = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.useFloating)(_objectSpread2({\n      open: !alt_props.hidePopper,\n      whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.autoUpdate,\n      placement: alt_props.popperPlacement,\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.flip)({\n        padding: 15\n      }), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.arrow)({\n        element: arrowRef\n      })].concat(_toConsumableArray(alt_props.popperModifiers))\n    }, alt_props.popperProps));\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, _extends({}, alt_props, {\n      popperProps: _objectSpread2(_objectSpread2({}, floatingProps), {}, {\n        arrowRef: arrowRef\n      })\n    }));\n  };\n  return WithFloating;\n}\n\n// Exported for testing purposes\nvar PopperComponent = /*#__PURE__*/function (_React$Component) {\n  function PopperComponent() {\n    _classCallCheck(this, PopperComponent);\n    return _callSuper(this, PopperComponent, arguments);\n  }\n  _inherits(PopperComponent, _React$Component);\n  return _createClass(PopperComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        className = _this$props.className,\n        wrapperClassName = _this$props.wrapperClassName,\n        hidePopper = _this$props.hidePopper,\n        popperComponent = _this$props.popperComponent,\n        targetComponent = _this$props.targetComponent,\n        enableTabLoop = _this$props.enableTabLoop,\n        popperOnKeyDown = _this$props.popperOnKeyDown,\n        portalId = _this$props.portalId,\n        portalHost = _this$props.portalHost,\n        popperProps = _this$props.popperProps,\n        showArrow = _this$props.showArrow;\n      var popper;\n      if (!hidePopper) {\n        var classes = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker-popper\", className);\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TabLoop, {\n          enableTabLoop: enableTabLoop\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          ref: popperProps.refs.setFloating,\n          style: popperProps.floatingStyles,\n          className: classes,\n          \"data-placement\": popperProps.placement,\n          onKeyDown: popperOnKeyDown\n        }, popperComponent, showArrow && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.FloatingArrow, {\n          ref: popperProps.arrowRef,\n          context: popperProps.context,\n          fill: \"currentColor\",\n          strokeWidth: 1,\n          height: 8,\n          width: 16,\n          style: {\n            transform: \"translateY(-1px)\"\n          },\n          className: \"react-datepicker__triangle\"\n        })));\n      }\n      if (this.props.popperContainer) {\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(this.props.popperContainer, {}, popper);\n      }\n      if (portalId && !hidePopper) {\n        popper = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Portal, {\n          portalId: portalId,\n          portalHost: portalHost\n        }, popper);\n      }\n      var wrapperClasses = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker-wrapper\", wrapperClassName);\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: popperProps.refs.setReference,\n        className: wrapperClasses\n      }, targetComponent), popper);\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        hidePopper: true\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar PopperComponent$1 = withFloating(PopperComponent);\n\nvar outsideClickIgnoreClass = \"react-datepicker-ignore-onclickoutside\";\nvar WrappedCalendar = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Calendar);\n\n// Compares dates year+month combinations\nfunction hasPreSelectionChanged(date1, date2) {\n  if (date1 && date2) {\n    return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date1) !== (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date2) || (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date1) !== (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date2);\n  }\n  return date1 !== date2;\n}\n\n/**\n * General datepicker component.\n */\nvar INPUT_ERR_1 = \"Date input not valid.\";\nvar DatePicker = /*#__PURE__*/function (_React$Component) {\n  function DatePicker(props) {\n    var _this;\n    _classCallCheck(this, DatePicker);\n    _this = _callSuper(this, DatePicker, [props]);\n    _defineProperty(_this, \"getPreSelection\", function () {\n      return _this.props.openToDate ? _this.props.openToDate : _this.props.selectsEnd && _this.props.startDate ? _this.props.startDate : _this.props.selectsStart && _this.props.endDate ? _this.props.endDate : newDate();\n    });\n    // Convert the date from string format to standard Date format\n    _defineProperty(_this, \"modifyHolidays\", function () {\n      var _this$props$holidays;\n      return (_this$props$holidays = _this.props.holidays) === null || _this$props$holidays === void 0 ? void 0 : _this$props$holidays.reduce(function (accumulator, holiday) {\n        var date = new Date(holiday.date);\n        if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date)) {\n          return accumulator;\n        }\n        return [].concat(_toConsumableArray(accumulator), [_objectSpread2(_objectSpread2({}, holiday), {}, {\n          date: date\n        })]);\n      }, []);\n    });\n    _defineProperty(_this, \"calcInitialState\", function () {\n      var _ref;\n      var defaultPreSelection = _this.getPreSelection();\n      var minDate = getEffectiveMinDate(_this.props);\n      var maxDate = getEffectiveMaxDate(_this.props);\n      var boundedPreSelection = minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(defaultPreSelection, (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(minDate)) ? minDate : maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(defaultPreSelection, (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(maxDate)) ? maxDate : defaultPreSelection;\n      return {\n        open: _this.props.startOpen || false,\n        preventFocus: false,\n        preSelection: (_ref = _this.props.selectsRange ? _this.props.startDate : _this.props.selected) !== null && _ref !== void 0 ? _ref : boundedPreSelection,\n        // transforming highlighted days (perhaps nested array)\n        // to flat Map for faster access in day.jsx\n        highlightDates: getHightLightDaysMap(_this.props.highlightDates),\n        focused: false,\n        // used to focus day in inline version after month has changed, but not on\n        // initial render\n        shouldFocusDayInline: false,\n        isRenderAriaLiveMessage: false\n      };\n    });\n    _defineProperty(_this, \"clearPreventFocusTimeout\", function () {\n      if (_this.preventFocusTimeout) {\n        clearTimeout(_this.preventFocusTimeout);\n      }\n    });\n    _defineProperty(_this, \"setFocus\", function () {\n      if (_this.input && _this.input.focus) {\n        _this.input.focus({\n          preventScroll: true\n        });\n      }\n    });\n    _defineProperty(_this, \"setBlur\", function () {\n      if (_this.input && _this.input.blur) {\n        _this.input.blur();\n      }\n      _this.cancelFocusInput();\n    });\n    _defineProperty(_this, \"setOpen\", function (open) {\n      var skipSetBlur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      _this.setState({\n        open: open,\n        preSelection: open && _this.state.open ? _this.state.preSelection : _this.calcInitialState().preSelection,\n        lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n      }, function () {\n        if (!open) {\n          _this.setState(function (prev) {\n            return {\n              focused: skipSetBlur ? prev.focused : false\n            };\n          }, function () {\n            !skipSetBlur && _this.setBlur();\n            _this.setState({\n              inputValue: null\n            });\n          });\n        }\n      });\n    });\n    _defineProperty(_this, \"inputOk\", function () {\n      return (0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(_this.state.preSelection);\n    });\n    _defineProperty(_this, \"isCalendarOpen\", function () {\n      return _this.props.open === undefined ? _this.state.open && !_this.props.disabled && !_this.props.readOnly : _this.props.open;\n    });\n    _defineProperty(_this, \"handleFocus\", function (event) {\n      if (!_this.state.preventFocus) {\n        _this.props.onFocus(event);\n        if (!_this.props.preventOpenOnFocus && !_this.props.readOnly) {\n          _this.setOpen(true);\n        }\n      }\n      _this.setState({\n        focused: true\n      });\n    });\n    _defineProperty(_this, \"sendFocusBackToInput\", function () {\n      // Clear previous timeout if it exists\n      if (_this.preventFocusTimeout) {\n        _this.clearPreventFocusTimeout();\n      }\n\n      // close the popper and refocus the input\n      // stop the input from auto opening onFocus\n      // setFocus to the input\n      _this.setState({\n        preventFocus: true\n      }, function () {\n        _this.preventFocusTimeout = setTimeout(function () {\n          _this.setFocus();\n          _this.setState({\n            preventFocus: false\n          });\n        });\n      });\n    });\n    _defineProperty(_this, \"cancelFocusInput\", function () {\n      clearTimeout(_this.inputFocusTimeout);\n      _this.inputFocusTimeout = null;\n    });\n    _defineProperty(_this, \"deferFocusInput\", function () {\n      _this.cancelFocusInput();\n      _this.inputFocusTimeout = setTimeout(function () {\n        return _this.setFocus();\n      }, 1);\n    });\n    _defineProperty(_this, \"handleDropdownFocus\", function () {\n      _this.cancelFocusInput();\n    });\n    _defineProperty(_this, \"handleBlur\", function (event) {\n      if (!_this.state.open || _this.props.withPortal || _this.props.showTimeInput) {\n        _this.props.onBlur(event);\n      }\n      _this.setState({\n        focused: false\n      });\n    });\n    _defineProperty(_this, \"handleCalendarClickOutside\", function (event) {\n      if (!_this.props.inline) {\n        _this.setOpen(false);\n      }\n      _this.props.onClickOutside(event);\n      if (_this.props.withPortal) {\n        event.preventDefault();\n      }\n    });\n    _defineProperty(_this, \"handleChange\", function () {\n      for (var _len = arguments.length, allArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n        allArgs[_key] = arguments[_key];\n      }\n      var event = allArgs[0];\n      if (_this.props.onChangeRaw) {\n        _this.props.onChangeRaw.apply(_this, allArgs);\n        if (typeof event.isDefaultPrevented !== \"function\" || event.isDefaultPrevented()) {\n          return;\n        }\n      }\n      _this.setState({\n        inputValue: event.target.value,\n        lastPreSelectChange: PRESELECT_CHANGE_VIA_INPUT\n      });\n      var date = parseDate(event.target.value, _this.props.dateFormat, _this.props.locale, _this.props.strictParsing, _this.props.minDate);\n      // Use date from `selected` prop when manipulating only time for input value\n      if (_this.props.showTimeSelectOnly && _this.props.selected && date && !isSameDay(date, _this.props.selected)) {\n        date = (0,date_fns_set__WEBPACK_IMPORTED_MODULE_64__.set)(_this.props.selected, {\n          hours: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(date),\n          minutes: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(date),\n          seconds: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(date)\n        });\n      }\n      if (date || !event.target.value) {\n        _this.setSelected(date, event, true);\n      }\n    });\n    _defineProperty(_this, \"handleSelect\", function (date, event, monthSelectedIn) {\n      if (_this.props.shouldCloseOnSelect && !_this.props.showTimeSelect) {\n        // Preventing onFocus event to fix issue\n        // https://github.com/Hacker0x01/react-datepicker/issues/628\n        _this.sendFocusBackToInput();\n      }\n      if (_this.props.onChangeRaw) {\n        _this.props.onChangeRaw(event);\n      }\n      _this.setSelected(date, event, false, monthSelectedIn);\n      if (_this.props.showDateSelect) {\n        _this.setState({\n          isRenderAriaLiveMessage: true\n        });\n      }\n      if (!_this.props.shouldCloseOnSelect || _this.props.showTimeSelect) {\n        _this.setPreSelection(date);\n      } else if (!_this.props.inline) {\n        if (!_this.props.selectsRange) {\n          _this.setOpen(false);\n        }\n        var _this$props = _this.props,\n          startDate = _this$props.startDate,\n          endDate = _this$props.endDate;\n        if (startDate && !endDate && (_this.props.swapRange || !isDateBefore(date, startDate))) {\n          _this.setOpen(false);\n        }\n      }\n    });\n    _defineProperty(_this, \"setSelected\", function (date, event, keepInput, monthSelectedIn) {\n      var changedDate = date;\n      if (_this.props.showYearPicker) {\n        if (changedDate !== null && isYearDisabled((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(changedDate), _this.props)) {\n          return;\n        }\n      } else if (_this.props.showMonthYearPicker) {\n        if (changedDate !== null && isMonthDisabled(changedDate, _this.props)) {\n          return;\n        }\n      } else {\n        if (changedDate !== null && isDayDisabled(changedDate, _this.props)) {\n          return;\n        }\n      }\n      var _this$props2 = _this.props,\n        onChange = _this$props2.onChange,\n        selectsRange = _this$props2.selectsRange,\n        startDate = _this$props2.startDate,\n        endDate = _this$props2.endDate,\n        selectsMultiple = _this$props2.selectsMultiple,\n        selectedDates = _this$props2.selectedDates,\n        minTime = _this$props2.minTime,\n        swapRange = _this$props2.swapRange;\n      if (!isEqual(_this.props.selected, changedDate) || _this.props.allowSameDay || selectsRange || selectsMultiple) {\n        if (changedDate !== null) {\n          if (_this.props.selected && (!keepInput || !_this.props.showTimeSelect && !_this.props.showTimeSelectOnly && !_this.props.showTimeInput)) {\n            changedDate = setTime(changedDate, {\n              hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(_this.props.selected),\n              minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(_this.props.selected),\n              second: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(_this.props.selected)\n            });\n          }\n\n          // If minTime is present then set the time to minTime\n          if (!keepInput && (_this.props.showTimeSelect || _this.props.showTimeSelectOnly)) {\n            if (minTime) {\n              changedDate = setTime(changedDate, {\n                hour: minTime.getHours(),\n                minute: minTime.getMinutes(),\n                second: minTime.getSeconds()\n              });\n            }\n          }\n          if (!_this.props.inline) {\n            _this.setState({\n              preSelection: changedDate\n            });\n          }\n          if (!_this.props.focusSelectedMonth) {\n            _this.setState({\n              monthSelectedIn: monthSelectedIn\n            });\n          }\n        }\n        if (selectsRange) {\n          var noRanges = !startDate && !endDate;\n          var hasStartRange = startDate && !endDate;\n          var isRangeFilled = startDate && endDate;\n          if (noRanges) {\n            onChange([changedDate, null], event);\n          } else if (hasStartRange) {\n            if (changedDate === null) {\n              onChange([null, null], event);\n            } else if (isDateBefore(changedDate, startDate)) {\n              if (swapRange) {\n                onChange([changedDate, startDate], event);\n              } else {\n                onChange([changedDate, null], event);\n              }\n            } else {\n              onChange([startDate, changedDate], event);\n            }\n          }\n          if (isRangeFilled) {\n            onChange([changedDate, null], event);\n          }\n        } else if (selectsMultiple) {\n          if (!(selectedDates !== null && selectedDates !== void 0 && selectedDates.length)) {\n            onChange([changedDate], event);\n          } else {\n            var isChangedDateAlreadySelected = selectedDates.some(function (selectedDate) {\n              return isSameDay(selectedDate, changedDate);\n            });\n            if (isChangedDateAlreadySelected) {\n              var nextDates = selectedDates.filter(function (selectedDate) {\n                return !isSameDay(selectedDate, changedDate);\n              });\n              onChange(nextDates, event);\n            } else {\n              onChange([].concat(_toConsumableArray(selectedDates), [changedDate]), event);\n            }\n          }\n        } else {\n          onChange(changedDate, event);\n        }\n      }\n      if (!keepInput) {\n        _this.props.onSelect(changedDate, event);\n        _this.setState({\n          inputValue: null\n        });\n      }\n    });\n    // When checking preSelection via min/maxDate, times need to be manipulated via startOfDay/endOfDay\n    _defineProperty(_this, \"setPreSelection\", function (date) {\n      var hasMinDate = typeof _this.props.minDate !== \"undefined\";\n      var hasMaxDate = typeof _this.props.maxDate !== \"undefined\";\n      var isValidDateSelection = true;\n      if (date) {\n        var dateStartOfDay = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\n        if (hasMinDate && hasMaxDate) {\n          // isDayInRange uses startOfDay internally, so not necessary to manipulate times here\n          isValidDateSelection = isDayInRange(date, _this.props.minDate, _this.props.maxDate);\n        } else if (hasMinDate) {\n          var minDateStartOfDay = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(_this.props.minDate);\n          isValidDateSelection = (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(date, minDateStartOfDay) || isEqual(dateStartOfDay, minDateStartOfDay);\n        } else if (hasMaxDate) {\n          var maxDateEndOfDay = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_26__.endOfDay)(_this.props.maxDate);\n          isValidDateSelection = (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, maxDateEndOfDay) || isEqual(dateStartOfDay, maxDateEndOfDay);\n        }\n      }\n      if (isValidDateSelection) {\n        _this.setState({\n          preSelection: date\n        });\n      }\n    });\n    _defineProperty(_this, \"toggleCalendar\", function () {\n      _this.setOpen(!_this.state.open);\n    });\n    _defineProperty(_this, \"handleTimeChange\", function (time) {\n      var selected = _this.props.selected ? _this.props.selected : _this.getPreSelection();\n      var changedDate = _this.props.selected ? time : setTime(selected, {\n        hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time),\n        minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time)\n      });\n      _this.setState({\n        preSelection: changedDate\n      });\n      _this.props.onChange(changedDate);\n      if (_this.props.shouldCloseOnSelect) {\n        _this.sendFocusBackToInput();\n        _this.setOpen(false);\n      }\n      if (_this.props.showTimeInput) {\n        _this.setOpen(true);\n      }\n      if (_this.props.showTimeSelectOnly || _this.props.showTimeSelect) {\n        _this.setState({\n          isRenderAriaLiveMessage: true\n        });\n      }\n      _this.setState({\n        inputValue: null\n      });\n    });\n    _defineProperty(_this, \"onInputClick\", function () {\n      if (!_this.props.disabled && !_this.props.readOnly) {\n        _this.setOpen(true);\n      }\n      _this.props.onInputClick();\n    });\n    _defineProperty(_this, \"onInputKeyDown\", function (event) {\n      _this.props.onKeyDown(event);\n      var eventKey = event.key;\n      if (!_this.state.open && !_this.props.inline && !_this.props.preventOpenOnFocus) {\n        if (eventKey === \"ArrowDown\" || eventKey === \"ArrowUp\" || eventKey === \"Enter\") {\n          _this.onInputClick();\n        }\n        return;\n      }\n\n      // if calendar is open, these keys will focus the selected item\n      if (_this.state.open) {\n        if (eventKey === \"ArrowDown\" || eventKey === \"ArrowUp\") {\n          event.preventDefault();\n          var selectorString = _this.props.showWeekPicker && _this.props.showWeekNumbers ? '.react-datepicker__week-number[tabindex=\"0\"]' : _this.props.showFullMonthYearPicker || _this.props.showMonthYearPicker ? '.react-datepicker__month-text[tabindex=\"0\"]' : '.react-datepicker__day[tabindex=\"0\"]';\n          var selectedItem = _this.calendar.componentNode && _this.calendar.componentNode.querySelector(selectorString);\n          selectedItem && selectedItem.focus({\n            preventScroll: true\n          });\n          return;\n        }\n        var copy = newDate(_this.state.preSelection);\n        if (eventKey === \"Enter\") {\n          event.preventDefault();\n          if (_this.inputOk() && _this.state.lastPreSelectChange === PRESELECT_CHANGE_VIA_NAVIGATE) {\n            _this.handleSelect(copy, event);\n            !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\n          } else {\n            _this.setOpen(false);\n          }\n        } else if (eventKey === \"Escape\") {\n          event.preventDefault();\n          _this.sendFocusBackToInput();\n          _this.setOpen(false);\n        } else if (eventKey === \"Tab\") {\n          _this.setOpen(false);\n        }\n        if (!_this.inputOk()) {\n          _this.props.onInputError({\n            code: 1,\n            msg: INPUT_ERR_1\n          });\n        }\n      }\n    });\n    _defineProperty(_this, \"onPortalKeyDown\", function (event) {\n      var eventKey = event.key;\n      if (eventKey === \"Escape\") {\n        event.preventDefault();\n        _this.setState({\n          preventFocus: true\n        }, function () {\n          _this.setOpen(false);\n          setTimeout(function () {\n            _this.setFocus();\n            _this.setState({\n              preventFocus: false\n            });\n          });\n        });\n      }\n    });\n    // keyDown events passed down to day.jsx\n    _defineProperty(_this, \"onDayKeyDown\", function (event) {\n      _this.props.onKeyDown(event);\n      var eventKey = event.key;\n      var isShiftKeyActive = event.shiftKey;\n      var copy = newDate(_this.state.preSelection);\n      if (eventKey === \"Enter\") {\n        event.preventDefault();\n        _this.handleSelect(copy, event);\n        !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\n      } else if (eventKey === \"Escape\") {\n        event.preventDefault();\n        _this.setOpen(false);\n        if (!_this.inputOk()) {\n          _this.props.onInputError({\n            code: 1,\n            msg: INPUT_ERR_1\n          });\n        }\n      } else if (!_this.props.disabledKeyboardNavigation) {\n        var newSelection;\n        switch (eventKey) {\n          case \"ArrowLeft\":\n            if (_this.props.showWeekPicker) {\n              newSelection = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__.subWeeks)(copy, 1);\n            } else {\n              newSelection = (0,date_fns_subDays__WEBPACK_IMPORTED_MODULE_66__.subDays)(copy, 1);\n            }\n            break;\n          case \"ArrowRight\":\n            if (_this.props.showWeekPicker) {\n              newSelection = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(copy, 1);\n            } else {\n              newSelection = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_58__.addDays)(copy, 1);\n            }\n            break;\n          case \"ArrowUp\":\n            newSelection = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__.subWeeks)(copy, 1);\n            break;\n          case \"ArrowDown\":\n            newSelection = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_59__.addWeeks)(copy, 1);\n            break;\n          case \"PageUp\":\n            newSelection = isShiftKeyActive ? (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(copy, 1) : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(copy, 1);\n            break;\n          case \"PageDown\":\n            newSelection = isShiftKeyActive ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(copy, 1) : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(copy, 1);\n            break;\n          case \"Home\":\n            newSelection = getStartOfWeek(copy, _this.props.locale, _this.props.calendarStartDay);\n            break;\n          case \"End\":\n            newSelection = getEndOfWeek(copy);\n            break;\n          default:\n            newSelection = null;\n            break;\n        }\n        if (!newSelection) {\n          if (_this.props.onInputError) {\n            _this.props.onInputError({\n              code: 1,\n              msg: INPUT_ERR_1\n            });\n          }\n          return;\n        }\n        event.preventDefault();\n        _this.setState({\n          lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE\n        });\n        if (_this.props.adjustDateOnChange) {\n          _this.setSelected(newSelection);\n        }\n        _this.setPreSelection(newSelection);\n        // need to figure out whether month has changed to focus day in inline version\n        if (_this.props.inline) {\n          var prevMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(copy);\n          var newMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newSelection);\n          var prevYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(copy);\n          var newYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newSelection);\n          if (prevMonth !== newMonth || prevYear !== newYear) {\n            // month has changed\n            _this.setState({\n              shouldFocusDayInline: true\n            });\n          } else {\n            // month hasn't changed\n            _this.setState({\n              shouldFocusDayInline: false\n            });\n          }\n        }\n      }\n    });\n    // handle generic key down events in the popper that do not adjust or select dates\n    // ex: while focusing prev and next month buttons\n    _defineProperty(_this, \"onPopperKeyDown\", function (event) {\n      var eventKey = event.key;\n      if (eventKey === \"Escape\") {\n        event.preventDefault();\n        _this.sendFocusBackToInput();\n      }\n    });\n    _defineProperty(_this, \"onClearClick\", function (event) {\n      if (event) {\n        if (event.preventDefault) {\n          event.preventDefault();\n        }\n      }\n      _this.sendFocusBackToInput();\n      if (_this.props.selectsRange) {\n        _this.props.onChange([null, null], event);\n      } else {\n        _this.props.onChange(null, event);\n      }\n      _this.setState({\n        inputValue: null\n      });\n    });\n    _defineProperty(_this, \"clear\", function () {\n      _this.onClearClick();\n    });\n    _defineProperty(_this, \"onScroll\", function (event) {\n      if (typeof _this.props.closeOnScroll === \"boolean\" && _this.props.closeOnScroll) {\n        if (event.target === document || event.target === document.documentElement || event.target === document.body) {\n          _this.setOpen(false);\n        }\n      } else if (typeof _this.props.closeOnScroll === \"function\") {\n        if (_this.props.closeOnScroll(event)) {\n          _this.setOpen(false);\n        }\n      }\n    });\n    _defineProperty(_this, \"renderCalendar\", function () {\n      if (!_this.props.inline && !_this.isCalendarOpen()) {\n        return null;\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(WrappedCalendar, {\n        ref: function ref(elem) {\n          _this.calendar = elem;\n        },\n        locale: _this.props.locale,\n        calendarStartDay: _this.props.calendarStartDay,\n        chooseDayAriaLabelPrefix: _this.props.chooseDayAriaLabelPrefix,\n        disabledDayAriaLabelPrefix: _this.props.disabledDayAriaLabelPrefix,\n        weekAriaLabelPrefix: _this.props.weekAriaLabelPrefix,\n        monthAriaLabelPrefix: _this.props.monthAriaLabelPrefix,\n        adjustDateOnChange: _this.props.adjustDateOnChange,\n        setOpen: _this.setOpen,\n        shouldCloseOnSelect: _this.props.shouldCloseOnSelect,\n        dateFormat: _this.props.dateFormatCalendar,\n        useWeekdaysShort: _this.props.useWeekdaysShort,\n        formatWeekDay: _this.props.formatWeekDay,\n        dropdownMode: _this.props.dropdownMode,\n        selected: _this.props.selected,\n        preSelection: _this.state.preSelection,\n        onSelect: _this.handleSelect,\n        onWeekSelect: _this.props.onWeekSelect,\n        openToDate: _this.props.openToDate,\n        minDate: _this.props.minDate,\n        maxDate: _this.props.maxDate,\n        selectsStart: _this.props.selectsStart,\n        selectsEnd: _this.props.selectsEnd,\n        selectsRange: _this.props.selectsRange,\n        selectsMultiple: _this.props.selectsMultiple,\n        selectedDates: _this.props.selectedDates,\n        startDate: _this.props.startDate,\n        endDate: _this.props.endDate,\n        excludeDates: _this.props.excludeDates,\n        excludeDateIntervals: _this.props.excludeDateIntervals,\n        filterDate: _this.props.filterDate,\n        onClickOutside: _this.handleCalendarClickOutside,\n        formatWeekNumber: _this.props.formatWeekNumber,\n        highlightDates: _this.state.highlightDates,\n        holidays: getHolidaysMap(_this.modifyHolidays()),\n        includeDates: _this.props.includeDates,\n        includeDateIntervals: _this.props.includeDateIntervals,\n        includeTimes: _this.props.includeTimes,\n        injectTimes: _this.props.injectTimes,\n        inline: _this.props.inline,\n        shouldFocusDayInline: _this.state.shouldFocusDayInline,\n        peekNextMonth: _this.props.peekNextMonth,\n        showMonthDropdown: _this.props.showMonthDropdown,\n        showPreviousMonths: _this.props.showPreviousMonths,\n        useShortMonthInDropdown: _this.props.useShortMonthInDropdown,\n        showMonthYearDropdown: _this.props.showMonthYearDropdown,\n        showWeekNumbers: _this.props.showWeekNumbers,\n        showYearDropdown: _this.props.showYearDropdown,\n        withPortal: _this.props.withPortal,\n        forceShowMonthNavigation: _this.props.forceShowMonthNavigation,\n        showDisabledMonthNavigation: _this.props.showDisabledMonthNavigation,\n        scrollableYearDropdown: _this.props.scrollableYearDropdown,\n        scrollableMonthYearDropdown: _this.props.scrollableMonthYearDropdown,\n        todayButton: _this.props.todayButton,\n        weekLabel: _this.props.weekLabel,\n        outsideClickIgnoreClass: outsideClickIgnoreClass,\n        fixedHeight: _this.props.fixedHeight,\n        monthsShown: _this.props.monthsShown,\n        monthSelectedIn: _this.state.monthSelectedIn,\n        onDropdownFocus: _this.handleDropdownFocus,\n        onMonthChange: _this.props.onMonthChange,\n        onYearChange: _this.props.onYearChange,\n        dayClassName: _this.props.dayClassName,\n        weekDayClassName: _this.props.weekDayClassName,\n        monthClassName: _this.props.monthClassName,\n        timeClassName: _this.props.timeClassName,\n        showDateSelect: _this.props.showDateSelect,\n        showTimeSelect: _this.props.showTimeSelect,\n        showTimeSelectOnly: _this.props.showTimeSelectOnly,\n        onTimeChange: _this.handleTimeChange,\n        timeFormat: _this.props.timeFormat,\n        timeIntervals: _this.props.timeIntervals,\n        minTime: _this.props.minTime,\n        maxTime: _this.props.maxTime,\n        excludeTimes: _this.props.excludeTimes,\n        filterTime: _this.props.filterTime,\n        timeCaption: _this.props.timeCaption,\n        className: _this.props.calendarClassName,\n        container: _this.props.calendarContainer,\n        yearItemNumber: _this.props.yearItemNumber,\n        yearDropdownItemNumber: _this.props.yearDropdownItemNumber,\n        previousMonthAriaLabel: _this.props.previousMonthAriaLabel,\n        previousMonthButtonLabel: _this.props.previousMonthButtonLabel,\n        nextMonthAriaLabel: _this.props.nextMonthAriaLabel,\n        nextMonthButtonLabel: _this.props.nextMonthButtonLabel,\n        previousYearAriaLabel: _this.props.previousYearAriaLabel,\n        previousYearButtonLabel: _this.props.previousYearButtonLabel,\n        nextYearAriaLabel: _this.props.nextYearAriaLabel,\n        nextYearButtonLabel: _this.props.nextYearButtonLabel,\n        timeInputLabel: _this.props.timeInputLabel,\n        disabledKeyboardNavigation: _this.props.disabledKeyboardNavigation,\n        renderCustomHeader: _this.props.renderCustomHeader,\n        popperProps: _this.props.popperProps,\n        renderDayContents: _this.props.renderDayContents,\n        renderMonthContent: _this.props.renderMonthContent,\n        renderQuarterContent: _this.props.renderQuarterContent,\n        renderYearContent: _this.props.renderYearContent,\n        onDayMouseEnter: _this.props.onDayMouseEnter,\n        onMonthMouseLeave: _this.props.onMonthMouseLeave,\n        onYearMouseEnter: _this.props.onYearMouseEnter,\n        onYearMouseLeave: _this.props.onYearMouseLeave,\n        selectsDisabledDaysInRange: _this.props.selectsDisabledDaysInRange,\n        showTimeInput: _this.props.showTimeInput,\n        showMonthYearPicker: _this.props.showMonthYearPicker,\n        showFullMonthYearPicker: _this.props.showFullMonthYearPicker,\n        showTwoColumnMonthYearPicker: _this.props.showTwoColumnMonthYearPicker,\n        showFourColumnMonthYearPicker: _this.props.showFourColumnMonthYearPicker,\n        showYearPicker: _this.props.showYearPicker,\n        showQuarterYearPicker: _this.props.showQuarterYearPicker,\n        showWeekPicker: _this.props.showWeekPicker,\n        excludeScrollbar: _this.props.excludeScrollbar,\n        handleOnKeyDown: _this.props.onKeyDown,\n        handleOnDayKeyDown: _this.onDayKeyDown,\n        isInputFocused: _this.state.focused,\n        customTimeInput: _this.props.customTimeInput,\n        setPreSelection: _this.setPreSelection,\n        usePointerEvent: _this.props.usePointerEvent,\n        yearClassName: _this.props.yearClassName\n      }, _this.props.children);\n    });\n    _defineProperty(_this, \"renderAriaLiveRegion\", function () {\n      var _this$props3 = _this.props,\n        dateFormat = _this$props3.dateFormat,\n        locale = _this$props3.locale;\n      var isContainsTime = _this.props.showTimeInput || _this.props.showTimeSelect;\n      var longDateFormat = isContainsTime ? \"PPPPp\" : \"PPPP\";\n      var ariaLiveMessage;\n      if (_this.props.selectsRange) {\n        ariaLiveMessage = \"Selected start date: \".concat(safeDateFormat(_this.props.startDate, {\n          dateFormat: longDateFormat,\n          locale: locale\n        }), \". \").concat(_this.props.endDate ? \"End date: \" + safeDateFormat(_this.props.endDate, {\n          dateFormat: longDateFormat,\n          locale: locale\n        }) : \"\");\n      } else {\n        if (_this.props.showTimeSelectOnly) {\n          ariaLiveMessage = \"Selected time: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: dateFormat,\n            locale: locale\n          }));\n        } else if (_this.props.showYearPicker) {\n          ariaLiveMessage = \"Selected year: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: \"yyyy\",\n            locale: locale\n          }));\n        } else if (_this.props.showMonthYearPicker) {\n          ariaLiveMessage = \"Selected month: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: \"MMMM yyyy\",\n            locale: locale\n          }));\n        } else if (_this.props.showQuarterYearPicker) {\n          ariaLiveMessage = \"Selected quarter: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: \"yyyy, QQQ\",\n            locale: locale\n          }));\n        } else {\n          ariaLiveMessage = \"Selected date: \".concat(safeDateFormat(_this.props.selected, {\n            dateFormat: longDateFormat,\n            locale: locale\n          }));\n        }\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        role: \"alert\",\n        \"aria-live\": \"polite\",\n        className: \"react-datepicker__aria-live\"\n      }, ariaLiveMessage);\n    });\n    _defineProperty(_this, \"renderDateInput\", function () {\n      var _React$cloneElement;\n      var className = (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(_this.props.className, _defineProperty({}, outsideClickIgnoreClass, _this.state.open));\n      var customInput = _this.props.customInput || /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n        type: \"text\"\n      });\n      var customInputRef = _this.props.customInputRef || \"ref\";\n      var inputValue = typeof _this.props.value === \"string\" ? _this.props.value : typeof _this.state.inputValue === \"string\" ? _this.state.inputValue : _this.props.selectsRange ? safeDateRangeFormat(_this.props.startDate, _this.props.endDate, _this.props) : _this.props.selectsMultiple ? safeMultipleDatesFormat(_this.props.selectedDates, _this.props) : safeDateFormat(_this.props.selected, _this.props);\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(customInput, (_React$cloneElement = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_React$cloneElement, customInputRef, function (input) {\n        _this.input = input;\n      }), \"value\", inputValue), \"onBlur\", _this.handleBlur), \"onChange\", _this.handleChange), \"onClick\", _this.onInputClick), \"onFocus\", _this.handleFocus), \"onKeyDown\", _this.onInputKeyDown), \"id\", _this.props.id), \"name\", _this.props.name), \"form\", _this.props.form), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_React$cloneElement, \"autoFocus\", _this.props.autoFocus), \"placeholder\", _this.props.placeholderText), \"disabled\", _this.props.disabled), \"autoComplete\", _this.props.autoComplete), \"className\", (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(customInput.props.className, className)), \"title\", _this.props.title), \"readOnly\", _this.props.readOnly), \"required\", _this.props.required), \"tabIndex\", _this.props.tabIndex), \"aria-describedby\", _this.props.ariaDescribedBy), _defineProperty(_defineProperty(_defineProperty(_React$cloneElement, \"aria-invalid\", _this.props.ariaInvalid), \"aria-labelledby\", _this.props.ariaLabelledBy), \"aria-required\", _this.props.ariaRequired)));\n    });\n    _defineProperty(_this, \"renderClearButton\", function () {\n      var _this$props4 = _this.props,\n        isClearable = _this$props4.isClearable,\n        disabled = _this$props4.disabled,\n        selected = _this$props4.selected,\n        startDate = _this$props4.startDate,\n        endDate = _this$props4.endDate,\n        clearButtonTitle = _this$props4.clearButtonTitle,\n        _this$props4$clearBut = _this$props4.clearButtonClassName,\n        clearButtonClassName = _this$props4$clearBut === void 0 ? \"\" : _this$props4$clearBut,\n        _this$props4$ariaLabe = _this$props4.ariaLabelClose,\n        ariaLabelClose = _this$props4$ariaLabe === void 0 ? \"Close\" : _this$props4$ariaLabe,\n        selectedDates = _this$props4.selectedDates;\n      if (isClearable && (selected != null || startDate != null || endDate != null || selectedDates !== null && selectedDates !== void 0 && selectedDates.length)) {\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n          type: \"button\",\n          className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(\"react-datepicker__close-icon\", clearButtonClassName, {\n            \"react-datepicker__close-icon--disabled\": disabled\n          }),\n          disabled: disabled,\n          \"aria-label\": ariaLabelClose,\n          onClick: _this.onClearClick,\n          title: clearButtonTitle,\n          tabIndex: -1\n        });\n      } else {\n        return null;\n      }\n    });\n    _this.state = _this.calcInitialState();\n    _this.preventFocusTimeout = null;\n    return _this;\n  }\n  _inherits(DatePicker, _React$Component);\n  return _createClass(DatePicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"scroll\", this.onScroll, true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.inline && hasPreSelectionChanged(prevProps.selected, this.props.selected)) {\n        this.setPreSelection(this.props.selected);\n      }\n      if (this.state.monthSelectedIn !== undefined && prevProps.monthsShown !== this.props.monthsShown) {\n        this.setState({\n          monthSelectedIn: 0\n        });\n      }\n      if (prevProps.highlightDates !== this.props.highlightDates) {\n        this.setState({\n          highlightDates: getHightLightDaysMap(this.props.highlightDates)\n        });\n      }\n      if (!prevState.focused && !isEqual(prevProps.selected, this.props.selected)) {\n        this.setState({\n          inputValue: null\n        });\n      }\n      if (prevState.open !== this.state.open) {\n        if (prevState.open === false && this.state.open === true) {\n          this.props.onCalendarOpen();\n        }\n        if (prevState.open === true && this.state.open === false) {\n          this.props.onCalendarClose();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearPreventFocusTimeout();\n      window.removeEventListener(\"scroll\", this.onScroll, true);\n    }\n  }, {\n    key: \"renderInputContainer\",\n    value: function renderInputContainer() {\n      var _this$props5 = this.props,\n        showIcon = _this$props5.showIcon,\n        icon = _this$props5.icon,\n        calendarIconClassname = _this$props5.calendarIconClassname,\n        toggleCalendarOnIconClick = _this$props5.toggleCalendarOnIconClick;\n      var open = this.state.open;\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"react-datepicker__input-container\".concat(showIcon ? \" react-datepicker__view-calendar-icon\" : \"\")\n      }, showIcon && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CalendarIcon$1, _extends({\n        icon: icon,\n        className: \"\".concat(calendarIconClassname, \" \").concat(open && \"react-datepicker-ignore-onclickoutside\")\n      }, toggleCalendarOnIconClick ? {\n        onClick: this.toggleCalendar\n      } : null)), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var calendar = this.renderCalendar();\n      if (this.props.inline) return calendar;\n      if (this.props.withPortal) {\n        var portalContainer = this.state.open ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TabLoop, {\n          enableTabLoop: this.props.enableTabLoop\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n          className: \"react-datepicker__portal\",\n          tabIndex: -1,\n          onKeyDown: this.onPortalKeyDown\n        }, calendar)) : null;\n        if (this.state.open && this.props.portalId) {\n          portalContainer = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Portal, {\n            portalId: this.props.portalId,\n            portalHost: this.props.portalHost\n          }, portalContainer);\n        }\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, this.renderInputContainer(), portalContainer);\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PopperComponent$1, {\n        className: this.props.popperClassName,\n        wrapperClassName: this.props.wrapperClassName,\n        hidePopper: !this.isCalendarOpen(),\n        portalId: this.props.portalId,\n        portalHost: this.props.portalHost,\n        popperModifiers: this.props.popperModifiers,\n        targetComponent: this.renderInputContainer(),\n        popperContainer: this.props.popperContainer,\n        popperComponent: calendar,\n        popperPlacement: this.props.popperPlacement,\n        popperProps: this.props.popperProps,\n        popperOnKeyDown: this.onPopperKeyDown,\n        enableTabLoop: this.props.enableTabLoop,\n        showArrow: this.props.showPopperArrow\n      });\n    }\n  }], [{\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        allowSameDay: false,\n        dateFormat: \"MM/dd/yyyy\",\n        dateFormatCalendar: \"LLLL yyyy\",\n        onChange: function onChange() {},\n        disabled: false,\n        disabledKeyboardNavigation: false,\n        dropdownMode: \"scroll\",\n        onFocus: function onFocus() {},\n        onBlur: function onBlur() {},\n        onKeyDown: function onKeyDown() {},\n        onInputClick: function onInputClick() {},\n        onSelect: function onSelect() {},\n        onClickOutside: function onClickOutside() {},\n        onMonthChange: function onMonthChange() {},\n        onCalendarOpen: function onCalendarOpen() {},\n        onCalendarClose: function onCalendarClose() {},\n        preventOpenOnFocus: false,\n        onYearChange: function onYearChange() {},\n        onInputError: function onInputError() {},\n        monthsShown: 1,\n        readOnly: false,\n        withPortal: false,\n        selectsDisabledDaysInRange: false,\n        shouldCloseOnSelect: true,\n        showTimeSelect: false,\n        showTimeInput: false,\n        showPreviousMonths: false,\n        showMonthYearPicker: false,\n        showFullMonthYearPicker: false,\n        showTwoColumnMonthYearPicker: false,\n        showFourColumnMonthYearPicker: false,\n        showYearPicker: false,\n        showQuarterYearPicker: false,\n        showWeekPicker: false,\n        strictParsing: false,\n        swapRange: false,\n        timeIntervals: 30,\n        timeCaption: \"Time\",\n        previousMonthAriaLabel: \"Previous Month\",\n        previousMonthButtonLabel: \"Previous Month\",\n        nextMonthAriaLabel: \"Next Month\",\n        nextMonthButtonLabel: \"Next Month\",\n        previousYearAriaLabel: \"Previous Year\",\n        previousYearButtonLabel: \"Previous Year\",\n        nextYearAriaLabel: \"Next Year\",\n        nextYearButtonLabel: \"Next Year\",\n        timeInputLabel: \"Time\",\n        enableTabLoop: true,\n        yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER,\n        focusSelectedMonth: false,\n        showPopperArrow: true,\n        excludeScrollbar: true,\n        customTimeInput: null,\n        calendarStartDay: undefined,\n        toggleCalendarOnIconClick: false,\n        usePointerEvent: false\n      };\n    }\n  }]);\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar PRESELECT_CHANGE_VIA_INPUT = \"input\";\nvar PRESELECT_CHANGE_VIA_NAVIGATE = \"navigate\";\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRlX3V0aWxzLmpzIiwiLi4vLi4vc3JjL3llYXJfZHJvcGRvd25fb3B0aW9ucy5qc3giLCIuLi8uLi9zcmMveWVhcl9kcm9wZG93bi5qc3giLCIuLi8uLi9zcmMvbW9udGhfZHJvcGRvd25fb3B0aW9ucy5qc3giLCIuLi8uLi9zcmMvbW9udGhfZHJvcGRvd24uanN4IiwiLi4vLi4vc3JjL21vbnRoX3llYXJfZHJvcGRvd25fb3B0aW9ucy5qc3giLCIuLi8uLi9zcmMvbW9udGhfeWVhcl9kcm9wZG93bi5qc3giLCIuLi8uLi9zcmMvZGF5LmpzeCIsIi4uLy4uL3NyYy93ZWVrX251bWJlci5qc3giLCIuLi8uLi9zcmMvd2Vlay5qc3giLCIuLi8uLi9zcmMvbW9udGguanN4IiwiLi4vLi4vc3JjL3RpbWUuanN4IiwiLi4vLi4vc3JjL3llYXIuanN4IiwiLi4vLi4vc3JjL2lucHV0VGltZS5qc3giLCIuLi8uLi9zcmMvY2FsZW5kYXJfY29udGFpbmVyLmpzeCIsIi4uLy4uL3NyYy9jYWxlbmRhci5qc3giLCIuLi8uLi9zcmMvY2FsZW5kYXJfaWNvbi5qc3giLCIuLi8uLi9zcmMvcG9ydGFsLmpzeCIsIi4uLy4uL3NyYy90YWJfbG9vcC5qc3giLCIuLi8uLi9zcmMvd2l0aF9mbG9hdGluZy5qc3giLCIuLi8uLi9zcmMvcG9wcGVyX2NvbXBvbmVudC5qc3giLCIuLi8uLi9zcmMvaW5kZXguanN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGF0ZSB9IGZyb20gXCJkYXRlLWZucy9pc0RhdGVcIjtcbmltcG9ydCB7IGlzVmFsaWQgYXMgaXNWYWxpZERhdGUgfSBmcm9tIFwiZGF0ZS1mbnMvaXNWYWxpZFwiO1xuaW1wb3J0IHsgZm9ybWF0LCBsb25nRm9ybWF0dGVycyB9IGZyb20gXCJkYXRlLWZucy9mb3JtYXRcIjtcbmltcG9ydCB7IGFkZE1pbnV0ZXMgfSBmcm9tIFwiZGF0ZS1mbnMvYWRkTWludXRlc1wiO1xuaW1wb3J0IHsgYWRkSG91cnMgfSBmcm9tIFwiZGF0ZS1mbnMvYWRkSG91cnNcIjtcbmltcG9ydCB7IGFkZERheXMgfSBmcm9tIFwiZGF0ZS1mbnMvYWRkRGF5c1wiO1xuaW1wb3J0IHsgYWRkV2Vla3MgfSBmcm9tIFwiZGF0ZS1mbnMvYWRkV2Vla3NcIjtcbmltcG9ydCB7IGFkZE1vbnRocyB9IGZyb20gXCJkYXRlLWZucy9hZGRNb250aHNcIjtcbmltcG9ydCB7IGFkZFF1YXJ0ZXJzIH0gZnJvbSBcImRhdGUtZm5zL2FkZFF1YXJ0ZXJzXCI7XG5pbXBvcnQgeyBhZGRZZWFycyB9IGZyb20gXCJkYXRlLWZucy9hZGRZZWFyc1wiO1xuaW1wb3J0IHsgc3ViRGF5cyB9IGZyb20gXCJkYXRlLWZucy9zdWJEYXlzXCI7XG5pbXBvcnQgeyBzdWJXZWVrcyB9IGZyb20gXCJkYXRlLWZucy9zdWJXZWVrc1wiO1xuaW1wb3J0IHsgc3ViTW9udGhzIH0gZnJvbSBcImRhdGUtZm5zL3N1Yk1vbnRoc1wiO1xuaW1wb3J0IHsgc3ViUXVhcnRlcnMgfSBmcm9tIFwiZGF0ZS1mbnMvc3ViUXVhcnRlcnNcIjtcbmltcG9ydCB7IHN1YlllYXJzIH0gZnJvbSBcImRhdGUtZm5zL3N1YlllYXJzXCI7XG5pbXBvcnQgeyBnZXRTZWNvbmRzIH0gZnJvbSBcImRhdGUtZm5zL2dldFNlY29uZHNcIjtcbmltcG9ydCB7IGdldE1pbnV0ZXMgfSBmcm9tIFwiZGF0ZS1mbnMvZ2V0TWludXRlc1wiO1xuaW1wb3J0IHsgZ2V0SG91cnMgfSBmcm9tIFwiZGF0ZS1mbnMvZ2V0SG91cnNcIjtcbmltcG9ydCB7IGdldERheSB9IGZyb20gXCJkYXRlLWZucy9nZXREYXlcIjtcbmltcG9ydCB7IGdldERhdGUgfSBmcm9tIFwiZGF0ZS1mbnMvZ2V0RGF0ZVwiO1xuaW1wb3J0IHsgZ2V0SVNPV2VlayB9IGZyb20gXCJkYXRlLWZucy9nZXRJU09XZWVrXCI7XG5pbXBvcnQgeyBnZXRNb250aCB9IGZyb20gXCJkYXRlLWZucy9nZXRNb250aFwiO1xuaW1wb3J0IHsgZ2V0UXVhcnRlciB9IGZyb20gXCJkYXRlLWZucy9nZXRRdWFydGVyXCI7XG5pbXBvcnQgeyBnZXRZZWFyIH0gZnJvbSBcImRhdGUtZm5zL2dldFllYXJcIjtcbmltcG9ydCB7IGdldFRpbWUgfSBmcm9tIFwiZGF0ZS1mbnMvZ2V0VGltZVwiO1xuaW1wb3J0IHsgc2V0U2Vjb25kcyB9IGZyb20gXCJkYXRlLWZucy9zZXRTZWNvbmRzXCI7XG5pbXBvcnQgeyBzZXRNaW51dGVzIH0gZnJvbSBcImRhdGUtZm5zL3NldE1pbnV0ZXNcIjtcbmltcG9ydCB7IHNldEhvdXJzIH0gZnJvbSBcImRhdGUtZm5zL3NldEhvdXJzXCI7XG5pbXBvcnQgeyBzZXRNb250aCB9IGZyb20gXCJkYXRlLWZucy9zZXRNb250aFwiO1xuaW1wb3J0IHsgc2V0UXVhcnRlciB9IGZyb20gXCJkYXRlLWZucy9zZXRRdWFydGVyXCI7XG5pbXBvcnQgeyBzZXRZZWFyIH0gZnJvbSBcImRhdGUtZm5zL3NldFllYXJcIjtcbmltcG9ydCB7IG1pbiB9IGZyb20gXCJkYXRlLWZucy9taW5cIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCJkYXRlLWZucy9tYXhcIjtcbmltcG9ydCB7IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyB9IGZyb20gXCJkYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXNcIjtcbmltcG9ydCB7IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzIH0gZnJvbSBcImRhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzXCI7XG5pbXBvcnQgeyBkaWZmZXJlbmNlSW5DYWxlbmRhclllYXJzIH0gZnJvbSBcImRhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyWWVhcnNcIjtcbmltcG9ydCB7IGRpZmZlcmVuY2VJbkNhbGVuZGFyUXVhcnRlcnMgfSBmcm9tIFwiZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJRdWFydGVyc1wiO1xuaW1wb3J0IHsgc3RhcnRPZkRheSB9IGZyb20gXCJkYXRlLWZucy9zdGFydE9mRGF5XCI7XG5pbXBvcnQgeyBzdGFydE9mV2VlayB9IGZyb20gXCJkYXRlLWZucy9zdGFydE9mV2Vla1wiO1xuaW1wb3J0IHsgc3RhcnRPZk1vbnRoIH0gZnJvbSBcImRhdGUtZm5zL3N0YXJ0T2ZNb250aFwiO1xuaW1wb3J0IHsgc3RhcnRPZlF1YXJ0ZXIgfSBmcm9tIFwiZGF0ZS1mbnMvc3RhcnRPZlF1YXJ0ZXJcIjtcbmltcG9ydCB7IHN0YXJ0T2ZZZWFyIH0gZnJvbSBcImRhdGUtZm5zL3N0YXJ0T2ZZZWFyXCI7XG5pbXBvcnQgeyBlbmRPZkRheSB9IGZyb20gXCJkYXRlLWZucy9lbmRPZkRheVwiO1xuaW1wb3J0IHsgZW5kT2ZXZWVrIH0gZnJvbSBcImRhdGUtZm5zL2VuZE9mV2Vla1wiO1xuaW1wb3J0IHsgZW5kT2ZNb250aCB9IGZyb20gXCJkYXRlLWZucy9lbmRPZk1vbnRoXCI7XG5pbXBvcnQgeyBlbmRPZlllYXIgfSBmcm9tIFwiZGF0ZS1mbnMvZW5kT2ZZZWFyXCI7XG5pbXBvcnQgeyBpc0VxdWFsIGFzIGRmSXNFcXVhbCB9IGZyb20gXCJkYXRlLWZucy9pc0VxdWFsXCI7XG5pbXBvcnQgeyBpc1NhbWVEYXkgYXMgZGZJc1NhbWVEYXkgfSBmcm9tIFwiZGF0ZS1mbnMvaXNTYW1lRGF5XCI7XG5pbXBvcnQgeyBpc1NhbWVNb250aCBhcyBkZklzU2FtZU1vbnRoIH0gZnJvbSBcImRhdGUtZm5zL2lzU2FtZU1vbnRoXCI7XG5pbXBvcnQgeyBpc1NhbWVZZWFyIGFzIGRmSXNTYW1lWWVhciB9IGZyb20gXCJkYXRlLWZucy9pc1NhbWVZZWFyXCI7XG5pbXBvcnQgeyBpc1NhbWVRdWFydGVyIGFzIGRmSXNTYW1lUXVhcnRlciB9IGZyb20gXCJkYXRlLWZucy9pc1NhbWVRdWFydGVyXCI7XG5pbXBvcnQgeyBpc0FmdGVyIH0gZnJvbSBcImRhdGUtZm5zL2lzQWZ0ZXJcIjtcbmltcG9ydCB7IGlzQmVmb3JlIH0gZnJvbSBcImRhdGUtZm5zL2lzQmVmb3JlXCI7XG5pbXBvcnQgeyBpc1dpdGhpbkludGVydmFsIH0gZnJvbSBcImRhdGUtZm5zL2lzV2l0aGluSW50ZXJ2YWxcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCJkYXRlLWZucy90b0RhdGVcIjtcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSBcImRhdGUtZm5zL3BhcnNlXCI7XG5pbXBvcnQgeyBwYXJzZUlTTyB9IGZyb20gXCJkYXRlLWZucy9wYXJzZUlTT1wiO1xuaW1wb3J0IHsgYWRkU2Vjb25kcyB9IGZyb20gXCJkYXRlLWZuc1wiO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9ZRUFSX0lURU1fTlVNQkVSID0gMTI7XG5cbi8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcbmNvbnN0IGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbi8vICoqIERhdGUgQ29uc3RydWN0b3JzICoqXG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdEYXRlKHZhbHVlKSB7XG4gIGNvbnN0IGQgPSB2YWx1ZVxuICAgID8gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nXG4gICAgICA/IHBhcnNlSVNPKHZhbHVlKVxuICAgICAgOiB0b0RhdGUodmFsdWUpXG4gICAgOiBuZXcgRGF0ZSgpO1xuICByZXR1cm4gaXNWYWxpZChkKSA/IGQgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEYXRlKHZhbHVlLCBkYXRlRm9ybWF0LCBsb2NhbGUsIHN0cmljdFBhcnNpbmcsIG1pbkRhdGUpIHtcbiAgbGV0IHBhcnNlZERhdGUgPSBudWxsO1xuICBsZXQgbG9jYWxlT2JqZWN0ID1cbiAgICBnZXRMb2NhbGVPYmplY3QobG9jYWxlKSB8fCBnZXRMb2NhbGVPYmplY3QoZ2V0RGVmYXVsdExvY2FsZSgpKTtcbiAgbGV0IHN0cmljdFBhcnNpbmdWYWx1ZU1hdGNoID0gdHJ1ZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0ZUZvcm1hdCkpIHtcbiAgICBkYXRlRm9ybWF0LmZvckVhY2goKGRmKSA9PiB7XG4gICAgICBsZXQgdHJ5UGFyc2VEYXRlID0gcGFyc2UodmFsdWUsIGRmLCBuZXcgRGF0ZSgpLCB7XG4gICAgICAgIGxvY2FsZTogbG9jYWxlT2JqZWN0LFxuICAgICAgICB1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM6IHRydWUsXG4gICAgICAgIHVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGlmIChzdHJpY3RQYXJzaW5nKSB7XG4gICAgICAgIHN0cmljdFBhcnNpbmdWYWx1ZU1hdGNoID1cbiAgICAgICAgICBpc1ZhbGlkKHRyeVBhcnNlRGF0ZSwgbWluRGF0ZSkgJiZcbiAgICAgICAgICB2YWx1ZSA9PT0gZm9ybWF0RGF0ZSh0cnlQYXJzZURhdGUsIGRmLCBsb2NhbGUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmFsaWQodHJ5UGFyc2VEYXRlLCBtaW5EYXRlKSAmJiBzdHJpY3RQYXJzaW5nVmFsdWVNYXRjaCkge1xuICAgICAgICBwYXJzZWREYXRlID0gdHJ5UGFyc2VEYXRlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWREYXRlO1xuICB9XG5cbiAgcGFyc2VkRGF0ZSA9IHBhcnNlKHZhbHVlLCBkYXRlRm9ybWF0LCBuZXcgRGF0ZSgpLCB7XG4gICAgbG9jYWxlOiBsb2NhbGVPYmplY3QsXG4gICAgdXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zOiB0cnVlLFxuICAgIHVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM6IHRydWUsXG4gIH0pO1xuXG4gIGlmIChzdHJpY3RQYXJzaW5nKSB7XG4gICAgc3RyaWN0UGFyc2luZ1ZhbHVlTWF0Y2ggPVxuICAgICAgaXNWYWxpZChwYXJzZWREYXRlKSAmJlxuICAgICAgdmFsdWUgPT09IGZvcm1hdERhdGUocGFyc2VkRGF0ZSwgZGF0ZUZvcm1hdCwgbG9jYWxlKTtcbiAgfSBlbHNlIGlmICghaXNWYWxpZChwYXJzZWREYXRlKSkge1xuICAgIGRhdGVGb3JtYXQgPSBkYXRlRm9ybWF0XG4gICAgICAubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApXG4gICAgICAubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCJwXCIgfHwgZmlyc3RDaGFyYWN0ZXIgPT09IFwiUFwiKSB7XG4gICAgICAgICAgY29uc3QgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgICAgICByZXR1cm4gbG9jYWxlT2JqZWN0XG4gICAgICAgICAgICA/IGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGVPYmplY3QuZm9ybWF0TG9uZylcbiAgICAgICAgICAgIDogZmlyc3RDaGFyYWN0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnN0cmluZztcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlwiKTtcblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBwYXJzZWREYXRlID0gcGFyc2UodmFsdWUsIGRhdGVGb3JtYXQuc2xpY2UoMCwgdmFsdWUubGVuZ3RoKSwgbmV3IERhdGUoKSwge1xuICAgICAgICB1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM6IHRydWUsXG4gICAgICAgIHVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzVmFsaWQocGFyc2VkRGF0ZSkpIHtcbiAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlzVmFsaWQocGFyc2VkRGF0ZSkgJiYgc3RyaWN0UGFyc2luZ1ZhbHVlTWF0Y2ggPyBwYXJzZWREYXRlIDogbnVsbDtcbn1cblxuLy8gKiogRGF0ZSBcIlJlZmxlY3Rpb25cIiAqKlxuXG5leHBvcnQgeyBpc0RhdGUgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWQoZGF0ZSwgbWluRGF0ZSkge1xuICBtaW5EYXRlID0gbWluRGF0ZSA/IG1pbkRhdGUgOiBuZXcgRGF0ZShcIjEvMS8xMDAwXCIpO1xuICByZXR1cm4gaXNWYWxpZERhdGUoZGF0ZSkgJiYgIWlzQmVmb3JlKGRhdGUsIG1pbkRhdGUpO1xufVxuXG4vLyAqKiBEYXRlIEZvcm1hdHRpbmcgKipcblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0U3RyLCBsb2NhbGUpIHtcbiAgaWYgKGxvY2FsZSA9PT0gXCJlblwiKSB7XG4gICAgcmV0dXJuIGZvcm1hdChkYXRlLCBmb3JtYXRTdHIsIHtcbiAgICAgIHVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VuczogdHJ1ZSxcbiAgICAgIHVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM6IHRydWUsXG4gICAgfSk7XG4gIH1cbiAgbGV0IGxvY2FsZU9iaiA9IGdldExvY2FsZU9iamVjdChsb2NhbGUpO1xuICBpZiAobG9jYWxlICYmICFsb2NhbGVPYmopIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgQSBsb2NhbGUgb2JqZWN0IHdhcyBub3QgZm91bmQgZm9yIHRoZSBwcm92aWRlZCBzdHJpbmcgW1wiJHtsb2NhbGV9XCJdLmAsXG4gICAgKTtcbiAgfVxuICBpZiAoXG4gICAgIWxvY2FsZU9iaiAmJlxuICAgICEhZ2V0RGVmYXVsdExvY2FsZSgpICYmXG4gICAgISFnZXRMb2NhbGVPYmplY3QoZ2V0RGVmYXVsdExvY2FsZSgpKVxuICApIHtcbiAgICBsb2NhbGVPYmogPSBnZXRMb2NhbGVPYmplY3QoZ2V0RGVmYXVsdExvY2FsZSgpKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0KGRhdGUsIGZvcm1hdFN0ciwge1xuICAgIGxvY2FsZTogbG9jYWxlT2JqID8gbG9jYWxlT2JqIDogbnVsbCxcbiAgICB1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM6IHRydWUsXG4gICAgdXNlQWRkaXRpb25hbERheU9mWWVhclRva2VuczogdHJ1ZSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYWZlRGF0ZUZvcm1hdChkYXRlLCB7IGRhdGVGb3JtYXQsIGxvY2FsZSB9KSB7XG4gIHJldHVybiAoXG4gICAgKGRhdGUgJiZcbiAgICAgIGZvcm1hdERhdGUoXG4gICAgICAgIGRhdGUsXG4gICAgICAgIEFycmF5LmlzQXJyYXkoZGF0ZUZvcm1hdCkgPyBkYXRlRm9ybWF0WzBdIDogZGF0ZUZvcm1hdCxcbiAgICAgICAgbG9jYWxlLFxuICAgICAgKSkgfHxcbiAgICBcIlwiXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYWZlRGF0ZVJhbmdlRm9ybWF0KHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgcHJvcHMpIHtcbiAgaWYgKCFzdGFydERhdGUpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIGNvbnN0IGZvcm1hdHRlZFN0YXJ0RGF0ZSA9IHNhZmVEYXRlRm9ybWF0KHN0YXJ0RGF0ZSwgcHJvcHMpO1xuICBjb25zdCBmb3JtYXR0ZWRFbmREYXRlID0gZW5kRGF0ZSA/IHNhZmVEYXRlRm9ybWF0KGVuZERhdGUsIHByb3BzKSA6IFwiXCI7XG5cbiAgcmV0dXJuIGAke2Zvcm1hdHRlZFN0YXJ0RGF0ZX0gLSAke2Zvcm1hdHRlZEVuZERhdGV9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVNdWx0aXBsZURhdGVzRm9ybWF0KGRhdGVzLCBwcm9wcykge1xuICBpZiAoIWRhdGVzPy5sZW5ndGgpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBjb25zdCBmb3JtYXR0ZWRGaXJzdERhdGUgPSBzYWZlRGF0ZUZvcm1hdChkYXRlc1swXSwgcHJvcHMpO1xuICBpZiAoZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZvcm1hdHRlZEZpcnN0RGF0ZTtcbiAgfVxuICBpZiAoZGF0ZXMubGVuZ3RoID09PSAyKSB7XG4gICAgY29uc3QgZm9ybWF0dGVkU2Vjb25kRGF0ZSA9IHNhZmVEYXRlRm9ybWF0KGRhdGVzWzFdLCBwcm9wcyk7XG4gICAgcmV0dXJuIGAke2Zvcm1hdHRlZEZpcnN0RGF0ZX0sICR7Zm9ybWF0dGVkU2Vjb25kRGF0ZX1gO1xuICB9XG5cbiAgY29uc3QgZXh0cmFEYXRlc0NvdW50ID0gZGF0ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGAke2Zvcm1hdHRlZEZpcnN0RGF0ZX0gKCske2V4dHJhRGF0ZXNDb3VudH0pYDtcbn1cblxuLy8gKiogRGF0ZSBTZXR0ZXJzICoqXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUaW1lKGRhdGUsIHsgaG91ciA9IDAsIG1pbnV0ZSA9IDAsIHNlY29uZCA9IDAgfSkge1xuICByZXR1cm4gc2V0SG91cnMoc2V0TWludXRlcyhzZXRTZWNvbmRzKGRhdGUsIHNlY29uZCksIG1pbnV0ZSksIGhvdXIpO1xufVxuXG5leHBvcnQgeyBzZXRNaW51dGVzLCBzZXRIb3Vycywgc2V0TW9udGgsIHNldFF1YXJ0ZXIsIHNldFllYXIgfTtcblxuLy8gKiogRGF0ZSBHZXR0ZXJzICoqXG5cbi8vIGdldERheSBSZXR1cm5zIGRheSBvZiB3ZWVrLCBnZXREYXRlIHJldHVybnMgZGF5IG9mIG1vbnRoXG5leHBvcnQge1xuICBnZXRTZWNvbmRzLFxuICBnZXRNaW51dGVzLFxuICBnZXRIb3VycyxcbiAgZ2V0TW9udGgsXG4gIGdldFF1YXJ0ZXIsXG4gIGdldFllYXIsXG4gIGdldERheSxcbiAgZ2V0RGF0ZSxcbiAgZ2V0VGltZSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrKGRhdGUsIGxvY2FsZSkge1xuICBsZXQgbG9jYWxlT2JqID1cbiAgICAobG9jYWxlICYmIGdldExvY2FsZU9iamVjdChsb2NhbGUpKSB8fFxuICAgIChnZXREZWZhdWx0TG9jYWxlKCkgJiYgZ2V0TG9jYWxlT2JqZWN0KGdldERlZmF1bHRMb2NhbGUoKSkpO1xuICByZXR1cm4gZ2V0SVNPV2VlayhkYXRlLCBsb2NhbGVPYmogPyB7IGxvY2FsZTogbG9jYWxlT2JqIH0gOiBudWxsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERheU9mV2Vla0NvZGUoZGF5LCBsb2NhbGUpIHtcbiAgcmV0dXJuIGZvcm1hdERhdGUoZGF5LCBcImRkZFwiLCBsb2NhbGUpO1xufVxuXG4vLyAqKiogU3RhcnQgb2YgKioqXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydE9mRGF5KGRhdGUpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZEYXkoZGF0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydE9mV2VlayhkYXRlLCBsb2NhbGUsIGNhbGVuZGFyU3RhcnREYXkpIHtcbiAgbGV0IGxvY2FsZU9iaiA9IGxvY2FsZVxuICAgID8gZ2V0TG9jYWxlT2JqZWN0KGxvY2FsZSlcbiAgICA6IGdldExvY2FsZU9iamVjdChnZXREZWZhdWx0TG9jYWxlKCkpO1xuICByZXR1cm4gc3RhcnRPZldlZWsoZGF0ZSwge1xuICAgIGxvY2FsZTogbG9jYWxlT2JqLFxuICAgIHdlZWtTdGFydHNPbjogY2FsZW5kYXJTdGFydERheSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydE9mTW9udGgoZGF0ZSkge1xuICByZXR1cm4gc3RhcnRPZk1vbnRoKGRhdGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhcnRPZlllYXIoZGF0ZSkge1xuICByZXR1cm4gc3RhcnRPZlllYXIoZGF0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydE9mUXVhcnRlcihkYXRlKSB7XG4gIHJldHVybiBzdGFydE9mUXVhcnRlcihkYXRlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXJ0T2ZUb2RheSgpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZEYXkobmV3RGF0ZSgpKTtcbn1cblxuLy8gKioqIEVuZCBvZiAqKipcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVuZE9mV2VlayhkYXRlKSB7XG4gIHJldHVybiBlbmRPZldlZWsoZGF0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmRPZk1vbnRoKGRhdGUpIHtcbiAgcmV0dXJuIGVuZE9mTW9udGgoZGF0ZSk7XG59XG5cbi8vICoqIERhdGUgTWF0aCAqKlxuXG4vLyAqKiogQWRkaXRpb24gKioqXG5cbmV4cG9ydCB7XG4gIGFkZFNlY29uZHMsXG4gIGFkZE1pbnV0ZXMsXG4gIGFkZERheXMsXG4gIGFkZFdlZWtzLFxuICBhZGRNb250aHMsXG4gIGFkZFF1YXJ0ZXJzLFxuICBhZGRZZWFycyxcbn07XG5cbi8vICoqKiBTdWJ0cmFjdGlvbiAqKipcblxuZXhwb3J0IHsgYWRkSG91cnMsIHN1YkRheXMsIHN1YldlZWtzLCBzdWJNb250aHMsIHN1YlF1YXJ0ZXJzLCBzdWJZZWFycyB9O1xuXG4vLyAqKiBEYXRlIENvbXBhcmlzb24gKipcblxuZXhwb3J0IHsgaXNCZWZvcmUsIGlzQWZ0ZXIgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZVllYXIoZGF0ZTEsIGRhdGUyKSB7XG4gIGlmIChkYXRlMSAmJiBkYXRlMikge1xuICAgIHJldHVybiBkZklzU2FtZVllYXIoZGF0ZTEsIGRhdGUyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gIWRhdGUxICYmICFkYXRlMjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lTW9udGgoZGF0ZTEsIGRhdGUyKSB7XG4gIGlmIChkYXRlMSAmJiBkYXRlMikge1xuICAgIHJldHVybiBkZklzU2FtZU1vbnRoKGRhdGUxLCBkYXRlMik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICFkYXRlMSAmJiAhZGF0ZTI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZVF1YXJ0ZXIoZGF0ZTEsIGRhdGUyKSB7XG4gIGlmIChkYXRlMSAmJiBkYXRlMikge1xuICAgIHJldHVybiBkZklzU2FtZVF1YXJ0ZXIoZGF0ZTEsIGRhdGUyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gIWRhdGUxICYmICFkYXRlMjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lRGF5KGRhdGUxLCBkYXRlMikge1xuICBpZiAoZGF0ZTEgJiYgZGF0ZTIpIHtcbiAgICByZXR1cm4gZGZJc1NhbWVEYXkoZGF0ZTEsIGRhdGUyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gIWRhdGUxICYmICFkYXRlMjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFcXVhbChkYXRlMSwgZGF0ZTIpIHtcbiAgaWYgKGRhdGUxICYmIGRhdGUyKSB7XG4gICAgcmV0dXJuIGRmSXNFcXVhbChkYXRlMSwgZGF0ZTIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAhZGF0ZTEgJiYgIWRhdGUyO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RheUluUmFuZ2UoZGF5LCBzdGFydERhdGUsIGVuZERhdGUpIHtcbiAgbGV0IHZhbGlkO1xuICBjb25zdCBzdGFydCA9IHN0YXJ0T2ZEYXkoc3RhcnREYXRlKTtcbiAgY29uc3QgZW5kID0gZW5kT2ZEYXkoZW5kRGF0ZSk7XG5cbiAgdHJ5IHtcbiAgICB2YWxpZCA9IGlzV2l0aGluSW50ZXJ2YWwoZGF5LCB7IHN0YXJ0LCBlbmQgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG4vLyAqKiogRGlmZmluZyAqKipcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERheXNEaWZmKGRhdGUxLCBkYXRlMikge1xuICByZXR1cm4gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRhdGUxLCBkYXRlMik7XG59XG5cbi8vICoqIERhdGUgTG9jYWxpemF0aW9uICoqXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckxvY2FsZShsb2NhbGVOYW1lLCBsb2NhbGVEYXRhKSB7XG4gIGNvbnN0IHNjb3BlID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbFRoaXM7XG5cbiAgaWYgKCFzY29wZS5fX2xvY2FsZURhdGFfXykge1xuICAgIHNjb3BlLl9fbG9jYWxlRGF0YV9fID0ge307XG4gIH1cbiAgc2NvcGUuX19sb2NhbGVEYXRhX19bbG9jYWxlTmFtZV0gPSBsb2NhbGVEYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdExvY2FsZShsb2NhbGVOYW1lKSB7XG4gIGNvbnN0IHNjb3BlID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbFRoaXM7XG5cbiAgc2NvcGUuX19sb2NhbGVJZF9fID0gbG9jYWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRMb2NhbGUoKSB7XG4gIGNvbnN0IHNjb3BlID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbFRoaXM7XG5cbiAgcmV0dXJuIHNjb3BlLl9fbG9jYWxlSWRfXztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2FsZU9iamVjdChsb2NhbGVTcGVjKSB7XG4gIGlmICh0eXBlb2YgbG9jYWxlU3BlYyA9PT0gXCJzdHJpbmdcIikge1xuICAgIC8vIFRyZWF0IGl0IGFzIGEgbG9jYWxlIG5hbWUgcmVnaXN0ZXJlZCBieSByZWdpc3RlckxvY2FsZVxuICAgIGNvbnN0IHNjb3BlID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbFRoaXM7XG4gICAgcmV0dXJuIHNjb3BlLl9fbG9jYWxlRGF0YV9fID8gc2NvcGUuX19sb2NhbGVEYXRhX19bbG9jYWxlU3BlY10gOiBudWxsO1xuICB9IGVsc2Uge1xuICAgIC8vIFRyZWF0IGl0IGFzIGEgcmF3IGRhdGUtZm5zIGxvY2FsZSBvYmplY3RcbiAgICByZXR1cm4gbG9jYWxlU3BlYztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkV2Vla2RheUluTG9jYWxlKGRhdGUsIGZvcm1hdEZ1bmMsIGxvY2FsZSkge1xuICByZXR1cm4gZm9ybWF0RnVuYyhmb3JtYXREYXRlKGRhdGUsIFwiRUVFRVwiLCBsb2NhbGUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtkYXlNaW5JbkxvY2FsZShkYXRlLCBsb2NhbGUpIHtcbiAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgXCJFRUVFRUVcIiwgbG9jYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtkYXlTaG9ydEluTG9jYWxlKGRhdGUsIGxvY2FsZSkge1xuICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCBcIkVFRVwiLCBsb2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9udGhJbkxvY2FsZShtb250aCwgbG9jYWxlKSB7XG4gIHJldHVybiBmb3JtYXREYXRlKHNldE1vbnRoKG5ld0RhdGUoKSwgbW9udGgpLCBcIkxMTExcIiwgbG9jYWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vbnRoU2hvcnRJbkxvY2FsZShtb250aCwgbG9jYWxlKSB7XG4gIHJldHVybiBmb3JtYXREYXRlKHNldE1vbnRoKG5ld0RhdGUoKSwgbW9udGgpLCBcIkxMTFwiLCBsb2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVhcnRlclNob3J0SW5Mb2NhbGUocXVhcnRlciwgbG9jYWxlKSB7XG4gIHJldHVybiBmb3JtYXREYXRlKHNldFF1YXJ0ZXIobmV3RGF0ZSgpLCBxdWFydGVyKSwgXCJRUVFcIiwgbG9jYWxlKTtcbn1cblxuLy8gKiogVXRpbHMgZm9yIHNvbWUgY29tcG9uZW50cyAqKlxuXG5leHBvcnQgZnVuY3Rpb24gaXNEYXlEaXNhYmxlZChcbiAgZGF5LFxuICB7XG4gICAgbWluRGF0ZSxcbiAgICBtYXhEYXRlLFxuICAgIGV4Y2x1ZGVEYXRlcyxcbiAgICBleGNsdWRlRGF0ZUludGVydmFscyxcbiAgICBpbmNsdWRlRGF0ZXMsXG4gICAgaW5jbHVkZURhdGVJbnRlcnZhbHMsXG4gICAgZmlsdGVyRGF0ZSxcbiAgfSA9IHt9LFxuKSB7XG4gIHJldHVybiAoXG4gICAgaXNPdXRPZkJvdW5kcyhkYXksIHsgbWluRGF0ZSwgbWF4RGF0ZSB9KSB8fFxuICAgIChleGNsdWRlRGF0ZXMgJiZcbiAgICAgIGV4Y2x1ZGVEYXRlcy5zb21lKChleGNsdWRlRGF0ZSkgPT5cbiAgICAgICAgaXNTYW1lRGF5KGRheSwgZXhjbHVkZURhdGUuZGF0ZSA/IGV4Y2x1ZGVEYXRlLmRhdGUgOiBleGNsdWRlRGF0ZSksXG4gICAgICApKSB8fFxuICAgIChleGNsdWRlRGF0ZUludGVydmFscyAmJlxuICAgICAgZXhjbHVkZURhdGVJbnRlcnZhbHMuc29tZSgoeyBzdGFydCwgZW5kIH0pID0+XG4gICAgICAgIGlzV2l0aGluSW50ZXJ2YWwoZGF5LCB7IHN0YXJ0LCBlbmQgfSksXG4gICAgICApKSB8fFxuICAgIChpbmNsdWRlRGF0ZXMgJiZcbiAgICAgICFpbmNsdWRlRGF0ZXMuc29tZSgoaW5jbHVkZURhdGUpID0+IGlzU2FtZURheShkYXksIGluY2x1ZGVEYXRlKSkpIHx8XG4gICAgKGluY2x1ZGVEYXRlSW50ZXJ2YWxzICYmXG4gICAgICAhaW5jbHVkZURhdGVJbnRlcnZhbHMuc29tZSgoeyBzdGFydCwgZW5kIH0pID0+XG4gICAgICAgIGlzV2l0aGluSW50ZXJ2YWwoZGF5LCB7IHN0YXJ0LCBlbmQgfSksXG4gICAgICApKSB8fFxuICAgIChmaWx0ZXJEYXRlICYmICFmaWx0ZXJEYXRlKG5ld0RhdGUoZGF5KSkpIHx8XG4gICAgZmFsc2VcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF5RXhjbHVkZWQoXG4gIGRheSxcbiAgeyBleGNsdWRlRGF0ZXMsIGV4Y2x1ZGVEYXRlSW50ZXJ2YWxzIH0gPSB7fSxcbikge1xuICBpZiAoZXhjbHVkZURhdGVJbnRlcnZhbHMgJiYgZXhjbHVkZURhdGVJbnRlcnZhbHMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBleGNsdWRlRGF0ZUludGVydmFscy5zb21lKCh7IHN0YXJ0LCBlbmQgfSkgPT5cbiAgICAgIGlzV2l0aGluSW50ZXJ2YWwoZGF5LCB7IHN0YXJ0LCBlbmQgfSksXG4gICAgKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIChleGNsdWRlRGF0ZXMgJiZcbiAgICAgIGV4Y2x1ZGVEYXRlcy5zb21lKChleGNsdWRlRGF0ZSkgPT5cbiAgICAgICAgaXNTYW1lRGF5KGRheSwgZXhjbHVkZURhdGUuZGF0ZSA/IGV4Y2x1ZGVEYXRlLmRhdGUgOiBleGNsdWRlRGF0ZSksXG4gICAgICApKSB8fFxuICAgIGZhbHNlXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01vbnRoRGlzYWJsZWQoXG4gIG1vbnRoLFxuICB7IG1pbkRhdGUsIG1heERhdGUsIGV4Y2x1ZGVEYXRlcywgaW5jbHVkZURhdGVzLCBmaWx0ZXJEYXRlIH0gPSB7fSxcbikge1xuICByZXR1cm4gKFxuICAgIGlzT3V0T2ZCb3VuZHMobW9udGgsIHtcbiAgICAgIG1pbkRhdGU6IHN0YXJ0T2ZNb250aChtaW5EYXRlKSxcbiAgICAgIG1heERhdGU6IGVuZE9mTW9udGgobWF4RGF0ZSksXG4gICAgfSkgfHxcbiAgICAoZXhjbHVkZURhdGVzICYmXG4gICAgICBleGNsdWRlRGF0ZXMuc29tZSgoZXhjbHVkZURhdGUpID0+IGlzU2FtZU1vbnRoKG1vbnRoLCBleGNsdWRlRGF0ZSkpKSB8fFxuICAgIChpbmNsdWRlRGF0ZXMgJiZcbiAgICAgICFpbmNsdWRlRGF0ZXMuc29tZSgoaW5jbHVkZURhdGUpID0+IGlzU2FtZU1vbnRoKG1vbnRoLCBpbmNsdWRlRGF0ZSkpKSB8fFxuICAgIChmaWx0ZXJEYXRlICYmICFmaWx0ZXJEYXRlKG5ld0RhdGUobW9udGgpKSkgfHxcbiAgICBmYWxzZVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNb250aEluUmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlLCBtLCBkYXkpIHtcbiAgY29uc3Qgc3RhcnREYXRlWWVhciA9IGdldFllYXIoc3RhcnREYXRlKTtcbiAgY29uc3Qgc3RhcnREYXRlTW9udGggPSBnZXRNb250aChzdGFydERhdGUpO1xuICBjb25zdCBlbmREYXRlWWVhciA9IGdldFllYXIoZW5kRGF0ZSk7XG4gIGNvbnN0IGVuZERhdGVNb250aCA9IGdldE1vbnRoKGVuZERhdGUpO1xuICBjb25zdCBkYXlZZWFyID0gZ2V0WWVhcihkYXkpO1xuICBpZiAoc3RhcnREYXRlWWVhciA9PT0gZW5kRGF0ZVllYXIgJiYgc3RhcnREYXRlWWVhciA9PT0gZGF5WWVhcikge1xuICAgIHJldHVybiBzdGFydERhdGVNb250aCA8PSBtICYmIG0gPD0gZW5kRGF0ZU1vbnRoO1xuICB9IGVsc2UgaWYgKHN0YXJ0RGF0ZVllYXIgPCBlbmREYXRlWWVhcikge1xuICAgIHJldHVybiAoXG4gICAgICAoZGF5WWVhciA9PT0gc3RhcnREYXRlWWVhciAmJiBzdGFydERhdGVNb250aCA8PSBtKSB8fFxuICAgICAgKGRheVllYXIgPT09IGVuZERhdGVZZWFyICYmIGVuZERhdGVNb250aCA+PSBtKSB8fFxuICAgICAgKGRheVllYXIgPCBlbmREYXRlWWVhciAmJiBkYXlZZWFyID4gc3RhcnREYXRlWWVhcilcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1F1YXJ0ZXJEaXNhYmxlZChcbiAgcXVhcnRlcixcbiAgeyBtaW5EYXRlLCBtYXhEYXRlLCBleGNsdWRlRGF0ZXMsIGluY2x1ZGVEYXRlcywgZmlsdGVyRGF0ZSB9ID0ge30sXG4pIHtcbiAgcmV0dXJuIChcbiAgICBpc091dE9mQm91bmRzKHF1YXJ0ZXIsIHsgbWluRGF0ZSwgbWF4RGF0ZSB9KSB8fFxuICAgIChleGNsdWRlRGF0ZXMgJiZcbiAgICAgIGV4Y2x1ZGVEYXRlcy5zb21lKChleGNsdWRlRGF0ZSkgPT5cbiAgICAgICAgaXNTYW1lUXVhcnRlcihxdWFydGVyLCBleGNsdWRlRGF0ZSksXG4gICAgICApKSB8fFxuICAgIChpbmNsdWRlRGF0ZXMgJiZcbiAgICAgICFpbmNsdWRlRGF0ZXMuc29tZSgoaW5jbHVkZURhdGUpID0+XG4gICAgICAgIGlzU2FtZVF1YXJ0ZXIocXVhcnRlciwgaW5jbHVkZURhdGUpLFxuICAgICAgKSkgfHxcbiAgICAoZmlsdGVyRGF0ZSAmJiAhZmlsdGVyRGF0ZShuZXdEYXRlKHF1YXJ0ZXIpKSkgfHxcbiAgICBmYWxzZVxuICApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyXG4gKiBAcGFyYW0ge0RhdGV9IHN0YXJ0XG4gKiBAcGFyYW0ge0RhdGV9IGVuZFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1llYXJJblJhbmdlKHllYXIsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFpc1ZhbGlkRGF0ZShzdGFydCkgfHwgIWlzVmFsaWREYXRlKGVuZCkpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgc3RhcnRZZWFyID0gZ2V0WWVhcihzdGFydCk7XG4gIGNvbnN0IGVuZFllYXIgPSBnZXRZZWFyKGVuZCk7XG5cbiAgcmV0dXJuIHN0YXJ0WWVhciA8PSB5ZWFyICYmIGVuZFllYXIgPj0geWVhcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzWWVhckRpc2FibGVkKFxuICB5ZWFyLFxuICB7IG1pbkRhdGUsIG1heERhdGUsIGV4Y2x1ZGVEYXRlcywgaW5jbHVkZURhdGVzLCBmaWx0ZXJEYXRlIH0gPSB7fSxcbikge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoeWVhciwgMCwgMSk7XG4gIHJldHVybiAoXG4gICAgaXNPdXRPZkJvdW5kcyhkYXRlLCB7XG4gICAgICBtaW5EYXRlOiBzdGFydE9mWWVhcihtaW5EYXRlKSxcbiAgICAgIG1heERhdGU6IGVuZE9mWWVhcihtYXhEYXRlKSxcbiAgICB9KSB8fFxuICAgIChleGNsdWRlRGF0ZXMgJiZcbiAgICAgIGV4Y2x1ZGVEYXRlcy5zb21lKChleGNsdWRlRGF0ZSkgPT4gaXNTYW1lWWVhcihkYXRlLCBleGNsdWRlRGF0ZSkpKSB8fFxuICAgIChpbmNsdWRlRGF0ZXMgJiZcbiAgICAgICFpbmNsdWRlRGF0ZXMuc29tZSgoaW5jbHVkZURhdGUpID0+IGlzU2FtZVllYXIoZGF0ZSwgaW5jbHVkZURhdGUpKSkgfHxcbiAgICAoZmlsdGVyRGF0ZSAmJiAhZmlsdGVyRGF0ZShuZXdEYXRlKGRhdGUpKSkgfHxcbiAgICBmYWxzZVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNRdWFydGVySW5SYW5nZShzdGFydERhdGUsIGVuZERhdGUsIHEsIGRheSkge1xuICBjb25zdCBzdGFydERhdGVZZWFyID0gZ2V0WWVhcihzdGFydERhdGUpO1xuICBjb25zdCBzdGFydERhdGVRdWFydGVyID0gZ2V0UXVhcnRlcihzdGFydERhdGUpO1xuICBjb25zdCBlbmREYXRlWWVhciA9IGdldFllYXIoZW5kRGF0ZSk7XG4gIGNvbnN0IGVuZERhdGVRdWFydGVyID0gZ2V0UXVhcnRlcihlbmREYXRlKTtcbiAgY29uc3QgZGF5WWVhciA9IGdldFllYXIoZGF5KTtcbiAgaWYgKHN0YXJ0RGF0ZVllYXIgPT09IGVuZERhdGVZZWFyICYmIHN0YXJ0RGF0ZVllYXIgPT09IGRheVllYXIpIHtcbiAgICByZXR1cm4gc3RhcnREYXRlUXVhcnRlciA8PSBxICYmIHEgPD0gZW5kRGF0ZVF1YXJ0ZXI7XG4gIH0gZWxzZSBpZiAoc3RhcnREYXRlWWVhciA8IGVuZERhdGVZZWFyKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIChkYXlZZWFyID09PSBzdGFydERhdGVZZWFyICYmIHN0YXJ0RGF0ZVF1YXJ0ZXIgPD0gcSkgfHxcbiAgICAgIChkYXlZZWFyID09PSBlbmREYXRlWWVhciAmJiBlbmREYXRlUXVhcnRlciA+PSBxKSB8fFxuICAgICAgKGRheVllYXIgPCBlbmREYXRlWWVhciAmJiBkYXlZZWFyID4gc3RhcnREYXRlWWVhcilcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc091dE9mQm91bmRzKGRheSwgeyBtaW5EYXRlLCBtYXhEYXRlIH0gPSB7fSkge1xuICByZXR1cm4gKFxuICAgIChtaW5EYXRlICYmIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXksIG1pbkRhdGUpIDwgMCkgfHxcbiAgICAobWF4RGF0ZSAmJiBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZGF5LCBtYXhEYXRlKSA+IDApXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVJbkxpc3QodGltZSwgdGltZXMpIHtcbiAgcmV0dXJuIHRpbWVzLnNvbWUoXG4gICAgKGxpc3RUaW1lKSA9PlxuICAgICAgZ2V0SG91cnMobGlzdFRpbWUpID09PSBnZXRIb3Vycyh0aW1lKSAmJlxuICAgICAgZ2V0TWludXRlcyhsaXN0VGltZSkgPT09IGdldE1pbnV0ZXModGltZSkgJiZcbiAgICAgIGdldFNlY29uZHMobGlzdFRpbWUpID09PSBnZXRTZWNvbmRzKHRpbWUpLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUaW1lRGlzYWJsZWQoXG4gIHRpbWUsXG4gIHsgZXhjbHVkZVRpbWVzLCBpbmNsdWRlVGltZXMsIGZpbHRlclRpbWUgfSA9IHt9LFxuKSB7XG4gIHJldHVybiAoXG4gICAgKGV4Y2x1ZGVUaW1lcyAmJiBpc1RpbWVJbkxpc3QodGltZSwgZXhjbHVkZVRpbWVzKSkgfHxcbiAgICAoaW5jbHVkZVRpbWVzICYmICFpc1RpbWVJbkxpc3QodGltZSwgaW5jbHVkZVRpbWVzKSkgfHxcbiAgICAoZmlsdGVyVGltZSAmJiAhZmlsdGVyVGltZSh0aW1lKSkgfHxcbiAgICBmYWxzZVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUaW1lSW5EaXNhYmxlZFJhbmdlKHRpbWUsIHsgbWluVGltZSwgbWF4VGltZSB9KSB7XG4gIGlmICghbWluVGltZSB8fCAhbWF4VGltZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkJvdGggbWluVGltZSBhbmQgbWF4VGltZSBwcm9wcyByZXF1aXJlZFwiKTtcbiAgfVxuICBsZXQgYmFzZVRpbWUgPSBuZXdEYXRlKCk7XG4gIGJhc2VUaW1lID0gc2V0SG91cnMoYmFzZVRpbWUsIGdldEhvdXJzKHRpbWUpKTtcbiAgYmFzZVRpbWUgPSBzZXRNaW51dGVzKGJhc2VUaW1lLCBnZXRNaW51dGVzKHRpbWUpKTtcbiAgYmFzZVRpbWUgPSBzZXRTZWNvbmRzKGJhc2VUaW1lLCBnZXRTZWNvbmRzKHRpbWUpKTtcblxuICBsZXQgbWluID0gbmV3RGF0ZSgpO1xuICBtaW4gPSBzZXRIb3VycyhtaW4sIGdldEhvdXJzKG1pblRpbWUpKTtcbiAgbWluID0gc2V0TWludXRlcyhtaW4sIGdldE1pbnV0ZXMobWluVGltZSkpO1xuICBtaW4gPSBzZXRTZWNvbmRzKG1pbiwgZ2V0U2Vjb25kcyhtaW5UaW1lKSk7XG5cbiAgbGV0IG1heCA9IG5ld0RhdGUoKTtcbiAgbWF4ID0gc2V0SG91cnMobWF4LCBnZXRIb3VycyhtYXhUaW1lKSk7XG4gIG1heCA9IHNldE1pbnV0ZXMobWF4LCBnZXRNaW51dGVzKG1heFRpbWUpKTtcbiAgbWF4ID0gc2V0U2Vjb25kcyhtYXgsIGdldFNlY29uZHMobWF4VGltZSkpO1xuXG4gIGxldCB2YWxpZDtcbiAgdHJ5IHtcbiAgICB2YWxpZCA9ICFpc1dpdGhpbkludGVydmFsKGJhc2VUaW1lLCB7IHN0YXJ0OiBtaW4sIGVuZDogbWF4IH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vbnRoRGlzYWJsZWRCZWZvcmUoZGF5LCB7IG1pbkRhdGUsIGluY2x1ZGVEYXRlcyB9ID0ge30pIHtcbiAgY29uc3QgcHJldmlvdXNNb250aCA9IHN1Yk1vbnRocyhkYXksIDEpO1xuICByZXR1cm4gKFxuICAgIChtaW5EYXRlICYmIGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKG1pbkRhdGUsIHByZXZpb3VzTW9udGgpID4gMCkgfHxcbiAgICAoaW5jbHVkZURhdGVzICYmXG4gICAgICBpbmNsdWRlRGF0ZXMuZXZlcnkoXG4gICAgICAgIChpbmNsdWRlRGF0ZSkgPT5cbiAgICAgICAgICBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyhpbmNsdWRlRGF0ZSwgcHJldmlvdXNNb250aCkgPiAwLFxuICAgICAgKSkgfHxcbiAgICBmYWxzZVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9udGhEaXNhYmxlZEFmdGVyKGRheSwgeyBtYXhEYXRlLCBpbmNsdWRlRGF0ZXMgfSA9IHt9KSB7XG4gIGNvbnN0IG5leHRNb250aCA9IGFkZE1vbnRocyhkYXksIDEpO1xuICByZXR1cm4gKFxuICAgIChtYXhEYXRlICYmIGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKG5leHRNb250aCwgbWF4RGF0ZSkgPiAwKSB8fFxuICAgIChpbmNsdWRlRGF0ZXMgJiZcbiAgICAgIGluY2x1ZGVEYXRlcy5ldmVyeShcbiAgICAgICAgKGluY2x1ZGVEYXRlKSA9PiBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyhuZXh0TW9udGgsIGluY2x1ZGVEYXRlKSA+IDAsXG4gICAgICApKSB8fFxuICAgIGZhbHNlXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWFydGVyRGlzYWJsZWRCZWZvcmUoZGF0ZSwgeyBtaW5EYXRlLCBpbmNsdWRlRGF0ZXMgfSA9IHt9KSB7XG4gIGNvbnN0IGZpcnN0RGF0ZU9mWWVhciA9IHN0YXJ0T2ZZZWFyKGRhdGUpO1xuICBjb25zdCBwcmV2aW91c1F1YXJ0ZXIgPSBzdWJRdWFydGVycyhmaXJzdERhdGVPZlllYXIsIDEpO1xuXG4gIHJldHVybiAoXG4gICAgKG1pbkRhdGUgJiYgZGlmZmVyZW5jZUluQ2FsZW5kYXJRdWFydGVycyhtaW5EYXRlLCBwcmV2aW91c1F1YXJ0ZXIpID4gMCkgfHxcbiAgICAoaW5jbHVkZURhdGVzICYmXG4gICAgICBpbmNsdWRlRGF0ZXMuZXZlcnkoXG4gICAgICAgIChpbmNsdWRlRGF0ZSkgPT5cbiAgICAgICAgICBkaWZmZXJlbmNlSW5DYWxlbmRhclF1YXJ0ZXJzKGluY2x1ZGVEYXRlLCBwcmV2aW91c1F1YXJ0ZXIpID4gMCxcbiAgICAgICkpIHx8XG4gICAgZmFsc2VcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1YXJ0ZXJEaXNhYmxlZEFmdGVyKGRhdGUsIHsgbWF4RGF0ZSwgaW5jbHVkZURhdGVzIH0gPSB7fSkge1xuICBjb25zdCBsYXN0RGF0ZU9mWWVhciA9IGVuZE9mWWVhcihkYXRlKTtcbiAgY29uc3QgbmV4dFF1YXJ0ZXIgPSBhZGRRdWFydGVycyhsYXN0RGF0ZU9mWWVhciwgMSk7XG5cbiAgcmV0dXJuIChcbiAgICAobWF4RGF0ZSAmJiBkaWZmZXJlbmNlSW5DYWxlbmRhclF1YXJ0ZXJzKG5leHRRdWFydGVyLCBtYXhEYXRlKSA+IDApIHx8XG4gICAgKGluY2x1ZGVEYXRlcyAmJlxuICAgICAgaW5jbHVkZURhdGVzLmV2ZXJ5KFxuICAgICAgICAoaW5jbHVkZURhdGUpID0+XG4gICAgICAgICAgZGlmZmVyZW5jZUluQ2FsZW5kYXJRdWFydGVycyhuZXh0UXVhcnRlciwgaW5jbHVkZURhdGUpID4gMCxcbiAgICAgICkpIHx8XG4gICAgZmFsc2VcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllYXJEaXNhYmxlZEJlZm9yZShkYXksIHsgbWluRGF0ZSwgaW5jbHVkZURhdGVzIH0gPSB7fSkge1xuICBjb25zdCBwcmV2aW91c1llYXIgPSBzdWJZZWFycyhkYXksIDEpO1xuICByZXR1cm4gKFxuICAgIChtaW5EYXRlICYmIGRpZmZlcmVuY2VJbkNhbGVuZGFyWWVhcnMobWluRGF0ZSwgcHJldmlvdXNZZWFyKSA+IDApIHx8XG4gICAgKGluY2x1ZGVEYXRlcyAmJlxuICAgICAgaW5jbHVkZURhdGVzLmV2ZXJ5KFxuICAgICAgICAoaW5jbHVkZURhdGUpID0+XG4gICAgICAgICAgZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyhpbmNsdWRlRGF0ZSwgcHJldmlvdXNZZWFyKSA+IDAsXG4gICAgICApKSB8fFxuICAgIGZhbHNlXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZWFyc0Rpc2FibGVkQmVmb3JlKFxuICBkYXksXG4gIHsgbWluRGF0ZSwgeWVhckl0ZW1OdW1iZXIgPSBERUZBVUxUX1lFQVJfSVRFTV9OVU1CRVIgfSA9IHt9LFxuKSB7XG4gIGNvbnN0IHByZXZpb3VzWWVhciA9IGdldFN0YXJ0T2ZZZWFyKHN1YlllYXJzKGRheSwgeWVhckl0ZW1OdW1iZXIpKTtcbiAgY29uc3QgeyBlbmRQZXJpb2QgfSA9IGdldFllYXJzUGVyaW9kKHByZXZpb3VzWWVhciwgeWVhckl0ZW1OdW1iZXIpO1xuICBjb25zdCBtaW5EYXRlWWVhciA9IG1pbkRhdGUgJiYgZ2V0WWVhcihtaW5EYXRlKTtcbiAgcmV0dXJuIChtaW5EYXRlWWVhciAmJiBtaW5EYXRlWWVhciA+IGVuZFBlcmlvZCkgfHwgZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZWFyRGlzYWJsZWRBZnRlcihkYXksIHsgbWF4RGF0ZSwgaW5jbHVkZURhdGVzIH0gPSB7fSkge1xuICBjb25zdCBuZXh0WWVhciA9IGFkZFllYXJzKGRheSwgMSk7XG4gIHJldHVybiAoXG4gICAgKG1heERhdGUgJiYgZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyhuZXh0WWVhciwgbWF4RGF0ZSkgPiAwKSB8fFxuICAgIChpbmNsdWRlRGF0ZXMgJiZcbiAgICAgIGluY2x1ZGVEYXRlcy5ldmVyeShcbiAgICAgICAgKGluY2x1ZGVEYXRlKSA9PiBkaWZmZXJlbmNlSW5DYWxlbmRhclllYXJzKG5leHRZZWFyLCBpbmNsdWRlRGF0ZSkgPiAwLFxuICAgICAgKSkgfHxcbiAgICBmYWxzZVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geWVhcnNEaXNhYmxlZEFmdGVyKFxuICBkYXksXG4gIHsgbWF4RGF0ZSwgeWVhckl0ZW1OdW1iZXIgPSBERUZBVUxUX1lFQVJfSVRFTV9OVU1CRVIgfSA9IHt9LFxuKSB7XG4gIGNvbnN0IG5leHRZZWFyID0gYWRkWWVhcnMoZGF5LCB5ZWFySXRlbU51bWJlcik7XG4gIGNvbnN0IHsgc3RhcnRQZXJpb2QgfSA9IGdldFllYXJzUGVyaW9kKG5leHRZZWFyLCB5ZWFySXRlbU51bWJlcik7XG4gIGNvbnN0IG1heERhdGVZZWFyID0gbWF4RGF0ZSAmJiBnZXRZZWFyKG1heERhdGUpO1xuICByZXR1cm4gKG1heERhdGVZZWFyICYmIG1heERhdGVZZWFyIDwgc3RhcnRQZXJpb2QpIHx8IGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWZmZWN0aXZlTWluRGF0ZSh7IG1pbkRhdGUsIGluY2x1ZGVEYXRlcyB9KSB7XG4gIGlmIChpbmNsdWRlRGF0ZXMgJiYgbWluRGF0ZSkge1xuICAgIGxldCBtaW5EYXRlcyA9IGluY2x1ZGVEYXRlcy5maWx0ZXIoXG4gICAgICAoaW5jbHVkZURhdGUpID0+IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhpbmNsdWRlRGF0ZSwgbWluRGF0ZSkgPj0gMCxcbiAgICApO1xuICAgIHJldHVybiBtaW4obWluRGF0ZXMpO1xuICB9IGVsc2UgaWYgKGluY2x1ZGVEYXRlcykge1xuICAgIHJldHVybiBtaW4oaW5jbHVkZURhdGVzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWluRGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWZmZWN0aXZlTWF4RGF0ZSh7IG1heERhdGUsIGluY2x1ZGVEYXRlcyB9KSB7XG4gIGlmIChpbmNsdWRlRGF0ZXMgJiYgbWF4RGF0ZSkge1xuICAgIGxldCBtYXhEYXRlcyA9IGluY2x1ZGVEYXRlcy5maWx0ZXIoXG4gICAgICAoaW5jbHVkZURhdGUpID0+IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhpbmNsdWRlRGF0ZSwgbWF4RGF0ZSkgPD0gMCxcbiAgICApO1xuICAgIHJldHVybiBtYXgobWF4RGF0ZXMpO1xuICB9IGVsc2UgaWYgKGluY2x1ZGVEYXRlcykge1xuICAgIHJldHVybiBtYXgoaW5jbHVkZURhdGVzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWF4RGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGlnaHRMaWdodERheXNNYXAoXG4gIGhpZ2hsaWdodERhdGVzID0gW10sXG4gIGRlZmF1bHRDbGFzc05hbWUgPSBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taGlnaGxpZ2h0ZWRcIixcbikge1xuICBjb25zdCBkYXRlQ2xhc3NlcyA9IG5ldyBNYXAoKTtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGhpZ2hsaWdodERhdGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3Qgb2JqID0gaGlnaGxpZ2h0RGF0ZXNbaV07XG4gICAgaWYgKGlzRGF0ZShvYmopKSB7XG4gICAgICBjb25zdCBrZXkgPSBmb3JtYXREYXRlKG9iaiwgXCJNTS5kZC55eXl5XCIpO1xuICAgICAgY29uc3QgY2xhc3NOYW1lc0FyciA9IGRhdGVDbGFzc2VzLmdldChrZXkpIHx8IFtdO1xuICAgICAgaWYgKCFjbGFzc05hbWVzQXJyLmluY2x1ZGVzKGRlZmF1bHRDbGFzc05hbWUpKSB7XG4gICAgICAgIGNsYXNzTmFtZXNBcnIucHVzaChkZWZhdWx0Q2xhc3NOYW1lKTtcbiAgICAgICAgZGF0ZUNsYXNzZXMuc2V0KGtleSwgY2xhc3NOYW1lc0Fycik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGtleXNbMF07XG4gICAgICBjb25zdCBhcnJPZkRhdGVzID0gb2JqW2tleXNbMF1dO1xuICAgICAgaWYgKHR5cGVvZiBjbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgYXJyT2ZEYXRlcy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgICAgZm9yIChsZXQgayA9IDAsIGxlbiA9IGFyck9mRGF0ZXMubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBmb3JtYXREYXRlKGFyck9mRGF0ZXNba10sIFwiTU0uZGQueXl5eVwiKTtcbiAgICAgICAgICBjb25zdCBjbGFzc05hbWVzQXJyID0gZGF0ZUNsYXNzZXMuZ2V0KGtleSkgfHwgW107XG4gICAgICAgICAgaWYgKCFjbGFzc05hbWVzQXJyLmluY2x1ZGVzKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXNBcnIucHVzaChjbGFzc05hbWUpO1xuICAgICAgICAgICAgZGF0ZUNsYXNzZXMuc2V0KGtleSwgY2xhc3NOYW1lc0Fycik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRlQ2xhc3Nlcztcbn1cblxuLyoqXG4gKiBDb21wYXJlIHRoZSB0d28gYXJyYXlzXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheTFcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5MlxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUsIGlmIHRoZSBwYXNzZWQgYXJyYXkgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFycmF5c0FyZUVxdWFsKGFycmF5MSwgYXJyYXkyKSB7XG4gIGlmIChhcnJheTEubGVuZ3RoICE9PSBhcnJheTIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5MS5ldmVyeSgodmFsdWUsIGluZGV4KSA9PiB2YWx1ZSA9PT0gYXJyYXkyW2luZGV4XSk7XG59XG5cbi8qKlxuICogQXNzaWduIHRoZSBjdXN0b20gY2xhc3MgdG8gZWFjaCBkYXRlXG4gKiBAcGFyYW0ge0FycmF5fSBob2xpZGF5RGF0ZXMgYXJyYXkgb2Ygb2JqZWN0IGNvbnRhaW5pbmcgZGF0ZSBhbmQgbmFtZSBvZiB0aGUgaG9saWRheVxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzbmFtZSB0byBiZSBhZGRlZC5cbiAqIEByZXR1cm5zIHtNYXB9IE1hcCBjb250YWluaW5nIGRhdGUgYXMga2V5IGFuZCBhcnJheSBvZiBjbGFzc25hbWUgYW5kIGhvbGlkYXkgbmFtZSBhcyB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9saWRheXNNYXAoXG4gIGhvbGlkYXlEYXRlcyA9IFtdLFxuICBkZWZhdWx0Q2xhc3NOYW1lID0gXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWhvbGlkYXlzXCIsXG4pIHtcbiAgY29uc3QgZGF0ZUNsYXNzZXMgPSBuZXcgTWFwKCk7XG4gIGhvbGlkYXlEYXRlcy5mb3JFYWNoKChob2xpZGF5KSA9PiB7XG4gICAgY29uc3QgeyBkYXRlOiBkYXRlT2JqLCBob2xpZGF5TmFtZSB9ID0gaG9saWRheTtcbiAgICBpZiAoIWlzRGF0ZShkYXRlT2JqKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IGZvcm1hdERhdGUoZGF0ZU9iaiwgXCJNTS5kZC55eXl5XCIpO1xuICAgIGNvbnN0IGNsYXNzTmFtZXNPYmogPSBkYXRlQ2xhc3Nlcy5nZXQoa2V5KSB8fCB7fTtcbiAgICBpZiAoXG4gICAgICBcImNsYXNzTmFtZVwiIGluIGNsYXNzTmFtZXNPYmogJiZcbiAgICAgIGNsYXNzTmFtZXNPYmpbXCJjbGFzc05hbWVcIl0gPT09IGRlZmF1bHRDbGFzc05hbWUgJiZcbiAgICAgIGFycmF5c0FyZUVxdWFsKGNsYXNzTmFtZXNPYmpbXCJob2xpZGF5TmFtZXNcIl0sIFtob2xpZGF5TmFtZV0pXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xhc3NOYW1lc09ialtcImNsYXNzTmFtZVwiXSA9IGRlZmF1bHRDbGFzc05hbWU7XG4gICAgY29uc3QgaG9saWRheU5hbWVBcnIgPSBjbGFzc05hbWVzT2JqW1wiaG9saWRheU5hbWVzXCJdO1xuICAgIGNsYXNzTmFtZXNPYmpbXCJob2xpZGF5TmFtZXNcIl0gPSBob2xpZGF5TmFtZUFyclxuICAgICAgPyBbLi4uaG9saWRheU5hbWVBcnIsIGhvbGlkYXlOYW1lXVxuICAgICAgOiBbaG9saWRheU5hbWVdO1xuICAgIGRhdGVDbGFzc2VzLnNldChrZXksIGNsYXNzTmFtZXNPYmopO1xuICB9KTtcbiAgcmV0dXJuIGRhdGVDbGFzc2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXNUb0luamVjdEFmdGVyKFxuICBzdGFydE9mRGF5LFxuICBjdXJyZW50VGltZSxcbiAgY3VycmVudE11bHRpcGxpZXIsXG4gIGludGVydmFscyxcbiAgaW5qZWN0ZWRUaW1lcyxcbikge1xuICBjb25zdCBsID0gaW5qZWN0ZWRUaW1lcy5sZW5ndGg7XG4gIGNvbnN0IHRpbWVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGluamVjdGVkVGltZSA9IHN0YXJ0T2ZEYXk7XG4gICAgaW5qZWN0ZWRUaW1lID0gYWRkSG91cnMoaW5qZWN0ZWRUaW1lLCBnZXRIb3VycyhpbmplY3RlZFRpbWVzW2ldKSk7XG4gICAgaW5qZWN0ZWRUaW1lID0gYWRkTWludXRlcyhpbmplY3RlZFRpbWUsIGdldE1pbnV0ZXMoaW5qZWN0ZWRUaW1lc1tpXSkpO1xuICAgIGluamVjdGVkVGltZSA9IGFkZFNlY29uZHMoaW5qZWN0ZWRUaW1lLCBnZXRTZWNvbmRzKGluamVjdGVkVGltZXNbaV0pKTtcblxuICAgIGNvbnN0IG5leHRUaW1lID0gYWRkTWludXRlcyhcbiAgICAgIHN0YXJ0T2ZEYXksXG4gICAgICAoY3VycmVudE11bHRpcGxpZXIgKyAxKSAqIGludGVydmFscyxcbiAgICApO1xuXG4gICAgaWYgKFxuICAgICAgaXNBZnRlcihpbmplY3RlZFRpbWUsIGN1cnJlbnRUaW1lKSAmJlxuICAgICAgaXNCZWZvcmUoaW5qZWN0ZWRUaW1lLCBuZXh0VGltZSlcbiAgICApIHtcbiAgICAgIHRpbWVzLnB1c2goaW5qZWN0ZWRUaW1lc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRpbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkWmVybyhpKSB7XG4gIHJldHVybiBpIDwgMTAgPyBgMCR7aX1gIDogYCR7aX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0WWVhcnNQZXJpb2QoXG4gIGRhdGUsXG4gIHllYXJJdGVtTnVtYmVyID0gREVGQVVMVF9ZRUFSX0lURU1fTlVNQkVSLFxuKSB7XG4gIGNvbnN0IGVuZFBlcmlvZCA9IE1hdGguY2VpbChnZXRZZWFyKGRhdGUpIC8geWVhckl0ZW1OdW1iZXIpICogeWVhckl0ZW1OdW1iZXI7XG4gIGNvbnN0IHN0YXJ0UGVyaW9kID0gZW5kUGVyaW9kIC0gKHllYXJJdGVtTnVtYmVyIC0gMSk7XG4gIHJldHVybiB7IHN0YXJ0UGVyaW9kLCBlbmRQZXJpb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhvdXJzSW5EYXkoZCkge1xuICBjb25zdCBzdGFydE9mRGF5ID0gbmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCksIGQuZ2V0RGF0ZSgpKTtcbiAgY29uc3Qgc3RhcnRPZlRoZU5leHREYXkgPSBuZXcgRGF0ZShcbiAgICBkLmdldEZ1bGxZZWFyKCksXG4gICAgZC5nZXRNb250aCgpLFxuICAgIGQuZ2V0RGF0ZSgpLFxuICAgIDI0LFxuICApO1xuXG4gIHJldHVybiBNYXRoLnJvdW5kKCgrc3RhcnRPZlRoZU5leHREYXkgLSArc3RhcnRPZkRheSkgLyAzXzYwMF8wMDApO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0YXJ0IG9mIHRoZSBtaW51dGUgZm9yIHRoZSBnaXZlbiBkYXRlXG4gKlxuICogTk9URTogdGhpcyBmdW5jdGlvbiBpcyBhIERTVCBhbmQgdGltZXpvbmUtc2FmZSBhbmFsb2cgb2YgYGRhdGUtZm5zL3N0YXJ0T2ZNaW51dGVgXG4gKiBkbyBub3QgbWFrZSBjaGFuZ2VzIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZ1xuICpcbiAqIFNlZSBjb21tZW50cyBvbiBodHRwczovL2dpdGh1Yi5jb20vSGFja2VyMHgwMS9yZWFjdC1kYXRlcGlja2VyL3B1bGwvNDI0NFxuICogZm9yIG1vcmUgZGV0YWlsc1xuICpcbiAqIEBwYXJhbSB7RGF0ZX0gZCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gc3RhcnQgb2YgdGhlIG1pbnV0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZk1pbnV0ZShkKSB7XG4gIGNvbnN0IHNlY29uZHMgPSBkLmdldFNlY29uZHMoKTtcbiAgY29uc3QgbWlsbGlzZWNvbmRzID0gZC5nZXRNaWxsaXNlY29uZHMoKTtcblxuICByZXR1cm4gdG9EYXRlKGQuZ2V0VGltZSgpIC0gc2Vjb25kcyAqIDEwMDAgLSBtaWxsaXNlY29uZHMpO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gZGF0ZXMgYXJlIGluIHRoZSBzYW1lIG1pbnV0ZVxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBEU1QgYW5kIHRpbWV6b25lLXNhZmUgYW5hbG9nIG9mIGBkYXRlLWZucy9pc1NhbWVNaW51dGVgXG4gKlxuICogQHBhcmFtIHtEYXRlfSBkMVxuICogQHBhcmFtIHtEYXRlfSBkMlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NhbWVNaW51dGUoZDEsIGQyKSB7XG4gIHJldHVybiBzdGFydE9mTWludXRlKGQxKS5nZXRUaW1lKCkgPT09IHN0YXJ0T2ZNaW51dGUoZDIpLmdldFRpbWUoKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2xvbmVkIGRhdGUgd2l0aCBtaWRuaWdodCB0aW1lICgwMDowMDowMClcbiAqXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgVGhlIGRhdGUgZm9yIHdoaWNoIG1pZG5pZ2h0IHRpbWUgaXMgcmVxdWlyZWRcbiAqIEBwYXJhbSB7RGF0ZX0gZGF0ZVRvQ29tcGFyZSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtEYXRlfSBBIG5ldyBkYXRldGltZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCBkYXRlIHdpdGggbWlkbmlnaHQgdGltZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWlkbmlnaHREYXRlKGRhdGUpIHtcbiAgaWYgKCFpc0RhdGUoZGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRhdGVcIik7XG4gIH1cblxuICBjb25zdCBkYXRlV2l0aG91dFRpbWUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgZGF0ZVdpdGhvdXRUaW1lLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZVdpdGhvdXRUaW1lO1xufVxuXG4vKipcbiAqIElzIHRoZSBmaXJzdCBkYXRlIGJlZm9yZSB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgVGhlIGRhdGUgdGhhdCBzaG91bGQgYmUgYmVmb3JlIHRoZSBvdGhlciBvbmUgdG8gcmV0dXJuIHRydWVcbiAqIEBwYXJhbSB7RGF0ZX0gZGF0ZVRvQ29tcGFyZSBUaGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtib29sZWFufSBUaGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBkYXRlXG4gKlxuICogTm90ZTpcbiAqICBUaGlzIGZ1bmN0aW9uIGNvbnNpZGVycyB0aGUgbWlkLW5pZ2h0IG9mIHRoZSBnaXZlbiBkYXRlcyBmb3IgY29tcGFyaXNvbi5cbiAqICBJdCBldmFsdWF0ZXMgd2hldGhlciBkYXRlIGlzIGJlZm9yZSBkYXRlVG9Db21wYXJlIGJhc2VkIG9uIHRoZWlyIG1pZC1uaWdodCB0aW1lc3RhbXBzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlQmVmb3JlKGRhdGUsIGRhdGVUb0NvbXBhcmUpIHtcbiAgaWYgKCFpc0RhdGUoZGF0ZSkgfHwgIWlzRGF0ZShkYXRlVG9Db21wYXJlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSByZWNlaXZlZFwiKTtcbiAgfVxuXG4gIGNvbnN0IG1pZG5pZ2h0RGF0ZSA9IGdldE1pZG5pZ2h0RGF0ZShkYXRlKTtcbiAgY29uc3QgbWlkbmlnaHREYXRlVG9Db21wYXJlID0gZ2V0TWlkbmlnaHREYXRlKGRhdGVUb0NvbXBhcmUpO1xuXG4gIHJldHVybiBpc0JlZm9yZShtaWRuaWdodERhdGUsIG1pZG5pZ2h0RGF0ZVRvQ29tcGFyZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NwYWNlS2V5RG93bihldmVudCkge1xuICBjb25zdCBTUEFDRV9LRVkgPSBcIiBcIjtcbiAgcmV0dXJuIGV2ZW50LmtleSA9PT0gU1BBQ0VfS0VZO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY2xzeCB9IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQgeyBnZXRZZWFyIH0gZnJvbSBcIi4vZGF0ZV91dGlsc1wiO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVllYXJzKHllYXIsIG5vT2ZZZWFyLCBtaW5EYXRlLCBtYXhEYXRlKSB7XG4gIGNvbnN0IGxpc3QgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyICogbm9PZlllYXIgKyAxOyBpKyspIHtcbiAgICBjb25zdCBuZXdZZWFyID0geWVhciArIG5vT2ZZZWFyIC0gaTtcbiAgICBsZXQgaXNJblJhbmdlID0gdHJ1ZTtcblxuICAgIGlmIChtaW5EYXRlKSB7XG4gICAgICBpc0luUmFuZ2UgPSBnZXRZZWFyKG1pbkRhdGUpIDw9IG5ld1llYXI7XG4gICAgfVxuXG4gICAgaWYgKG1heERhdGUgJiYgaXNJblJhbmdlKSB7XG4gICAgICBpc0luUmFuZ2UgPSBnZXRZZWFyKG1heERhdGUpID49IG5ld1llYXI7XG4gICAgfVxuXG4gICAgaWYgKGlzSW5SYW5nZSkge1xuICAgICAgbGlzdC5wdXNoKG5ld1llYXIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsaXN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBZZWFyRHJvcGRvd25PcHRpb25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBtaW5EYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBtYXhEYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzY3JvbGxhYmxlWWVhckRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB5ZWFyOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgeWVhckRyb3Bkb3duSXRlbU51bWJlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCB7IHllYXJEcm9wZG93bkl0ZW1OdW1iZXIsIHNjcm9sbGFibGVZZWFyRHJvcGRvd24gfSA9IHByb3BzO1xuICAgIGNvbnN0IG5vT2ZZZWFyID1cbiAgICAgIHllYXJEcm9wZG93bkl0ZW1OdW1iZXIgfHwgKHNjcm9sbGFibGVZZWFyRHJvcGRvd24gPyAxMCA6IDUpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHllYXJzTGlzdDogZ2VuZXJhdGVZZWFycyhcbiAgICAgICAgdGhpcy5wcm9wcy55ZWFyLFxuICAgICAgICBub09mWWVhcixcbiAgICAgICAgdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICB0aGlzLnByb3BzLm1heERhdGUsXG4gICAgICApLFxuICAgIH07XG4gICAgdGhpcy5kcm9wZG93blJlZiA9IGNyZWF0ZVJlZigpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgZHJvcGRvd25DdXJyZW50ID0gdGhpcy5kcm9wZG93blJlZi5jdXJyZW50O1xuXG4gICAgaWYgKGRyb3Bkb3duQ3VycmVudCkge1xuICAgICAgLy8gR2V0IGFycmF5IGZyb20gSFRNTENvbGxlY3Rpb25cbiAgICAgIGNvbnN0IGRyb3Bkb3duQ3VycmVudENoaWxkcmVuID0gZHJvcGRvd25DdXJyZW50LmNoaWxkcmVuXG4gICAgICAgID8gQXJyYXkuZnJvbShkcm9wZG93bkN1cnJlbnQuY2hpbGRyZW4pXG4gICAgICAgIDogbnVsbDtcbiAgICAgIGNvbnN0IHNlbGVjdGVkWWVhck9wdGlvbkVsID0gZHJvcGRvd25DdXJyZW50Q2hpbGRyZW5cbiAgICAgICAgPyBkcm9wZG93bkN1cnJlbnRDaGlsZHJlbi5maW5kKChjaGlsZEVsKSA9PiBjaGlsZEVsLmFyaWFTZWxlY3RlZClcbiAgICAgICAgOiBudWxsO1xuXG4gICAgICBkcm9wZG93bkN1cnJlbnQuc2Nyb2xsVG9wID0gc2VsZWN0ZWRZZWFyT3B0aW9uRWxcbiAgICAgICAgPyBzZWxlY3RlZFllYXJPcHRpb25FbC5vZmZzZXRUb3AgK1xuICAgICAgICAgIChzZWxlY3RlZFllYXJPcHRpb25FbC5jbGllbnRIZWlnaHQgLSBkcm9wZG93bkN1cnJlbnQuY2xpZW50SGVpZ2h0KSAvIDJcbiAgICAgICAgOiAoZHJvcGRvd25DdXJyZW50LnNjcm9sbEhlaWdodCAtIGRyb3Bkb3duQ3VycmVudC5jbGllbnRIZWlnaHQpIC8gMjtcbiAgICB9XG4gIH1cblxuICByZW5kZXJPcHRpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkWWVhciA9IHRoaXMucHJvcHMueWVhcjtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5zdGF0ZS55ZWFyc0xpc3QubWFwKCh5ZWFyKSA9PiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17XG4gICAgICAgICAgc2VsZWN0ZWRZZWFyID09PSB5ZWFyXG4gICAgICAgICAgICA/IFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24gcmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24tLXNlbGVjdGVkX3llYXJcIlxuICAgICAgICAgICAgOiBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uXCJcbiAgICAgICAgfVxuICAgICAgICBrZXk9e3llYXJ9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzLCB5ZWFyKX1cbiAgICAgICAgYXJpYS1zZWxlY3RlZD17c2VsZWN0ZWRZZWFyID09PSB5ZWFyID8gXCJ0cnVlXCIgOiB1bmRlZmluZWR9XG4gICAgICA+XG4gICAgICAgIHtzZWxlY3RlZFllYXIgPT09IHllYXIgPyAoXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb24tLXNlbGVjdGVkXCI+4pyTPC9zcGFuPlxuICAgICAgICApIDogKFxuICAgICAgICAgIFwiXCJcbiAgICAgICAgKX1cbiAgICAgICAge3llYXJ9XG4gICAgICA8L2Rpdj5cbiAgICApKTtcblxuICAgIGNvbnN0IG1pblllYXIgPSB0aGlzLnByb3BzLm1pbkRhdGUgPyBnZXRZZWFyKHRoaXMucHJvcHMubWluRGF0ZSkgOiBudWxsO1xuICAgIGNvbnN0IG1heFllYXIgPSB0aGlzLnByb3BzLm1heERhdGUgPyBnZXRZZWFyKHRoaXMucHJvcHMubWF4RGF0ZSkgOiBudWxsO1xuXG4gICAgaWYgKCFtYXhZZWFyIHx8ICF0aGlzLnN0YXRlLnllYXJzTGlzdC5maW5kKCh5ZWFyKSA9PiB5ZWFyID09PSBtYXhZZWFyKSkge1xuICAgICAgb3B0aW9ucy51bnNoaWZ0KFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb25cIlxuICAgICAgICAgIGtleT17XCJ1cGNvbWluZ1wifVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaW5jcmVtZW50WWVhcnN9XG4gICAgICAgID5cbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uIHJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzIHJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzLXVwY29taW5nXCIgLz5cbiAgICAgICAgPC9kaXY+LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIW1pblllYXIgfHwgIXRoaXMuc3RhdGUueWVhcnNMaXN0LmZpbmQoKHllYXIpID0+IHllYXIgPT09IG1pblllYXIpKSB7XG4gICAgICBvcHRpb25zLnB1c2goXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLW9wdGlvblwiXG4gICAgICAgICAga2V5PXtcInByZXZpb3VzXCJ9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5kZWNyZW1lbnRZZWFyc31cbiAgICAgICAgPlxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24gcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMgcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXNcIiAvPlxuICAgICAgICA8L2Rpdj4sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9O1xuXG4gIG9uQ2hhbmdlID0gKHllYXIpID0+IHtcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHllYXIpO1xuICB9O1xuXG4gIGhhbmRsZUNsaWNrT3V0c2lkZSA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLm9uQ2FuY2VsKCk7XG4gIH07XG5cbiAgc2hpZnRZZWFycyA9IChhbW91bnQpID0+IHtcbiAgICBjb25zdCB5ZWFycyA9IHRoaXMuc3RhdGUueWVhcnNMaXN0Lm1hcChmdW5jdGlvbiAoeWVhcikge1xuICAgICAgcmV0dXJuIHllYXIgKyBhbW91bnQ7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHllYXJzTGlzdDogeWVhcnMsXG4gICAgfSk7XG4gIH07XG5cbiAgaW5jcmVtZW50WWVhcnMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuc2hpZnRZZWFycygxKTtcbiAgfTtcblxuICBkZWNyZW1lbnRZZWFycyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5zaGlmdFllYXJzKC0xKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgbGV0IGRyb3Bkb3duQ2xhc3MgPSBjbHN4KHtcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93blwiOiB0cnVlLFxuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLWRyb3Bkb3duLS1zY3JvbGxhYmxlXCI6XG4gICAgICAgIHRoaXMucHJvcHMuc2Nyb2xsYWJsZVllYXJEcm9wZG93bixcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17ZHJvcGRvd25DbGFzc30gcmVmPXt0aGlzLmRyb3Bkb3duUmVmfT5cbiAgICAgICAge3RoaXMucmVuZGVyT3B0aW9ucygpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IFllYXJEcm9wZG93bk9wdGlvbnMgZnJvbSBcIi4veWVhcl9kcm9wZG93bl9vcHRpb25zXCI7XG5pbXBvcnQgb25DbGlja091dHNpZGUgZnJvbSBcInJlYWN0LW9uY2xpY2tvdXRzaWRlXCI7XG5pbXBvcnQgeyBnZXRZZWFyIH0gZnJvbSBcIi4vZGF0ZV91dGlsc1wiO1xuXG5jb25zdCBXcmFwcGVkWWVhckRyb3Bkb3duT3B0aW9ucyA9IG9uQ2xpY2tPdXRzaWRlKFllYXJEcm9wZG93bk9wdGlvbnMpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBZZWFyRHJvcGRvd24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFkanVzdERhdGVPbkNoYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgZHJvcGRvd25Nb2RlOiBQcm9wVHlwZXMub25lT2YoW1wic2Nyb2xsXCIsIFwic2VsZWN0XCJdKS5pc1JlcXVpcmVkLFxuICAgIG1heERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIG1pbkRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNjcm9sbGFibGVZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICAgIHllYXI6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB5ZWFyRHJvcGRvd25JdGVtTnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZXRPcGVuOiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBkcm9wZG93blZpc2libGU6IGZhbHNlLFxuICB9O1xuXG4gIHJlbmRlclNlbGVjdE9wdGlvbnMgPSAoKSA9PiB7XG4gICAgY29uc3QgbWluWWVhciA9IHRoaXMucHJvcHMubWluRGF0ZSA/IGdldFllYXIodGhpcy5wcm9wcy5taW5EYXRlKSA6IDE5MDA7XG4gICAgY29uc3QgbWF4WWVhciA9IHRoaXMucHJvcHMubWF4RGF0ZSA/IGdldFllYXIodGhpcy5wcm9wcy5tYXhEYXRlKSA6IDIxMDA7XG5cbiAgICBjb25zdCBvcHRpb25zID0gW107XG4gICAgZm9yIChsZXQgaSA9IG1pblllYXI7IGkgPD0gbWF4WWVhcjsgaSsrKSB7XG4gICAgICBvcHRpb25zLnB1c2goXG4gICAgICAgIDxvcHRpb24ga2V5PXtpfSB2YWx1ZT17aX0+XG4gICAgICAgICAge2l9XG4gICAgICAgIDwvb3B0aW9uPixcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9O1xuXG4gIG9uU2VsZWN0Q2hhbmdlID0gKGUpID0+IHtcbiAgICB0aGlzLm9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKTtcbiAgfTtcblxuICByZW5kZXJTZWxlY3RNb2RlID0gKCkgPT4gKFxuICAgIDxzZWxlY3RcbiAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnllYXJ9XG4gICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXNlbGVjdFwiXG4gICAgICBvbkNoYW5nZT17dGhpcy5vblNlbGVjdENoYW5nZX1cbiAgICA+XG4gICAgICB7dGhpcy5yZW5kZXJTZWxlY3RPcHRpb25zKCl9XG4gICAgPC9zZWxlY3Q+XG4gICk7XG5cbiAgcmVuZGVyUmVhZFZpZXcgPSAodmlzaWJsZSkgPT4gKFxuICAgIDxkaXZcbiAgICAgIGtleT1cInJlYWRcIlxuICAgICAgc3R5bGU9e3sgdmlzaWJpbGl0eTogdmlzaWJsZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIiB9fVxuICAgICAgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXdcIlxuICAgICAgb25DbGljaz17KGV2ZW50KSA9PiB0aGlzLnRvZ2dsZURyb3Bkb3duKGV2ZW50KX1cbiAgICA+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvd1wiIC8+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tc2VsZWN0ZWQteWVhclwiPlxuICAgICAgICB7dGhpcy5wcm9wcy55ZWFyfVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICApO1xuXG4gIHJlbmRlckRyb3Bkb3duID0gKCkgPT4gKFxuICAgIDxXcmFwcGVkWWVhckRyb3Bkb3duT3B0aW9uc1xuICAgICAga2V5PVwiZHJvcGRvd25cIlxuICAgICAgeWVhcj17dGhpcy5wcm9wcy55ZWFyfVxuICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICBvbkNhbmNlbD17dGhpcy50b2dnbGVEcm9wZG93bn1cbiAgICAgIG1pbkRhdGU9e3RoaXMucHJvcHMubWluRGF0ZX1cbiAgICAgIG1heERhdGU9e3RoaXMucHJvcHMubWF4RGF0ZX1cbiAgICAgIHNjcm9sbGFibGVZZWFyRHJvcGRvd249e3RoaXMucHJvcHMuc2Nyb2xsYWJsZVllYXJEcm9wZG93bn1cbiAgICAgIHllYXJEcm9wZG93bkl0ZW1OdW1iZXI9e3RoaXMucHJvcHMueWVhckRyb3Bkb3duSXRlbU51bWJlcn1cbiAgICAvPlxuICApO1xuXG4gIHJlbmRlclNjcm9sbE1vZGUgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBkcm9wZG93blZpc2libGUgfSA9IHRoaXMuc3RhdGU7XG4gICAgbGV0IHJlc3VsdCA9IFt0aGlzLnJlbmRlclJlYWRWaWV3KCFkcm9wZG93blZpc2libGUpXTtcbiAgICBpZiAoZHJvcGRvd25WaXNpYmxlKSB7XG4gICAgICByZXN1bHQudW5zaGlmdCh0aGlzLnJlbmRlckRyb3Bkb3duKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIG9uQ2hhbmdlID0gKHllYXIpID0+IHtcbiAgICB0aGlzLnRvZ2dsZURyb3Bkb3duKCk7XG4gICAgaWYgKHllYXIgPT09IHRoaXMucHJvcHMueWVhcikgcmV0dXJuO1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UoeWVhcik7XG4gIH07XG5cbiAgdG9nZ2xlRHJvcGRvd24gPSAoZXZlbnQpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAge1xuICAgICAgICBkcm9wZG93blZpc2libGU6ICF0aGlzLnN0YXRlLmRyb3Bkb3duVmlzaWJsZSxcbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFkanVzdERhdGVPbkNoYW5nZSkge1xuICAgICAgICAgIHRoaXMuaGFuZGxlWWVhckNoYW5nZSh0aGlzLnByb3BzLmRhdGUsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApO1xuICB9O1xuXG4gIGhhbmRsZVllYXJDaGFuZ2UgPSAoZGF0ZSwgZXZlbnQpID0+IHtcbiAgICB0aGlzLm9uU2VsZWN0KGRhdGUsIGV2ZW50KTtcbiAgICB0aGlzLnNldE9wZW4oKTtcbiAgfTtcblxuICBvblNlbGVjdCA9IChkYXRlLCBldmVudCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLm9uU2VsZWN0KSB7XG4gICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KGRhdGUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgc2V0T3BlbiA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5zZXRPcGVuKSB7XG4gICAgICB0aGlzLnByb3BzLnNldE9wZW4odHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgcmVuZGVyZWREcm9wZG93bjtcbiAgICBzd2l0Y2ggKHRoaXMucHJvcHMuZHJvcGRvd25Nb2RlKSB7XG4gICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgIHJlbmRlcmVkRHJvcGRvd24gPSB0aGlzLnJlbmRlclNjcm9sbE1vZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIHJlbmRlcmVkRHJvcGRvd24gPSB0aGlzLnJlbmRlclNlbGVjdE1vZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtgcmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bi1jb250YWluZXIgcmVhY3QtZGF0ZXBpY2tlcl9feWVhci1kcm9wZG93bi1jb250YWluZXItLSR7dGhpcy5wcm9wcy5kcm9wZG93bk1vZGV9YH1cbiAgICAgID5cbiAgICAgICAge3JlbmRlcmVkRHJvcGRvd259XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbnRoRHJvcGRvd25PcHRpb25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBtb250aDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIG1vbnRoTmFtZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCkuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBpc1NlbGVjdGVkTW9udGggPSAoaSkgPT4gdGhpcy5wcm9wcy5tb250aCA9PT0gaTtcblxuICByZW5kZXJPcHRpb25zID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLnByb3BzLm1vbnRoTmFtZXMubWFwKChtb250aCwgaSkgPT4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e1xuICAgICAgICAgIHRoaXMuaXNTZWxlY3RlZE1vbnRoKGkpXG4gICAgICAgICAgICA/IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uIHJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbi0tc2VsZWN0ZWRfbW9udGhcIlxuICAgICAgICAgICAgOiBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvblwiXG4gICAgICAgIH1cbiAgICAgICAga2V5PXttb250aH1cbiAgICAgICAgb25DbGljaz17dGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMsIGkpfVxuICAgICAgICBhcmlhLXNlbGVjdGVkPXt0aGlzLmlzU2VsZWN0ZWRNb250aChpKSA/IFwidHJ1ZVwiIDogdW5kZWZpbmVkfVxuICAgICAgPlxuICAgICAgICB7dGhpcy5pc1NlbGVjdGVkTW9udGgoaSkgPyAoXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uLS1zZWxlY3RlZFwiPuKckzwvc3Bhbj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICBcIlwiXG4gICAgICAgICl9XG4gICAgICAgIHttb250aH1cbiAgICAgIDwvZGl2PlxuICAgICkpO1xuICB9O1xuXG4gIG9uQ2hhbmdlID0gKG1vbnRoKSA9PiB0aGlzLnByb3BzLm9uQ2hhbmdlKG1vbnRoKTtcblxuICBoYW5kbGVDbGlja091dHNpZGUgPSAoKSA9PiB0aGlzLnByb3BzLm9uQ2FuY2VsKCk7XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWRyb3Bkb3duXCI+XG4gICAgICAgIHt0aGlzLnJlbmRlck9wdGlvbnMoKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBNb250aERyb3Bkb3duT3B0aW9ucyBmcm9tIFwiLi9tb250aF9kcm9wZG93bl9vcHRpb25zXCI7XG5pbXBvcnQgb25DbGlja091dHNpZGUgZnJvbSBcInJlYWN0LW9uY2xpY2tvdXRzaWRlXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi9kYXRlX3V0aWxzXCI7XG5cbmNvbnN0IFdyYXBwZWRNb250aERyb3Bkb3duT3B0aW9ucyA9IG9uQ2xpY2tPdXRzaWRlKE1vbnRoRHJvcGRvd25PcHRpb25zKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9udGhEcm9wZG93biBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZHJvcGRvd25Nb2RlOiBQcm9wVHlwZXMub25lT2YoW1wic2Nyb2xsXCIsIFwic2VsZWN0XCJdKS5pc1JlcXVpcmVkLFxuICAgIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtb250aDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVzZVNob3J0TW9udGhJbkRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBkcm9wZG93blZpc2libGU6IGZhbHNlLFxuICB9O1xuXG4gIHJlbmRlclNlbGVjdE9wdGlvbnMgPSAobW9udGhOYW1lcykgPT5cbiAgICBtb250aE5hbWVzLm1hcCgoTSwgaSkgPT4gKFxuICAgICAgPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtpfT5cbiAgICAgICAge019XG4gICAgICA8L29wdGlvbj5cbiAgICApKTtcblxuICByZW5kZXJTZWxlY3RNb2RlID0gKG1vbnRoTmFtZXMpID0+IChcbiAgICA8c2VsZWN0XG4gICAgICB2YWx1ZT17dGhpcy5wcm9wcy5tb250aH1cbiAgICAgIGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXNlbGVjdFwiXG4gICAgICBvbkNoYW5nZT17KGUpID0+IHRoaXMub25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgID5cbiAgICAgIHt0aGlzLnJlbmRlclNlbGVjdE9wdGlvbnMobW9udGhOYW1lcyl9XG4gICAgPC9zZWxlY3Q+XG4gICk7XG5cbiAgcmVuZGVyUmVhZFZpZXcgPSAodmlzaWJsZSwgbW9udGhOYW1lcykgPT4gKFxuICAgIDxkaXZcbiAgICAgIGtleT1cInJlYWRcIlxuICAgICAgc3R5bGU9e3sgdmlzaWJpbGl0eTogdmlzaWJsZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIiB9fVxuICAgICAgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3XCJcbiAgICAgIG9uQ2xpY2s9e3RoaXMudG9nZ2xlRHJvcGRvd259XG4gICAgPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93XCIgLz5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tc2VsZWN0ZWQtbW9udGhcIj5cbiAgICAgICAge21vbnRoTmFtZXNbdGhpcy5wcm9wcy5tb250aF19XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgcmVuZGVyRHJvcGRvd24gPSAobW9udGhOYW1lcykgPT4gKFxuICAgIDxXcmFwcGVkTW9udGhEcm9wZG93bk9wdGlvbnNcbiAgICAgIGtleT1cImRyb3Bkb3duXCJcbiAgICAgIG1vbnRoPXt0aGlzLnByb3BzLm1vbnRofVxuICAgICAgbW9udGhOYW1lcz17bW9udGhOYW1lc31cbiAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgb25DYW5jZWw9e3RoaXMudG9nZ2xlRHJvcGRvd259XG4gICAgLz5cbiAgKTtcblxuICByZW5kZXJTY3JvbGxNb2RlID0gKG1vbnRoTmFtZXMpID0+IHtcbiAgICBjb25zdCB7IGRyb3Bkb3duVmlzaWJsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgcmVzdWx0ID0gW3RoaXMucmVuZGVyUmVhZFZpZXcoIWRyb3Bkb3duVmlzaWJsZSwgbW9udGhOYW1lcyldO1xuICAgIGlmIChkcm9wZG93blZpc2libGUpIHtcbiAgICAgIHJlc3VsdC51bnNoaWZ0KHRoaXMucmVuZGVyRHJvcGRvd24obW9udGhOYW1lcykpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIG9uQ2hhbmdlID0gKG1vbnRoKSA9PiB7XG4gICAgdGhpcy50b2dnbGVEcm9wZG93bigpO1xuICAgIGlmIChtb250aCAhPT0gdGhpcy5wcm9wcy5tb250aCkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShtb250aCk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZURyb3Bkb3duID0gKCkgPT5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyb3Bkb3duVmlzaWJsZTogIXRoaXMuc3RhdGUuZHJvcGRvd25WaXNpYmxlLFxuICAgIH0pO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBtb250aE5hbWVzID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMV0ubWFwKFxuICAgICAgdGhpcy5wcm9wcy51c2VTaG9ydE1vbnRoSW5Ecm9wZG93blxuICAgICAgICA/IChNKSA9PiB1dGlscy5nZXRNb250aFNob3J0SW5Mb2NhbGUoTSwgdGhpcy5wcm9wcy5sb2NhbGUpXG4gICAgICAgIDogKE0pID0+IHV0aWxzLmdldE1vbnRoSW5Mb2NhbGUoTSwgdGhpcy5wcm9wcy5sb2NhbGUpLFxuICAgICk7XG5cbiAgICBsZXQgcmVuZGVyZWREcm9wZG93bjtcbiAgICBzd2l0Y2ggKHRoaXMucHJvcHMuZHJvcGRvd25Nb2RlKSB7XG4gICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgIHJlbmRlcmVkRHJvcGRvd24gPSB0aGlzLnJlbmRlclNjcm9sbE1vZGUobW9udGhOYW1lcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICByZW5kZXJlZERyb3Bkb3duID0gdGhpcy5yZW5kZXJTZWxlY3RNb2RlKG1vbnRoTmFtZXMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2ByZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bi1jb250YWluZXIgcmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd24tY29udGFpbmVyLS0ke3RoaXMucHJvcHMuZHJvcGRvd25Nb2RlfWB9XG4gICAgICA+XG4gICAgICAgIHtyZW5kZXJlZERyb3Bkb3dufVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY2xzeCB9IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQge1xuICBhZGRNb250aHMsXG4gIGZvcm1hdERhdGUsXG4gIGdldFN0YXJ0T2ZNb250aCxcbiAgbmV3RGF0ZSxcbiAgaXNBZnRlcixcbiAgaXNTYW1lTW9udGgsXG4gIGlzU2FtZVllYXIsXG4gIGdldFRpbWUsXG59IGZyb20gXCIuL2RhdGVfdXRpbHNcIjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVNb250aFllYXJzKG1pbkRhdGUsIG1heERhdGUpIHtcbiAgY29uc3QgbGlzdCA9IFtdO1xuXG4gIGxldCBjdXJyRGF0ZSA9IGdldFN0YXJ0T2ZNb250aChtaW5EYXRlKTtcbiAgY29uc3QgbGFzdERhdGUgPSBnZXRTdGFydE9mTW9udGgobWF4RGF0ZSk7XG5cbiAgd2hpbGUgKCFpc0FmdGVyKGN1cnJEYXRlLCBsYXN0RGF0ZSkpIHtcbiAgICBsaXN0LnB1c2gobmV3RGF0ZShjdXJyRGF0ZSkpO1xuXG4gICAgY3VyckRhdGUgPSBhZGRNb250aHMoY3VyckRhdGUsIDEpO1xuICB9XG4gIHJldHVybiBsaXN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb250aFllYXJEcm9wZG93bk9wdGlvbnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG1pbkRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gICAgbWF4RGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICAgIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gICAgZGF0ZUZvcm1hdDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxvY2FsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtb250aFllYXJzTGlzdDogZ2VuZXJhdGVNb250aFllYXJzKFxuICAgICAgICB0aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgIHRoaXMucHJvcHMubWF4RGF0ZSxcbiAgICAgICksXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlck9wdGlvbnMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUubW9udGhZZWFyc0xpc3QubWFwKChtb250aFllYXIpID0+IHtcbiAgICAgIGNvbnN0IG1vbnRoWWVhclBvaW50ID0gZ2V0VGltZShtb250aFllYXIpO1xuICAgICAgY29uc3QgaXNTYW1lTW9udGhZZWFyID1cbiAgICAgICAgaXNTYW1lWWVhcih0aGlzLnByb3BzLmRhdGUsIG1vbnRoWWVhcikgJiZcbiAgICAgICAgaXNTYW1lTW9udGgodGhpcy5wcm9wcy5kYXRlLCBtb250aFllYXIpO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICAgIGlzU2FtZU1vbnRoWWVhclxuICAgICAgICAgICAgICA/IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb24tLXNlbGVjdGVkX21vbnRoLXllYXJcIlxuICAgICAgICAgICAgICA6IFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb25cIlxuICAgICAgICAgIH1cbiAgICAgICAgICBrZXk9e21vbnRoWWVhclBvaW50fVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzLCBtb250aFllYXJQb2ludCl9XG4gICAgICAgICAgYXJpYS1zZWxlY3RlZD17aXNTYW1lTW9udGhZZWFyID8gXCJ0cnVlXCIgOiB1bmRlZmluZWR9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNTYW1lTW9udGhZZWFyID8gKFxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb24tLXNlbGVjdGVkXCI+XG4gICAgICAgICAgICAgIOKck1xuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICBcIlwiXG4gICAgICAgICAgKX1cbiAgICAgICAgICB7Zm9ybWF0RGF0ZShtb250aFllYXIsIHRoaXMucHJvcHMuZGF0ZUZvcm1hdCwgdGhpcy5wcm9wcy5sb2NhbGUpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgb25DaGFuZ2UgPSAobW9udGhZZWFyKSA9PiB0aGlzLnByb3BzLm9uQ2hhbmdlKG1vbnRoWWVhcik7XG5cbiAgaGFuZGxlQ2xpY2tPdXRzaWRlID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMub25DYW5jZWwoKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgbGV0IGRyb3Bkb3duQ2xhc3MgPSBjbHN4KHtcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1kcm9wZG93blwiOiB0cnVlLFxuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duLS1zY3JvbGxhYmxlXCI6XG4gICAgICAgIHRoaXMucHJvcHMuc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3duLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtkcm9wZG93bkNsYXNzfT57dGhpcy5yZW5kZXJPcHRpb25zKCl9PC9kaXY+O1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgTW9udGhZZWFyRHJvcGRvd25PcHRpb25zIGZyb20gXCIuL21vbnRoX3llYXJfZHJvcGRvd25fb3B0aW9uc1wiO1xuaW1wb3J0IG9uQ2xpY2tPdXRzaWRlIGZyb20gXCJyZWFjdC1vbmNsaWNrb3V0c2lkZVwiO1xuaW1wb3J0IHtcbiAgYWRkTW9udGhzLFxuICBmb3JtYXREYXRlLFxuICBnZXRTdGFydE9mTW9udGgsXG4gIGlzQWZ0ZXIsXG4gIGlzU2FtZU1vbnRoLFxuICBpc1NhbWVZZWFyLFxuICBuZXdEYXRlLFxuICBnZXRUaW1lLFxufSBmcm9tIFwiLi9kYXRlX3V0aWxzXCI7XG5cbnZhciBXcmFwcGVkTW9udGhZZWFyRHJvcGRvd25PcHRpb25zID0gb25DbGlja091dHNpZGUoTW9udGhZZWFyRHJvcGRvd25PcHRpb25zKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9udGhZZWFyRHJvcGRvd24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGRyb3Bkb3duTW9kZTogUHJvcFR5cGVzLm9uZU9mKFtcInNjcm9sbFwiLCBcInNlbGVjdFwiXSkuaXNSZXF1aXJlZCxcbiAgICBkYXRlRm9ybWF0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgbG9jYWxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1heERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gICAgbWluRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgICBkYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgZHJvcGRvd25WaXNpYmxlOiBmYWxzZSxcbiAgfTtcblxuICByZW5kZXJTZWxlY3RPcHRpb25zID0gKCkgPT4ge1xuICAgIGxldCBjdXJyRGF0ZSA9IGdldFN0YXJ0T2ZNb250aCh0aGlzLnByb3BzLm1pbkRhdGUpO1xuICAgIGNvbnN0IGxhc3REYXRlID0gZ2V0U3RhcnRPZk1vbnRoKHRoaXMucHJvcHMubWF4RGF0ZSk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuXG4gICAgd2hpbGUgKCFpc0FmdGVyKGN1cnJEYXRlLCBsYXN0RGF0ZSkpIHtcbiAgICAgIGNvbnN0IHRpbWVQb2ludCA9IGdldFRpbWUoY3VyckRhdGUpO1xuICAgICAgb3B0aW9ucy5wdXNoKFxuICAgICAgICA8b3B0aW9uIGtleT17dGltZVBvaW50fSB2YWx1ZT17dGltZVBvaW50fT5cbiAgICAgICAgICB7Zm9ybWF0RGF0ZShjdXJyRGF0ZSwgdGhpcy5wcm9wcy5kYXRlRm9ybWF0LCB0aGlzLnByb3BzLmxvY2FsZSl9XG4gICAgICAgIDwvb3B0aW9uPixcbiAgICAgICk7XG5cbiAgICAgIGN1cnJEYXRlID0gYWRkTW9udGhzKGN1cnJEYXRlLCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfTtcblxuICBvblNlbGVjdENoYW5nZSA9IChlKSA9PiB7XG4gICAgdGhpcy5vbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gIH07XG5cbiAgcmVuZGVyU2VsZWN0TW9kZSA9ICgpID0+IChcbiAgICA8c2VsZWN0XG4gICAgICB2YWx1ZT17Z2V0VGltZShnZXRTdGFydE9mTW9udGgodGhpcy5wcm9wcy5kYXRlKSl9XG4gICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXNlbGVjdFwiXG4gICAgICBvbkNoYW5nZT17dGhpcy5vblNlbGVjdENoYW5nZX1cbiAgICA+XG4gICAgICB7dGhpcy5yZW5kZXJTZWxlY3RPcHRpb25zKCl9XG4gICAgPC9zZWxlY3Q+XG4gICk7XG5cbiAgcmVuZGVyUmVhZFZpZXcgPSAodmlzaWJsZSkgPT4ge1xuICAgIGNvbnN0IHllYXJNb250aCA9IGZvcm1hdERhdGUoXG4gICAgICB0aGlzLnByb3BzLmRhdGUsXG4gICAgICB0aGlzLnByb3BzLmRhdGVGb3JtYXQsXG4gICAgICB0aGlzLnByb3BzLmxvY2FsZSxcbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAga2V5PVwicmVhZFwiXG4gICAgICAgIHN0eWxlPXt7IHZpc2liaWxpdHk6IHZpc2libGUgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCIgfX1cbiAgICAgICAgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXdcIlxuICAgICAgICBvbkNsaWNrPXsoZXZlbnQpID0+IHRoaXMudG9nZ2xlRHJvcGRvd24oZXZlbnQpfVxuICAgICAgPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvd1wiIC8+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3LS1zZWxlY3RlZC1tb250aC15ZWFyXCI+XG4gICAgICAgICAge3llYXJNb250aH1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJEcm9wZG93biA9ICgpID0+IChcbiAgICA8V3JhcHBlZE1vbnRoWWVhckRyb3Bkb3duT3B0aW9uc1xuICAgICAga2V5PVwiZHJvcGRvd25cIlxuICAgICAgZGF0ZT17dGhpcy5wcm9wcy5kYXRlfVxuICAgICAgZGF0ZUZvcm1hdD17dGhpcy5wcm9wcy5kYXRlRm9ybWF0fVxuICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2V9XG4gICAgICBvbkNhbmNlbD17dGhpcy50b2dnbGVEcm9wZG93bn1cbiAgICAgIG1pbkRhdGU9e3RoaXMucHJvcHMubWluRGF0ZX1cbiAgICAgIG1heERhdGU9e3RoaXMucHJvcHMubWF4RGF0ZX1cbiAgICAgIHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bj17dGhpcy5wcm9wcy5zY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd259XG4gICAgICBsb2NhbGU9e3RoaXMucHJvcHMubG9jYWxlfVxuICAgIC8+XG4gICk7XG5cbiAgcmVuZGVyU2Nyb2xsTW9kZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGRyb3Bkb3duVmlzaWJsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgcmVzdWx0ID0gW3RoaXMucmVuZGVyUmVhZFZpZXcoIWRyb3Bkb3duVmlzaWJsZSldO1xuICAgIGlmIChkcm9wZG93blZpc2libGUpIHtcbiAgICAgIHJlc3VsdC51bnNoaWZ0KHRoaXMucmVuZGVyRHJvcGRvd24oKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgb25DaGFuZ2UgPSAobW9udGhZZWFyUG9pbnQpID0+IHtcbiAgICB0aGlzLnRvZ2dsZURyb3Bkb3duKCk7XG5cbiAgICBjb25zdCBjaGFuZ2VkRGF0ZSA9IG5ld0RhdGUocGFyc2VJbnQobW9udGhZZWFyUG9pbnQpKTtcblxuICAgIGlmIChcbiAgICAgIGlzU2FtZVllYXIodGhpcy5wcm9wcy5kYXRlLCBjaGFuZ2VkRGF0ZSkgJiZcbiAgICAgIGlzU2FtZU1vbnRoKHRoaXMucHJvcHMuZGF0ZSwgY2hhbmdlZERhdGUpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZShjaGFuZ2VkRGF0ZSk7XG4gIH07XG5cbiAgdG9nZ2xlRHJvcGRvd24gPSAoKSA9PlxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZHJvcGRvd25WaXNpYmxlOiAhdGhpcy5zdGF0ZS5kcm9wZG93blZpc2libGUsXG4gICAgfSk7XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCByZW5kZXJlZERyb3Bkb3duO1xuICAgIHN3aXRjaCAodGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpIHtcbiAgICAgIGNhc2UgXCJzY3JvbGxcIjpcbiAgICAgICAgcmVuZGVyZWREcm9wZG93biA9IHRoaXMucmVuZGVyU2Nyb2xsTW9kZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgcmVuZGVyZWREcm9wZG93biA9IHRoaXMucmVuZGVyU2VsZWN0TW9kZSgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2ByZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duLWNvbnRhaW5lciByZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duLWNvbnRhaW5lci0tJHt0aGlzLnByb3BzLmRyb3Bkb3duTW9kZX1gfVxuICAgICAgPlxuICAgICAgICB7cmVuZGVyZWREcm9wZG93bn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNsc3ggfSBmcm9tIFwiY2xzeFwiO1xuaW1wb3J0IHtcbiAgZ2V0RGF5LFxuICBnZXRNb250aCxcbiAgZ2V0RGF0ZSxcbiAgbmV3RGF0ZSxcbiAgaXNTYW1lRGF5LFxuICBpc0RheURpc2FibGVkLFxuICBpc0RheUV4Y2x1ZGVkLFxuICBpc0RheUluUmFuZ2UsXG4gIGlzRXF1YWwsXG4gIGlzQmVmb3JlLFxuICBpc0FmdGVyLFxuICBnZXREYXlPZldlZWtDb2RlLFxuICBnZXRTdGFydE9mV2VlayxcbiAgZm9ybWF0RGF0ZSxcbn0gZnJvbSBcIi4vZGF0ZV91dGlsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFyaWFMYWJlbFByZWZpeFdoZW5FbmFibGVkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFyaWFMYWJlbFByZWZpeFdoZW5EaXNhYmxlZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGF5OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICAgIGRheUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZW5kRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgaGlnaGxpZ2h0RGF0ZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCksXG4gICAgaG9saWRheXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCksXG4gICAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG91bGRGb2N1c0RheUlubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgbW9udGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdXNlUG9pbnRlckV2ZW50OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHByZVNlbGVjdGlvbjogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2VsZWN0aW5nRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgc2VsZWN0c0VuZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0c1N0YXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RzUmFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dXZWVrUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93V2Vla051bWJlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdHNNdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0ZWREYXRlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkpLFxuICAgIHN0YXJ0RGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgcmVuZGVyRGF5Q29udGVudHM6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZU9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgY29udGFpbmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHsgY3VycmVudDogUHJvcFR5cGVzLm9iamVjdCB9KSxcbiAgICBdKSxcbiAgICBtb250aFNob3dzRHVwbGljYXRlRGF5c0VuZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbW9udGhTaG93c0R1cGxpY2F0ZURheXNTdGFydDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoeyBsb2NhbGU6IFByb3BUeXBlcy5vYmplY3QgfSksXG4gICAgXSksXG4gICAgY2FsZW5kYXJTdGFydERheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGNsdWRlRGF0ZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gICAgICAgICAgbWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgfSksXG4gICAgICBdKSxcbiAgICApLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuaGFuZGxlRm9jdXNEYXkoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB0aGlzLmhhbmRsZUZvY3VzRGF5KHByZXZQcm9wcyk7XG4gIH1cblxuICBkYXlFbCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuXG4gIGhhbmRsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQoKSAmJiB0aGlzLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgIHRoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZU1vdXNlRW50ZXIgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCgpICYmIHRoaXMucHJvcHMub25Nb3VzZUVudGVyKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTW91c2VFbnRlcihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZU9uS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50S2V5ID0gZXZlbnQua2V5O1xuICAgIGlmIChldmVudEtleSA9PT0gXCIgXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5rZXkgPSBcIkVudGVyXCI7XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5oYW5kbGVPbktleURvd24oZXZlbnQpO1xuICB9O1xuXG4gIGlzU2FtZURheSA9IChvdGhlcikgPT4gaXNTYW1lRGF5KHRoaXMucHJvcHMuZGF5LCBvdGhlcik7XG5cbiAgaXNLZXlib2FyZFNlbGVjdGVkID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgaXNTZWxlY3RlZERhdGUgPSB0aGlzLnByb3BzLnNlbGVjdHNNdWx0aXBsZVxuICAgICAgPyB0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZXM/LnNvbWUoKGRhdGUpID0+IHRoaXMuaXNTYW1lRGF5T3JXZWVrKGRhdGUpKVxuICAgICAgOiB0aGlzLmlzU2FtZURheU9yV2Vlayh0aGlzLnByb3BzLnNlbGVjdGVkKTtcblxuICAgIHJldHVybiAhaXNTZWxlY3RlZERhdGUgJiYgdGhpcy5pc1NhbWVEYXlPcldlZWsodGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pO1xuICB9O1xuXG4gIGlzRGlzYWJsZWQgPSAoKSA9PiBpc0RheURpc2FibGVkKHRoaXMucHJvcHMuZGF5LCB0aGlzLnByb3BzKTtcblxuICBpc0V4Y2x1ZGVkID0gKCkgPT4gaXNEYXlFeGNsdWRlZCh0aGlzLnByb3BzLmRheSwgdGhpcy5wcm9wcyk7XG5cbiAgaXNTdGFydE9mV2VlayA9ICgpID0+XG4gICAgaXNTYW1lRGF5KFxuICAgICAgdGhpcy5wcm9wcy5kYXksXG4gICAgICBnZXRTdGFydE9mV2VlayhcbiAgICAgICAgdGhpcy5wcm9wcy5kYXksXG4gICAgICAgIHRoaXMucHJvcHMubG9jYWxlLFxuICAgICAgICB0aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXksXG4gICAgICApLFxuICAgICk7XG5cbiAgaXNTYW1lV2VlayA9IChvdGhlcikgPT5cbiAgICB0aGlzLnByb3BzLnNob3dXZWVrUGlja2VyICYmXG4gICAgaXNTYW1lRGF5KFxuICAgICAgb3RoZXIsXG4gICAgICBnZXRTdGFydE9mV2VlayhcbiAgICAgICAgdGhpcy5wcm9wcy5kYXksXG4gICAgICAgIHRoaXMucHJvcHMubG9jYWxlLFxuICAgICAgICB0aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXksXG4gICAgICApLFxuICAgICk7XG5cbiAgaXNTYW1lRGF5T3JXZWVrID0gKG90aGVyKSA9PiB0aGlzLmlzU2FtZURheShvdGhlcikgfHwgdGhpcy5pc1NhbWVXZWVrKG90aGVyKTtcblxuICBnZXRIaWdoTGlnaHRlZENsYXNzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZGF5LCBoaWdobGlnaHREYXRlcyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaGlnaGxpZ2h0RGF0ZXMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBMb29raW5nIGZvciBjbGFzc05hbWUgaW4gdGhlIE1hcCBvZiB7J2RheSBzdHJpbmcsICdjbGFzc05hbWUnfVxuICAgIGNvbnN0IGRheVN0ciA9IGZvcm1hdERhdGUoZGF5LCBcIk1NLmRkLnl5eXlcIik7XG4gICAgcmV0dXJuIGhpZ2hsaWdodERhdGVzLmdldChkYXlTdHIpO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIHRvIHJldHVybiB0aGUgYXJyYXkgY29udGFpbmluZyBjbGFzc25hbWUgYXNzb2NpYXRlZCB0byB0aGUgZGF0ZVxuICBnZXRIb2xpZGF5c0NsYXNzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZGF5LCBob2xpZGF5cyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWhvbGlkYXlzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGRheVN0ciA9IGZvcm1hdERhdGUoZGF5LCBcIk1NLmRkLnl5eXlcIik7XG4gICAgLy8gTG9va2luZyBmb3IgY2xhc3NOYW1lIGluIHRoZSBNYXAgb2Yge2RheSBzdHJpbmc6IHtjbGFzc05hbWUsIGhvbGlkYXlOYW1lfX1cbiAgICBpZiAoaG9saWRheXMuaGFzKGRheVN0cikpIHtcbiAgICAgIHJldHVybiBbaG9saWRheXMuZ2V0KGRheVN0cikuY2xhc3NOYW1lXTtcbiAgICB9XG4gIH07XG5cbiAgaXNJblJhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZGF5LCBzdGFydERhdGUsIGVuZERhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGF5SW5SYW5nZShkYXksIHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG4gIH07XG5cbiAgaXNJblNlbGVjdGluZ1JhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGRheSxcbiAgICAgIHNlbGVjdHNTdGFydCxcbiAgICAgIHNlbGVjdHNFbmQsXG4gICAgICBzZWxlY3RzUmFuZ2UsXG4gICAgICBzZWxlY3RzRGlzYWJsZWREYXlzSW5SYW5nZSxcbiAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgIGVuZERhdGUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzZWxlY3RpbmdEYXRlID0gdGhpcy5wcm9wcy5zZWxlY3RpbmdEYXRlID8/IHRoaXMucHJvcHMucHJlU2VsZWN0aW9uO1xuXG4gICAgaWYgKFxuICAgICAgIShzZWxlY3RzU3RhcnQgfHwgc2VsZWN0c0VuZCB8fCBzZWxlY3RzUmFuZ2UpIHx8XG4gICAgICAhc2VsZWN0aW5nRGF0ZSB8fFxuICAgICAgKCFzZWxlY3RzRGlzYWJsZWREYXlzSW5SYW5nZSAmJiB0aGlzLmlzRGlzYWJsZWQoKSlcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBzZWxlY3RzU3RhcnQgJiZcbiAgICAgIGVuZERhdGUgJiZcbiAgICAgIChpc0JlZm9yZShzZWxlY3RpbmdEYXRlLCBlbmREYXRlKSB8fCBpc0VxdWFsKHNlbGVjdGluZ0RhdGUsIGVuZERhdGUpKVxuICAgICkge1xuICAgICAgcmV0dXJuIGlzRGF5SW5SYW5nZShkYXksIHNlbGVjdGluZ0RhdGUsIGVuZERhdGUpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHNlbGVjdHNFbmQgJiZcbiAgICAgIHN0YXJ0RGF0ZSAmJlxuICAgICAgKGlzQWZ0ZXIoc2VsZWN0aW5nRGF0ZSwgc3RhcnREYXRlKSB8fCBpc0VxdWFsKHNlbGVjdGluZ0RhdGUsIHN0YXJ0RGF0ZSkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gaXNEYXlJblJhbmdlKGRheSwgc3RhcnREYXRlLCBzZWxlY3RpbmdEYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBzZWxlY3RzUmFuZ2UgJiZcbiAgICAgIHN0YXJ0RGF0ZSAmJlxuICAgICAgIWVuZERhdGUgJiZcbiAgICAgIChpc0FmdGVyKHNlbGVjdGluZ0RhdGUsIHN0YXJ0RGF0ZSkgfHwgaXNFcXVhbChzZWxlY3RpbmdEYXRlLCBzdGFydERhdGUpKVxuICAgICkge1xuICAgICAgcmV0dXJuIGlzRGF5SW5SYW5nZShkYXksIHN0YXJ0RGF0ZSwgc2VsZWN0aW5nRGF0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGlzU2VsZWN0aW5nUmFuZ2VTdGFydCA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMuaXNJblNlbGVjdGluZ1JhbmdlKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRheSwgc3RhcnREYXRlLCBzZWxlY3RzU3RhcnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc2VsZWN0aW5nRGF0ZSA9IHRoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSA/PyB0aGlzLnByb3BzLnByZVNlbGVjdGlvbjtcblxuICAgIGlmIChzZWxlY3RzU3RhcnQpIHtcbiAgICAgIHJldHVybiBpc1NhbWVEYXkoZGF5LCBzZWxlY3RpbmdEYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGlzU2FtZURheShkYXksIHN0YXJ0RGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIGlzU2VsZWN0aW5nUmFuZ2VFbmQgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLmlzSW5TZWxlY3RpbmdSYW5nZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgeyBkYXksIGVuZERhdGUsIHNlbGVjdHNFbmQsIHNlbGVjdHNSYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzZWxlY3RpbmdEYXRlID0gdGhpcy5wcm9wcy5zZWxlY3RpbmdEYXRlID8/IHRoaXMucHJvcHMucHJlU2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdHNFbmQgfHwgc2VsZWN0c1JhbmdlKSB7XG4gICAgICByZXR1cm4gaXNTYW1lRGF5KGRheSwgc2VsZWN0aW5nRGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpc1NhbWVEYXkoZGF5LCBlbmREYXRlKTtcbiAgICB9XG4gIH07XG5cbiAgaXNSYW5nZVN0YXJ0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZGF5LCBzdGFydERhdGUsIGVuZERhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzU2FtZURheShzdGFydERhdGUsIGRheSk7XG4gIH07XG5cbiAgaXNSYW5nZUVuZCA9ICgpID0+IHtcbiAgICBjb25zdCB7IGRheSwgc3RhcnREYXRlLCBlbmREYXRlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghc3RhcnREYXRlIHx8ICFlbmREYXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBpc1NhbWVEYXkoZW5kRGF0ZSwgZGF5KTtcbiAgfTtcblxuICBpc1dlZWtlbmQgPSAoKSA9PiB7XG4gICAgY29uc3Qgd2Vla2RheSA9IGdldERheSh0aGlzLnByb3BzLmRheSk7XG4gICAgcmV0dXJuIHdlZWtkYXkgPT09IDAgfHwgd2Vla2RheSA9PT0gNjtcbiAgfTtcblxuICBpc0FmdGVyTW9udGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucHJvcHMubW9udGggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgKHRoaXMucHJvcHMubW9udGggKyAxKSAlIDEyID09PSBnZXRNb250aCh0aGlzLnByb3BzLmRheSlcbiAgICApO1xuICB9O1xuXG4gIGlzQmVmb3JlTW9udGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucHJvcHMubW9udGggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgKGdldE1vbnRoKHRoaXMucHJvcHMuZGF5KSArIDEpICUgMTIgPT09IHRoaXMucHJvcHMubW9udGhcbiAgICApO1xuICB9O1xuXG4gIGlzQ3VycmVudERheSA9ICgpID0+IHRoaXMuaXNTYW1lRGF5KG5ld0RhdGUoKSk7XG5cbiAgaXNTZWxlY3RlZCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RzTXVsdGlwbGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZXM/LnNvbWUoKGRhdGUpID0+XG4gICAgICAgIHRoaXMuaXNTYW1lRGF5T3JXZWVrKGRhdGUpLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lRGF5T3JXZWVrKHRoaXMucHJvcHMuc2VsZWN0ZWQpO1xuICB9O1xuXG4gIGdldENsYXNzTmFtZXMgPSAoZGF0ZSkgPT4ge1xuICAgIGNvbnN0IGRheUNsYXNzTmFtZSA9IHRoaXMucHJvcHMuZGF5Q2xhc3NOYW1lXG4gICAgICA/IHRoaXMucHJvcHMuZGF5Q2xhc3NOYW1lKGRhdGUpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gY2xzeChcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5XCIsXG4gICAgICBkYXlDbGFzc05hbWUsXG4gICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tXCIgKyBnZXREYXlPZldlZWtDb2RlKHRoaXMucHJvcHMuZGF5KSxcbiAgICAgIHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWRpc2FibGVkXCI6IHRoaXMuaXNEaXNhYmxlZCgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tZXhjbHVkZWRcIjogdGhpcy5pc0V4Y2x1ZGVkKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1zZWxlY3RlZFwiOiB0aGlzLmlzU2VsZWN0ZWQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWtleWJvYXJkLXNlbGVjdGVkXCI6IHRoaXMuaXNLZXlib2FyZFNlbGVjdGVkKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1yYW5nZS1zdGFydFwiOiB0aGlzLmlzUmFuZ2VTdGFydCgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tcmFuZ2UtZW5kXCI6IHRoaXMuaXNSYW5nZUVuZCgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tcmFuZ2VcIjogdGhpcy5pc0luUmFuZ2UoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWluLXNlbGVjdGluZy1yYW5nZVwiOiB0aGlzLmlzSW5TZWxlY3RpbmdSYW5nZSgpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tc2VsZWN0aW5nLXJhbmdlLXN0YXJ0XCI6XG4gICAgICAgICAgdGhpcy5pc1NlbGVjdGluZ1JhbmdlU3RhcnQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXNlbGVjdGluZy1yYW5nZS1lbmRcIjpcbiAgICAgICAgICB0aGlzLmlzU2VsZWN0aW5nUmFuZ2VFbmQoKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXRvZGF5XCI6IHRoaXMuaXNDdXJyZW50RGF5KCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS13ZWVrZW5kXCI6IHRoaXMuaXNXZWVrZW5kKCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1vdXRzaWRlLW1vbnRoXCI6XG4gICAgICAgICAgdGhpcy5pc0FmdGVyTW9udGgoKSB8fCB0aGlzLmlzQmVmb3JlTW9udGgoKSxcbiAgICAgIH0sXG4gICAgICB0aGlzLmdldEhpZ2hMaWdodGVkQ2xhc3MoXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWhpZ2hsaWdodGVkXCIpLFxuICAgICAgdGhpcy5nZXRIb2xpZGF5c0NsYXNzKCksXG4gICAgKTtcbiAgfTtcblxuICBnZXRBcmlhTGFiZWwgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZGF5LFxuICAgICAgYXJpYUxhYmVsUHJlZml4V2hlbkVuYWJsZWQgPSBcIkNob29zZVwiLFxuICAgICAgYXJpYUxhYmVsUHJlZml4V2hlbkRpc2FibGVkID0gXCJOb3QgYXZhaWxhYmxlXCIsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBwcmVmaXggPVxuICAgICAgdGhpcy5pc0Rpc2FibGVkKCkgfHwgdGhpcy5pc0V4Y2x1ZGVkKClcbiAgICAgICAgPyBhcmlhTGFiZWxQcmVmaXhXaGVuRGlzYWJsZWRcbiAgICAgICAgOiBhcmlhTGFiZWxQcmVmaXhXaGVuRW5hYmxlZDtcblxuICAgIHJldHVybiBgJHtwcmVmaXh9ICR7Zm9ybWF0RGF0ZShkYXksIFwiUFBQUFwiLCB0aGlzLnByb3BzLmxvY2FsZSl9YDtcbiAgfTtcblxuICAvLyBBIGZ1bmN0aW9uIHRvIHJldHVybiB0aGUgaG9saWRheSdzIG5hbWUgYXMgdGl0bGUncyBjb250ZW50XG4gIGdldFRpdGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZGF5LCBob2xpZGF5cyA9IG5ldyBNYXAoKSwgZXhjbHVkZURhdGVzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNvbXBhcmVEdCA9IGZvcm1hdERhdGUoZGF5LCBcIk1NLmRkLnl5eXlcIik7XG4gICAgY29uc3QgdGl0bGVzID0gW107XG4gICAgaWYgKGhvbGlkYXlzLmhhcyhjb21wYXJlRHQpKSB7XG4gICAgICB0aXRsZXMucHVzaCguLi5ob2xpZGF5cy5nZXQoY29tcGFyZUR0KS5ob2xpZGF5TmFtZXMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0V4Y2x1ZGVkKCkpIHtcbiAgICAgIHRpdGxlcy5wdXNoKFxuICAgICAgICBleGNsdWRlRGF0ZXNcbiAgICAgICAgICA/LmZpbHRlcigoZXhjbHVkZURhdGUpID0+XG4gICAgICAgICAgICBpc1NhbWVEYXkoZXhjbHVkZURhdGUuZGF0ZSA/IGV4Y2x1ZGVEYXRlLmRhdGUgOiBleGNsdWRlRGF0ZSwgZGF5KSxcbiAgICAgICAgICApXG4gICAgICAgICAgLm1hcCgoZXhjbHVkZURhdGUpID0+IGV4Y2x1ZGVEYXRlLm1lc3NhZ2UpLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRpdGxlcy5qb2luKFwiLCBcIik7XG4gIH07XG5cbiAgZ2V0VGFiSW5kZXggPSAoc2VsZWN0ZWQsIHByZVNlbGVjdGlvbikgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkRGF5ID0gc2VsZWN0ZWQgfHwgdGhpcy5wcm9wcy5zZWxlY3RlZDtcbiAgICBjb25zdCBwcmVTZWxlY3Rpb25EYXkgPSBwcmVTZWxlY3Rpb24gfHwgdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb247XG4gICAgY29uc3QgdGFiSW5kZXggPVxuICAgICAgIShcbiAgICAgICAgdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlciAmJlxuICAgICAgICAodGhpcy5wcm9wcy5zaG93V2Vla051bWJlciB8fCAhdGhpcy5pc1N0YXJ0T2ZXZWVrKCkpXG4gICAgICApICYmXG4gICAgICAodGhpcy5pc0tleWJvYXJkU2VsZWN0ZWQoKSB8fFxuICAgICAgICAodGhpcy5pc1NhbWVEYXkoc2VsZWN0ZWREYXkpICYmXG4gICAgICAgICAgaXNTYW1lRGF5KHByZVNlbGVjdGlvbkRheSwgc2VsZWN0ZWREYXkpKSlcbiAgICAgICAgPyAwXG4gICAgICAgIDogLTE7XG5cbiAgICByZXR1cm4gdGFiSW5kZXg7XG4gIH07XG5cbiAgLy8gdmFyaW91cyBjYXNlcyB3aGVuIHdlIG5lZWQgdG8gYXBwbHkgZm9jdXMgdG8gdGhlIHByZXNlbGVjdGVkIGRheVxuICAvLyBmb2N1cyB0aGUgZGF5IG9uIG1vdW50L3VwZGF0ZSBzbyB0aGF0IGtleWJvYXJkIG5hdmlnYXRpb24gd29ya3Mgd2hpbGUgY3ljbGluZyB0aHJvdWdoIG1vbnRocyB3aXRoIHVwIG9yIGRvd24ga2V5cyAobm90IGZvciBwcmV2IGFuZCBuZXh0IG1vbnRoIGJ1dHRvbnMpXG4gIC8vIHByZXZlbnQgZm9jdXMgZm9yIHRoZXNlIGFjdGl2ZUVsZW1lbnQgY2FzZXMgc28gd2UgZG9uJ3QgcHVsbCBmb2N1cyBmcm9tIHRoZSBpbnB1dCBhcyB0aGUgY2FsZW5kYXIgb3BlbnNcbiAgaGFuZGxlRm9jdXNEYXkgPSAocHJldlByb3BzID0ge30pID0+IHtcbiAgICBsZXQgc2hvdWxkRm9jdXNEYXkgPSBmYWxzZTtcbiAgICAvLyBvbmx5IGRvIHRoaXMgd2hpbGUgdGhlIGlucHV0IGlzbid0IGZvY3VzZWRcbiAgICAvLyBvdGhlcndpc2UsIHR5cGluZy9iYWNrc3BhY2luZyB0aGUgZGF0ZSBtYW51YWxseSBtYXkgc3RlYWwgZm9jdXMgYXdheSBmcm9tIHRoZSBpbnB1dFxuICAgIGlmIChcbiAgICAgIHRoaXMuZ2V0VGFiSW5kZXgoKSA9PT0gMCAmJlxuICAgICAgIXByZXZQcm9wcy5pc0lucHV0Rm9jdXNlZCAmJlxuICAgICAgdGhpcy5pc1NhbWVEYXkodGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pXG4gICAgKSB7XG4gICAgICAvLyB0aGVyZSBpcyBjdXJyZW50bHkgbm8gYWN0aXZlRWxlbWVudCBhbmQgbm90IGlubGluZVxuICAgICAgaWYgKCFkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgc2hvdWxkRm9jdXNEYXkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gaW5saW5lIHZlcnNpb246XG4gICAgICAvLyBkbyBub3QgZm9jdXMgb24gaW5pdGlhbCByZW5kZXIgdG8gcHJldmVudCBhdXRvRm9jdXMgaXNzdWVcbiAgICAgIC8vIGZvY3VzIGFmdGVyIG1vbnRoIGhhcyBjaGFuZ2VkIHZpYSBrZXlib2FyZFxuICAgICAgaWYgKHRoaXMucHJvcHMuaW5saW5lICYmICF0aGlzLnByb3BzLnNob3VsZEZvY3VzRGF5SW5saW5lKSB7XG4gICAgICAgIHNob3VsZEZvY3VzRGF5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyB0aGUgYWN0aXZlRWxlbWVudCBpcyBpbiB0aGUgY29udGFpbmVyLCBhbmQgaXQgaXMgYW5vdGhlciBpbnN0YW5jZSBvZiBEYXlcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5wcm9wcy5jb250YWluZXJSZWYgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5jb250YWluZXJSZWYuY3VycmVudCAmJlxuICAgICAgICB0aGlzLnByb3BzLmNvbnRhaW5lclJlZi5jdXJyZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICYmXG4gICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5XCIpXG4gICAgICApIHtcbiAgICAgICAgc2hvdWxkRm9jdXNEYXkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy9kYXkgaXMgb25lIG9mIHRoZSBub24gcmVuZGVyZWQgZHVwbGljYXRlIGRheXNcbiAgICAgIGlmICh0aGlzLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kICYmIHRoaXMuaXNBZnRlck1vbnRoKCkpIHtcbiAgICAgICAgc2hvdWxkRm9jdXNEYXkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQgJiYgdGhpcy5pc0JlZm9yZU1vbnRoKCkpIHtcbiAgICAgICAgc2hvdWxkRm9jdXNEYXkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaG91bGRGb2N1c0RheSAmJiB0aGlzLmRheUVsLmN1cnJlbnQ/LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgfTtcblxuICByZW5kZXJEYXlDb250ZW50cyA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5tb250aFNob3dzRHVwbGljYXRlRGF5c0VuZCAmJiB0aGlzLmlzQWZ0ZXJNb250aCgpKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKHRoaXMucHJvcHMubW9udGhTaG93c0R1cGxpY2F0ZURheXNTdGFydCAmJiB0aGlzLmlzQmVmb3JlTW9udGgoKSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLnByb3BzLnJlbmRlckRheUNvbnRlbnRzXG4gICAgICA/IHRoaXMucHJvcHMucmVuZGVyRGF5Q29udGVudHMoZ2V0RGF0ZSh0aGlzLnByb3BzLmRheSksIHRoaXMucHJvcHMuZGF5KVxuICAgICAgOiBnZXREYXRlKHRoaXMucHJvcHMuZGF5KTtcbiAgfTtcblxuICByZW5kZXIgPSAoKSA9PiAoXG4gICAgPGRpdlxuICAgICAgcmVmPXt0aGlzLmRheUVsfVxuICAgICAgY2xhc3NOYW1lPXt0aGlzLmdldENsYXNzTmFtZXModGhpcy5wcm9wcy5kYXkpfVxuICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZU9uS2V5RG93bn1cbiAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9XG4gICAgICBvbk1vdXNlRW50ZXI9e1xuICAgICAgICAhdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnQgPyB0aGlzLmhhbmRsZU1vdXNlRW50ZXIgOiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIG9uUG9pbnRlckVudGVyPXtcbiAgICAgICAgdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnQgPyB0aGlzLmhhbmRsZU1vdXNlRW50ZXIgOiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIHRhYkluZGV4PXt0aGlzLmdldFRhYkluZGV4KCl9XG4gICAgICBhcmlhLWxhYmVsPXt0aGlzLmdldEFyaWFMYWJlbCgpfVxuICAgICAgcm9sZT1cIm9wdGlvblwiXG4gICAgICB0aXRsZT17dGhpcy5nZXRUaXRsZSgpfVxuICAgICAgYXJpYS1kaXNhYmxlZD17dGhpcy5pc0Rpc2FibGVkKCl9XG4gICAgICBhcmlhLWN1cnJlbnQ9e3RoaXMuaXNDdXJyZW50RGF5KCkgPyBcImRhdGVcIiA6IHVuZGVmaW5lZH1cbiAgICAgIGFyaWEtc2VsZWN0ZWQ9e3RoaXMuaXNTZWxlY3RlZCgpIHx8IHRoaXMuaXNJblJhbmdlKCl9XG4gICAgPlxuICAgICAge3RoaXMucmVuZGVyRGF5Q29udGVudHMoKX1cbiAgICAgIHt0aGlzLmdldFRpdGxlKCkgIT09IFwiXCIgJiYgKFxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJvdmVybGF5XCI+e3RoaXMuZ2V0VGl0bGUoKX08L3NwYW4+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY2xzeCB9IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQgeyBpc1NhbWVEYXkgfSBmcm9tIFwiLi9kYXRlX3V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlZWtOdW1iZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXJpYUxhYmVsUHJlZml4OiBcIndlZWsgXCIsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgd2Vla051bWJlcjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgYXJpYUxhYmVsUHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNlbGVjdGVkOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBwcmVTZWxlY3Rpb246IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIHNob3dXZWVrUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93V2Vla051bWJlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAgIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvdWxkRm9jdXNEYXlJbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAgIGhhbmRsZU9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgY29udGFpbmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHsgY3VycmVudDogUHJvcFR5cGVzLmluc3RhbmNlT2YoRWxlbWVudCkgfSksXG4gICAgXSksXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5oYW5kbGVGb2N1c1dlZWtOdW1iZXIoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB0aGlzLmhhbmRsZUZvY3VzV2Vla051bWJlcihwcmV2UHJvcHMpO1xuICB9XG5cbiAgd2Vla051bWJlckVsID0gUmVhY3QuY3JlYXRlUmVmKCk7XG5cbiAgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVPbktleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBldmVudEtleSA9IGV2ZW50LmtleTtcbiAgICBpZiAoZXZlbnRLZXkgPT09IFwiIFwiKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQua2V5ID0gXCJFbnRlclwiO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMuaGFuZGxlT25LZXlEb3duKGV2ZW50KTtcbiAgfTtcblxuICBpc0tleWJvYXJkU2VsZWN0ZWQgPSAoKSA9PlxuICAgICF0aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uICYmXG4gICAgIWlzU2FtZURheSh0aGlzLnByb3BzLmRhdGUsIHRoaXMucHJvcHMuc2VsZWN0ZWQpICYmXG4gICAgaXNTYW1lRGF5KHRoaXMucHJvcHMuZGF0ZSwgdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pO1xuXG4gIGdldFRhYkluZGV4ID0gKCkgPT5cbiAgICB0aGlzLnByb3BzLnNob3dXZWVrUGlja2VyICYmXG4gICAgdGhpcy5wcm9wcy5zaG93V2Vla051bWJlciAmJlxuICAgICh0aGlzLmlzS2V5Ym9hcmRTZWxlY3RlZCgpIHx8XG4gICAgICAoaXNTYW1lRGF5KHRoaXMucHJvcHMuZGF0ZSwgdGhpcy5wcm9wcy5zZWxlY3RlZCkgJiZcbiAgICAgICAgaXNTYW1lRGF5KHRoaXMucHJvcHMucHJlU2VsZWN0aW9uLCB0aGlzLnByb3BzLnNlbGVjdGVkKSkpXG4gICAgICA/IDBcbiAgICAgIDogLTE7XG5cbiAgLy8gdmFyaW91cyBjYXNlcyB3aGVuIHdlIG5lZWQgdG8gYXBwbHkgZm9jdXMgdG8gdGhlIHByZXNlbGVjdGVkIHdlZWstbnVtYmVyXG4gIC8vIGZvY3VzIHRoZSB3ZWVrLW51bWJlciBvbiBtb3VudC91cGRhdGUgc28gdGhhdCBrZXlib2FyZCBuYXZpZ2F0aW9uIHdvcmtzIHdoaWxlIGN5Y2xpbmcgdGhyb3VnaCBtb250aHMgd2l0aCB1cCBvciBkb3duIGtleXMgKG5vdCBmb3IgcHJldiBhbmQgbmV4dCBtb250aCBidXR0b25zKVxuICAvLyBwcmV2ZW50IGZvY3VzIGZvciB0aGVzZSBhY3RpdmVFbGVtZW50IGNhc2VzIHNvIHdlIGRvbid0IHB1bGwgZm9jdXMgZnJvbSB0aGUgaW5wdXQgYXMgdGhlIGNhbGVuZGFyIG9wZW5zXG4gIGhhbmRsZUZvY3VzV2Vla051bWJlciA9IChwcmV2UHJvcHMgPSB7fSkgPT4ge1xuICAgIGxldCBzaG91bGRGb2N1c1dlZWtOdW1iZXIgPSBmYWxzZTtcbiAgICAvLyBvbmx5IGRvIHRoaXMgd2hpbGUgdGhlIGlucHV0IGlzbid0IGZvY3VzZWRcbiAgICAvLyBvdGhlcndpc2UsIHR5cGluZy9iYWNrc3BhY2luZyB0aGUgZGF0ZSBtYW51YWxseSBtYXkgc3RlYWwgZm9jdXMgYXdheSBmcm9tIHRoZSBpbnB1dFxuICAgIGlmIChcbiAgICAgIHRoaXMuZ2V0VGFiSW5kZXgoKSA9PT0gMCAmJlxuICAgICAgIXByZXZQcm9wcy5pc0lucHV0Rm9jdXNlZCAmJlxuICAgICAgaXNTYW1lRGF5KHRoaXMucHJvcHMuZGF0ZSwgdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pXG4gICAgKSB7XG4gICAgICAvLyB0aGVyZSBpcyBjdXJyZW50bHkgbm8gYWN0aXZlRWxlbWVudCBhbmQgbm90IGlubGluZVxuICAgICAgaWYgKCFkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgc2hvdWxkRm9jdXNXZWVrTnVtYmVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIGlubGluZSB2ZXJzaW9uOlxuICAgICAgLy8gZG8gbm90IGZvY3VzIG9uIGluaXRpYWwgcmVuZGVyIHRvIHByZXZlbnQgYXV0b0ZvY3VzIGlzc3VlXG4gICAgICAvLyBmb2N1cyBhZnRlciBtb250aCBoYXMgY2hhbmdlZCB2aWEga2V5Ym9hcmRcbiAgICAgIGlmICh0aGlzLnByb3BzLmlubGluZSAmJiAhdGhpcy5wcm9wcy5zaG91bGRGb2N1c0RheUlubGluZSkge1xuICAgICAgICBzaG91bGRGb2N1c1dlZWtOdW1iZXIgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIHRoZSBhY3RpdmVFbGVtZW50IGlzIGluIHRoZSBjb250YWluZXIsIGFuZCBpdCBpcyBhbm90aGVyIGluc3RhbmNlIG9mIFdlZWtOdW1iZXJcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5wcm9wcy5jb250YWluZXJSZWYgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5jb250YWluZXJSZWYuY3VycmVudCAmJlxuICAgICAgICB0aGlzLnByb3BzLmNvbnRhaW5lclJlZi5jdXJyZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICYmXG4gICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXG4gICAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlclwiLFxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgc2hvdWxkRm9jdXNXZWVrTnVtYmVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaG91bGRGb2N1c1dlZWtOdW1iZXIgJiZcbiAgICAgIHRoaXMud2Vla051bWJlckVsLmN1cnJlbnQgJiZcbiAgICAgIHRoaXMud2Vla051bWJlckVsLmN1cnJlbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHdlZWtOdW1iZXIsIGFyaWFMYWJlbFByZWZpeCA9IFwid2VlayBcIiwgb25DbGljayB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHdlZWtOdW1iZXJDbGFzc2VzID0ge1xuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlclwiOiB0cnVlLFxuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlci0tY2xpY2thYmxlXCI6ICEhb25DbGljayxcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay1udW1iZXItLXNlbGVjdGVkXCI6XG4gICAgICAgICEhb25DbGljayAmJiBpc1NhbWVEYXkodGhpcy5wcm9wcy5kYXRlLCB0aGlzLnByb3BzLnNlbGVjdGVkKSxcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay1udW1iZXItLWtleWJvYXJkLXNlbGVjdGVkXCI6XG4gICAgICAgIHRoaXMuaXNLZXlib2FyZFNlbGVjdGVkKCksXG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICByZWY9e3RoaXMud2Vla051bWJlckVsfVxuICAgICAgICBjbGFzc05hbWU9e2Nsc3god2Vla051bWJlckNsYXNzZXMpfVxuICAgICAgICBhcmlhLWxhYmVsPXtgJHthcmlhTGFiZWxQcmVmaXh9ICR7dGhpcy5wcm9wcy53ZWVrTnVtYmVyfWB9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9XG4gICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVPbktleURvd259XG4gICAgICAgIHRhYkluZGV4PXt0aGlzLmdldFRhYkluZGV4KCl9XG4gICAgICA+XG4gICAgICAgIHt3ZWVrTnVtYmVyfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IERheSBmcm9tIFwiLi9kYXlcIjtcbmltcG9ydCBXZWVrTnVtYmVyIGZyb20gXCIuL3dlZWtfbnVtYmVyXCI7XG5pbXBvcnQgeyBjbHN4IH0gZnJvbSBcImNsc3hcIjtcblxuaW1wb3J0IHsgYWRkRGF5cywgZ2V0V2VlaywgZ2V0U3RhcnRPZldlZWssIGlzU2FtZURheSB9IGZyb20gXCIuL2RhdGVfdXRpbHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2VlayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzaG91bGRDbG9zZU9uU2VsZWN0OiB0cnVlLFxuICAgIH07XG4gIH1cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhcmlhTGFiZWxQcmVmaXg6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAgIGRheTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgICBkYXlDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNob29zZURheUFyaWFMYWJlbFByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBlbmREYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBleGNsdWRlRGF0ZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gICAgICAgICAgbWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgfSksXG4gICAgICBdKSxcbiAgICApLFxuICAgIGV4Y2x1ZGVEYXRlSW50ZXJ2YWxzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIHN0YXJ0OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICAgICAgZW5kOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICAgIH0pLFxuICAgICksXG4gICAgZmlsdGVyRGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZm9ybWF0V2Vla051bWJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGlnaGxpZ2h0RGF0ZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCksXG4gICAgaG9saWRheXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCksXG4gICAgaW5jbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5jbHVkZURhdGVJbnRlcnZhbHM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3VsZEZvY3VzRGF5SW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhbGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7IGxvY2FsZTogUHJvcFR5cGVzLm9iamVjdCB9KSxcbiAgICBdKSxcbiAgICBtYXhEYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBjYWxlbmRhclN0YXJ0RGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG1pbkRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIG1vbnRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uRGF5Q2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHVzZVBvaW50ZXJFdmVudDogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25EYXlNb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbldlZWtTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIHByZVNlbGVjdGlvbjogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIHNlbGVjdGluZ0RhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIHNlbGVjdHNFbmQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdHNTdGFydDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0c1JhbmdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RzTXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdGVkRGF0ZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpKSxcbiAgICBzZWxlY3RzRGlzYWJsZWREYXlzSW5SYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1dlZWtOdW1iZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dXZWVrUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdGFydERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIHNldE9wZW46IFByb3BUeXBlcy5mdW5jLFxuICAgIHNob3VsZENsb3NlT25TZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHJlbmRlckRheUNvbnRlbnRzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYW5kbGVPbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAgIGlzSW5wdXRGb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb250YWluZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoeyBjdXJyZW50OiBQcm9wVHlwZXMub2JqZWN0IH0pLFxuICAgIF0pLFxuICAgIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtb250aFNob3dzRHVwbGljYXRlRGF5c1N0YXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBoYW5kbGVEYXlDbGljayA9IChkYXksIGV2ZW50KSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMub25EYXlDbGljaykge1xuICAgICAgdGhpcy5wcm9wcy5vbkRheUNsaWNrKGRheSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVEYXlNb3VzZUVudGVyID0gKGRheSkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlcikge1xuICAgICAgdGhpcy5wcm9wcy5vbkRheU1vdXNlRW50ZXIoZGF5KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlV2Vla0NsaWNrID0gKGRheSwgd2Vla051bWJlciwgZXZlbnQpID0+IHtcbiAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMub25XZWVrU2VsZWN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMucHJvcHMub25XZWVrU2VsZWN0KGRheSwgd2Vla051bWJlciwgZXZlbnQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlcikge1xuICAgICAgdGhpcy5oYW5kbGVEYXlDbGljayhkYXksIGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdCkge1xuICAgICAgdGhpcy5wcm9wcy5zZXRPcGVuKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0V2Vla051bWJlciA9IChkYXRlKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybWF0V2Vla051bWJlcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZm9ybWF0V2Vla051bWJlcihkYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFdlZWsoZGF0ZSk7XG4gIH07XG5cbiAgcmVuZGVyRGF5cyA9ICgpID0+IHtcbiAgICBjb25zdCBzdGFydE9mV2VlayA9IHRoaXMuc3RhcnRPZldlZWsoKTtcbiAgICBjb25zdCBkYXlzID0gW107XG4gICAgY29uc3Qgd2Vla051bWJlciA9IHRoaXMuZm9ybWF0V2Vla051bWJlcihzdGFydE9mV2Vlayk7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd1dlZWtOdW1iZXIpIHtcbiAgICAgIGNvbnN0IG9uQ2xpY2tBY3Rpb24gPVxuICAgICAgICB0aGlzLnByb3BzLm9uV2Vla1NlbGVjdCB8fCB0aGlzLnByb3BzLnNob3dXZWVrUGlja2VyXG4gICAgICAgICAgPyB0aGlzLmhhbmRsZVdlZWtDbGljay5iaW5kKHRoaXMsIHN0YXJ0T2ZXZWVrLCB3ZWVrTnVtYmVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgZGF5cy5wdXNoKFxuICAgICAgICA8V2Vla051bWJlclxuICAgICAgICAgIGtleT1cIldcIlxuICAgICAgICAgIHdlZWtOdW1iZXI9e3dlZWtOdW1iZXJ9XG4gICAgICAgICAgZGF0ZT17c3RhcnRPZldlZWt9XG4gICAgICAgICAgb25DbGljaz17b25DbGlja0FjdGlvbn1cbiAgICAgICAgICBzZWxlY3RlZD17dGhpcy5wcm9wcy5zZWxlY3RlZH1cbiAgICAgICAgICBwcmVTZWxlY3Rpb249e3RoaXMucHJvcHMucHJlU2VsZWN0aW9ufVxuICAgICAgICAgIGFyaWFMYWJlbFByZWZpeD17dGhpcy5wcm9wcy5hcmlhTGFiZWxQcmVmaXh9XG4gICAgICAgICAgc2hvd1dlZWtQaWNrZXI9e3RoaXMucHJvcHMuc2hvd1dlZWtQaWNrZXJ9XG4gICAgICAgICAgc2hvd1dlZWtOdW1iZXI9e3RoaXMucHJvcHMuc2hvd1dlZWtOdW1iZXJ9XG4gICAgICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb249e3RoaXMucHJvcHMuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb259XG4gICAgICAgICAgaGFuZGxlT25LZXlEb3duPXt0aGlzLnByb3BzLmhhbmRsZU9uS2V5RG93bn1cbiAgICAgICAgICBpc0lucHV0Rm9jdXNlZD17dGhpcy5wcm9wcy5pc0lucHV0Rm9jdXNlZH1cbiAgICAgICAgICBjb250YWluZXJSZWY9e3RoaXMucHJvcHMuY29udGFpbmVyUmVmfVxuICAgICAgICAvPixcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkYXlzLmNvbmNhdChcbiAgICAgIFswLCAxLCAyLCAzLCA0LCA1LCA2XS5tYXAoKG9mZnNldCkgPT4ge1xuICAgICAgICBjb25zdCBkYXkgPSBhZGREYXlzKHN0YXJ0T2ZXZWVrLCBvZmZzZXQpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxEYXlcbiAgICAgICAgICAgIGFyaWFMYWJlbFByZWZpeFdoZW5FbmFibGVkPXt0aGlzLnByb3BzLmNob29zZURheUFyaWFMYWJlbFByZWZpeH1cbiAgICAgICAgICAgIGFyaWFMYWJlbFByZWZpeFdoZW5EaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeH1cbiAgICAgICAgICAgIGtleT17ZGF5LnZhbHVlT2YoKX1cbiAgICAgICAgICAgIGRheT17ZGF5fVxuICAgICAgICAgICAgbW9udGg9e3RoaXMucHJvcHMubW9udGh9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZURheUNsaWNrLmJpbmQodGhpcywgZGF5KX1cbiAgICAgICAgICAgIHVzZVBvaW50ZXJFdmVudD17dGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnR9XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI9e3RoaXMuaGFuZGxlRGF5TW91c2VFbnRlci5iaW5kKHRoaXMsIGRheSl9XG4gICAgICAgICAgICBtaW5EYXRlPXt0aGlzLnByb3BzLm1pbkRhdGV9XG4gICAgICAgICAgICBtYXhEYXRlPXt0aGlzLnByb3BzLm1heERhdGV9XG4gICAgICAgICAgICBjYWxlbmRhclN0YXJ0RGF5PXt0aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXl9XG4gICAgICAgICAgICBleGNsdWRlRGF0ZXM9e3RoaXMucHJvcHMuZXhjbHVkZURhdGVzfVxuICAgICAgICAgICAgZXhjbHVkZURhdGVJbnRlcnZhbHM9e3RoaXMucHJvcHMuZXhjbHVkZURhdGVJbnRlcnZhbHN9XG4gICAgICAgICAgICBpbmNsdWRlRGF0ZXM9e3RoaXMucHJvcHMuaW5jbHVkZURhdGVzfVxuICAgICAgICAgICAgaW5jbHVkZURhdGVJbnRlcnZhbHM9e3RoaXMucHJvcHMuaW5jbHVkZURhdGVJbnRlcnZhbHN9XG4gICAgICAgICAgICBoaWdobGlnaHREYXRlcz17dGhpcy5wcm9wcy5oaWdobGlnaHREYXRlc31cbiAgICAgICAgICAgIGhvbGlkYXlzPXt0aGlzLnByb3BzLmhvbGlkYXlzfVxuICAgICAgICAgICAgc2VsZWN0aW5nRGF0ZT17dGhpcy5wcm9wcy5zZWxlY3RpbmdEYXRlfVxuICAgICAgICAgICAgZmlsdGVyRGF0ZT17dGhpcy5wcm9wcy5maWx0ZXJEYXRlfVxuICAgICAgICAgICAgcHJlU2VsZWN0aW9uPXt0aGlzLnByb3BzLnByZVNlbGVjdGlvbn1cbiAgICAgICAgICAgIHNlbGVjdGVkPXt0aGlzLnByb3BzLnNlbGVjdGVkfVxuICAgICAgICAgICAgc2VsZWN0c1N0YXJ0PXt0aGlzLnByb3BzLnNlbGVjdHNTdGFydH1cbiAgICAgICAgICAgIHNlbGVjdHNFbmQ9e3RoaXMucHJvcHMuc2VsZWN0c0VuZH1cbiAgICAgICAgICAgIHNlbGVjdHNSYW5nZT17dGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2V9XG4gICAgICAgICAgICBzaG93V2Vla1BpY2tlcj17dGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlcn1cbiAgICAgICAgICAgIHNob3dXZWVrTnVtYmVyPXt0aGlzLnByb3BzLnNob3dXZWVrTnVtYmVyfVxuICAgICAgICAgICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U9e3RoaXMucHJvcHMuc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2V9XG4gICAgICAgICAgICBzZWxlY3RzTXVsdGlwbGU9e3RoaXMucHJvcHMuc2VsZWN0c011bHRpcGxlfVxuICAgICAgICAgICAgc2VsZWN0ZWREYXRlcz17dGhpcy5wcm9wcy5zZWxlY3RlZERhdGVzfVxuICAgICAgICAgICAgc3RhcnREYXRlPXt0aGlzLnByb3BzLnN0YXJ0RGF0ZX1cbiAgICAgICAgICAgIGVuZERhdGU9e3RoaXMucHJvcHMuZW5kRGF0ZX1cbiAgICAgICAgICAgIGRheUNsYXNzTmFtZT17dGhpcy5wcm9wcy5kYXlDbGFzc05hbWV9XG4gICAgICAgICAgICByZW5kZXJEYXlDb250ZW50cz17dGhpcy5wcm9wcy5yZW5kZXJEYXlDb250ZW50c31cbiAgICAgICAgICAgIGRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uPXt0aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9ufVxuICAgICAgICAgICAgaGFuZGxlT25LZXlEb3duPXt0aGlzLnByb3BzLmhhbmRsZU9uS2V5RG93bn1cbiAgICAgICAgICAgIGlzSW5wdXRGb2N1c2VkPXt0aGlzLnByb3BzLmlzSW5wdXRGb2N1c2VkfVxuICAgICAgICAgICAgY29udGFpbmVyUmVmPXt0aGlzLnByb3BzLmNvbnRhaW5lclJlZn1cbiAgICAgICAgICAgIGlubGluZT17dGhpcy5wcm9wcy5pbmxpbmV9XG4gICAgICAgICAgICBzaG91bGRGb2N1c0RheUlubGluZT17dGhpcy5wcm9wcy5zaG91bGRGb2N1c0RheUlubGluZX1cbiAgICAgICAgICAgIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kPXt0aGlzLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kfVxuICAgICAgICAgICAgbW9udGhTaG93c0R1cGxpY2F0ZURheXNTdGFydD17XG4gICAgICAgICAgICAgIHRoaXMucHJvcHMubW9udGhTaG93c0R1cGxpY2F0ZURheXNTdGFydFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxlPXt0aGlzLnByb3BzLmxvY2FsZX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgKTtcbiAgfTtcblxuICBzdGFydE9mV2VlayA9ICgpID0+XG4gICAgZ2V0U3RhcnRPZldlZWsoXG4gICAgICB0aGlzLnByb3BzLmRheSxcbiAgICAgIHRoaXMucHJvcHMubG9jYWxlLFxuICAgICAgdGhpcy5wcm9wcy5jYWxlbmRhclN0YXJ0RGF5LFxuICAgICk7XG5cbiAgaXNLZXlib2FyZFNlbGVjdGVkID0gKCkgPT5cbiAgICAhdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiAmJlxuICAgICFpc1NhbWVEYXkodGhpcy5zdGFydE9mV2VlaygpLCB0aGlzLnByb3BzLnNlbGVjdGVkKSAmJlxuICAgIGlzU2FtZURheSh0aGlzLnN0YXJ0T2ZXZWVrKCksIHRoaXMucHJvcHMucHJlU2VsZWN0aW9uKTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgd2Vla051bWJlckNsYXNzZXMgPSB7XG4gICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3dlZWtcIjogdHJ1ZSxcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay0tc2VsZWN0ZWRcIjogaXNTYW1lRGF5KFxuICAgICAgICB0aGlzLnN0YXJ0T2ZXZWVrKCksXG4gICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICApLFxuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrLS1rZXlib2FyZC1zZWxlY3RlZFwiOiB0aGlzLmlzS2V5Ym9hcmRTZWxlY3RlZCgpLFxuICAgIH07XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbHN4KHdlZWtOdW1iZXJDbGFzc2VzKX0+e3RoaXMucmVuZGVyRGF5cygpfTwvZGl2PjtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY2xzeCB9IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQgV2VlayBmcm9tIFwiLi93ZWVrXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi9kYXRlX3V0aWxzXCI7XG5cbmNvbnN0IEZJWEVEX0hFSUdIVF9TVEFOREFSRF9XRUVLX0NPVU5UID0gNjtcblxuY29uc3QgTU9OVEhfQ09MVU1OU19MQVlPVVQgPSB7XG4gIFRXT19DT0xVTU5TOiBcInR3b19jb2x1bW5zXCIsXG4gIFRIUkVFX0NPTFVNTlM6IFwidGhyZWVfY29sdW1uc1wiLFxuICBGT1VSX0NPTFVNTlM6IFwiZm91cl9jb2x1bW5zXCIsXG59O1xuY29uc3QgTU9OVEhfQ09MVU1OUyA9IHtcbiAgW01PTlRIX0NPTFVNTlNfTEFZT1VULlRXT19DT0xVTU5TXToge1xuICAgIGdyaWQ6IFtcbiAgICAgIFswLCAxXSxcbiAgICAgIFsyLCAzXSxcbiAgICAgIFs0LCA1XSxcbiAgICAgIFs2LCA3XSxcbiAgICAgIFs4LCA5XSxcbiAgICAgIFsxMCwgMTFdLFxuICAgIF0sXG4gICAgdmVydGljYWxOYXZpZ2F0aW9uT2Zmc2V0OiAyLFxuICB9LFxuICBbTU9OVEhfQ09MVU1OU19MQVlPVVQuVEhSRUVfQ09MVU1OU106IHtcbiAgICBncmlkOiBbXG4gICAgICBbMCwgMSwgMl0sXG4gICAgICBbMywgNCwgNV0sXG4gICAgICBbNiwgNywgOF0sXG4gICAgICBbOSwgMTAsIDExXSxcbiAgICBdLFxuICAgIHZlcnRpY2FsTmF2aWdhdGlvbk9mZnNldDogMyxcbiAgfSxcbiAgW01PTlRIX0NPTFVNTlNfTEFZT1VULkZPVVJfQ09MVU1OU106IHtcbiAgICBncmlkOiBbXG4gICAgICBbMCwgMSwgMiwgM10sXG4gICAgICBbNCwgNSwgNiwgN10sXG4gICAgICBbOCwgOSwgMTAsIDExXSxcbiAgICBdLFxuICAgIHZlcnRpY2FsTmF2aWdhdGlvbk9mZnNldDogNCxcbiAgfSxcbn07XG5jb25zdCBNT05USF9OQVZJR0FUSU9OX0hPUklaT05UQUxfT0ZGU0VUID0gMTtcblxuZnVuY3Rpb24gZ2V0TW9udGhDb2x1bW5zTGF5b3V0KFxuICBzaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlcixcbiAgc2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlcixcbikge1xuICBpZiAoc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIpIHJldHVybiBNT05USF9DT0xVTU5TX0xBWU9VVC5GT1VSX0NPTFVNTlM7XG4gIGlmIChzaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyKSByZXR1cm4gTU9OVEhfQ09MVU1OU19MQVlPVVQuVFdPX0NPTFVNTlM7XG4gIHJldHVybiBNT05USF9DT0xVTU5TX0xBWU9VVC5USFJFRV9DT0xVTU5TO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb250aCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYXJpYUxhYmVsUHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNob29zZURheUFyaWFMYWJlbFByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGF5OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICAgIGRheUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbW9udGhDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGVuZERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIG9yZGVySW5EaXNwbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4Y2x1ZGVEYXRlczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgZGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgICAgICAgICBtZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB9KSxcbiAgICAgIF0pLFxuICAgICksXG4gICAgZXhjbHVkZURhdGVJbnRlcnZhbHM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgc3RhcnQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgICAgICBlbmQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgICAgfSksXG4gICAgKSxcbiAgICBmaWx0ZXJEYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBmaXhlZEhlaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZm9ybWF0V2Vla051bWJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGlnaGxpZ2h0RGF0ZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCksXG4gICAgaG9saWRheXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcCksXG4gICAgaW5jbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5jbHVkZURhdGVJbnRlcnZhbHM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3VsZEZvY3VzRGF5SW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhbGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7IGxvY2FsZTogUHJvcFR5cGVzLm9iamVjdCB9KSxcbiAgICBdKSxcbiAgICBtYXhEYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBtaW5EYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBvbkRheUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB1c2VQb2ludGVyRXZlbnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uRGF5TW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbldlZWtTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIHBlZWtOZXh0TW9udGg6IFByb3BUeXBlcy5ib29sLFxuICAgIHByZVNlbGVjdGlvbjogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgc2V0UHJlU2VsZWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZDogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgc2VsZWN0aW5nRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgY2FsZW5kYXJTdGFydERheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBzZWxlY3RzRW5kOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RzU3RhcnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdHNSYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdHNNdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0ZWREYXRlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkpLFxuICAgIHNob3dXZWVrTnVtYmVyczogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RhcnREYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBzZXRPcGVuOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzaG91bGRDbG9zZU9uU2VsZWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICByZW5kZXJEYXlDb250ZW50czogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVuZGVyTW9udGhDb250ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZW5kZXJRdWFydGVyQ29udGVudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2hvd01vbnRoWWVhclBpY2tlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd0Z1bGxNb250aFllYXJQaWNrZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93UXVhcnRlclllYXJQaWNrZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dXZWVrUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYW5kbGVPbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZU9uTW9udGhLZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBpc0lucHV0Rm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgd2Vla0FyaWFMYWJlbFByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250YWluZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoeyBjdXJyZW50OiBQcm9wVHlwZXMub2JqZWN0IH0pLFxuICAgIF0pLFxuICAgIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtb250aFNob3dzRHVwbGljYXRlRGF5c1N0YXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBNT05USF9SRUZTID0gWy4uLkFycmF5KDEyKV0ubWFwKCgpID0+IFJlYWN0LmNyZWF0ZVJlZigpKTtcbiAgUVVBUlRFUl9SRUZTID0gWy4uLkFycmF5KDQpXS5tYXAoKCkgPT4gUmVhY3QuY3JlYXRlUmVmKCkpO1xuXG4gIGlzRGlzYWJsZWQgPSAoZGF0ZSkgPT4gdXRpbHMuaXNEYXlEaXNhYmxlZChkYXRlLCB0aGlzLnByb3BzKTtcblxuICBpc0V4Y2x1ZGVkID0gKGRhdGUpID0+IHV0aWxzLmlzRGF5RXhjbHVkZWQoZGF0ZSwgdGhpcy5wcm9wcyk7XG5cbiAgaGFuZGxlRGF5Q2xpY2sgPSAoZGF5LCBldmVudCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLm9uRGF5Q2xpY2spIHtcbiAgICAgIHRoaXMucHJvcHMub25EYXlDbGljayhkYXksIGV2ZW50LCB0aGlzLnByb3BzLm9yZGVySW5EaXNwbGF5KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlRGF5TW91c2VFbnRlciA9IChkYXkpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkRheU1vdXNlRW50ZXIpIHtcbiAgICAgIHRoaXMucHJvcHMub25EYXlNb3VzZUVudGVyKGRheSk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZU1vdXNlTGVhdmUgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTW91c2VMZWF2ZSgpO1xuICAgIH1cbiAgfTtcblxuICBpc1JhbmdlU3RhcnRNb250aCA9IChtKSA9PiB7XG4gICAgY29uc3QgeyBkYXksIHN0YXJ0RGF0ZSwgZW5kRGF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIXN0YXJ0RGF0ZSB8fCAhZW5kRGF0ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdXRpbHMuaXNTYW1lTW9udGgodXRpbHMuc2V0TW9udGgoZGF5LCBtKSwgc3RhcnREYXRlKTtcbiAgfTtcblxuICBpc1JhbmdlU3RhcnRRdWFydGVyID0gKHEpID0+IHtcbiAgICBjb25zdCB7IGRheSwgc3RhcnREYXRlLCBlbmREYXRlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghc3RhcnREYXRlIHx8ICFlbmREYXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB1dGlscy5pc1NhbWVRdWFydGVyKHV0aWxzLnNldFF1YXJ0ZXIoZGF5LCBxKSwgc3RhcnREYXRlKTtcbiAgfTtcblxuICBpc1JhbmdlRW5kTW9udGggPSAobSkgPT4ge1xuICAgIGNvbnN0IHsgZGF5LCBzdGFydERhdGUsIGVuZERhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHV0aWxzLmlzU2FtZU1vbnRoKHV0aWxzLnNldE1vbnRoKGRheSwgbSksIGVuZERhdGUpO1xuICB9O1xuXG4gIGlzUmFuZ2VFbmRRdWFydGVyID0gKHEpID0+IHtcbiAgICBjb25zdCB7IGRheSwgc3RhcnREYXRlLCBlbmREYXRlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghc3RhcnREYXRlIHx8ICFlbmREYXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB1dGlscy5pc1NhbWVRdWFydGVyKHV0aWxzLnNldFF1YXJ0ZXIoZGF5LCBxKSwgZW5kRGF0ZSk7XG4gIH07XG5cbiAgaXNJblNlbGVjdGluZ1JhbmdlTW9udGggPSAobSkgPT4ge1xuICAgIGNvbnN0IHsgZGF5LCBzZWxlY3RzU3RhcnQsIHNlbGVjdHNFbmQsIHNlbGVjdHNSYW5nZSwgc3RhcnREYXRlLCBlbmREYXRlIH0gPVxuICAgICAgdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHNlbGVjdGluZ0RhdGUgPSB0aGlzLnByb3BzLnNlbGVjdGluZ0RhdGUgPz8gdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb247XG5cbiAgICBpZiAoIShzZWxlY3RzU3RhcnQgfHwgc2VsZWN0c0VuZCB8fCBzZWxlY3RzUmFuZ2UpIHx8ICFzZWxlY3RpbmdEYXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdHNTdGFydCAmJiBlbmREYXRlKSB7XG4gICAgICByZXR1cm4gdXRpbHMuaXNNb250aEluUmFuZ2Uoc2VsZWN0aW5nRGF0ZSwgZW5kRGF0ZSwgbSwgZGF5KTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0c0VuZCAmJiBzdGFydERhdGUpIHtcbiAgICAgIHJldHVybiB1dGlscy5pc01vbnRoSW5SYW5nZShzdGFydERhdGUsIHNlbGVjdGluZ0RhdGUsIG0sIGRheSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdHNSYW5nZSAmJiBzdGFydERhdGUgJiYgIWVuZERhdGUpIHtcbiAgICAgIHJldHVybiB1dGlscy5pc01vbnRoSW5SYW5nZShzdGFydERhdGUsIHNlbGVjdGluZ0RhdGUsIG0sIGRheSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGlzU2VsZWN0aW5nTW9udGhSYW5nZVN0YXJ0ID0gKG0pID0+IHtcbiAgICBpZiAoIXRoaXMuaXNJblNlbGVjdGluZ1JhbmdlTW9udGgobSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRheSwgc3RhcnREYXRlLCBzZWxlY3RzU3RhcnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgX21vbnRoID0gdXRpbHMuc2V0TW9udGgoZGF5LCBtKTtcbiAgICBjb25zdCBzZWxlY3RpbmdEYXRlID0gdGhpcy5wcm9wcy5zZWxlY3RpbmdEYXRlID8/IHRoaXMucHJvcHMucHJlU2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdHNTdGFydCkge1xuICAgICAgcmV0dXJuIHV0aWxzLmlzU2FtZU1vbnRoKF9tb250aCwgc2VsZWN0aW5nRGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1dGlscy5pc1NhbWVNb250aChfbW9udGgsIHN0YXJ0RGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIGlzU2VsZWN0aW5nTW9udGhSYW5nZUVuZCA9IChtKSA9PiB7XG4gICAgaWYgKCF0aGlzLmlzSW5TZWxlY3RpbmdSYW5nZU1vbnRoKG0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgeyBkYXksIGVuZERhdGUsIHNlbGVjdHNFbmQsIHNlbGVjdHNSYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBfbW9udGggPSB1dGlscy5zZXRNb250aChkYXksIG0pO1xuICAgIGNvbnN0IHNlbGVjdGluZ0RhdGUgPSB0aGlzLnByb3BzLnNlbGVjdGluZ0RhdGUgPz8gdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb247XG5cbiAgICBpZiAoc2VsZWN0c0VuZCB8fCBzZWxlY3RzUmFuZ2UpIHtcbiAgICAgIHJldHVybiB1dGlscy5pc1NhbWVNb250aChfbW9udGgsIHNlbGVjdGluZ0RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdXRpbHMuaXNTYW1lTW9udGgoX21vbnRoLCBlbmREYXRlKTtcbiAgICB9XG4gIH07XG5cbiAgaXNJblNlbGVjdGluZ1JhbmdlUXVhcnRlciA9IChxKSA9PiB7XG4gICAgY29uc3QgeyBkYXksIHNlbGVjdHNTdGFydCwgc2VsZWN0c0VuZCwgc2VsZWN0c1JhbmdlLCBzdGFydERhdGUsIGVuZERhdGUgfSA9XG4gICAgICB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgc2VsZWN0aW5nRGF0ZSA9IHRoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZSA/PyB0aGlzLnByb3BzLnByZVNlbGVjdGlvbjtcblxuICAgIGlmICghKHNlbGVjdHNTdGFydCB8fCBzZWxlY3RzRW5kIHx8IHNlbGVjdHNSYW5nZSkgfHwgIXNlbGVjdGluZ0RhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0c1N0YXJ0ICYmIGVuZERhdGUpIHtcbiAgICAgIHJldHVybiB1dGlscy5pc1F1YXJ0ZXJJblJhbmdlKHNlbGVjdGluZ0RhdGUsIGVuZERhdGUsIHEsIGRheSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdHNFbmQgJiYgc3RhcnREYXRlKSB7XG4gICAgICByZXR1cm4gdXRpbHMuaXNRdWFydGVySW5SYW5nZShzdGFydERhdGUsIHNlbGVjdGluZ0RhdGUsIHEsIGRheSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdHNSYW5nZSAmJiBzdGFydERhdGUgJiYgIWVuZERhdGUpIHtcbiAgICAgIHJldHVybiB1dGlscy5pc1F1YXJ0ZXJJblJhbmdlKHN0YXJ0RGF0ZSwgc2VsZWN0aW5nRGF0ZSwgcSwgZGF5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgaXNXZWVrSW5Nb250aCA9IChzdGFydE9mV2VlaykgPT4ge1xuICAgIGNvbnN0IGRheSA9IHRoaXMucHJvcHMuZGF5O1xuICAgIGNvbnN0IGVuZE9mV2VlayA9IHV0aWxzLmFkZERheXMoc3RhcnRPZldlZWssIDYpO1xuICAgIHJldHVybiAoXG4gICAgICB1dGlscy5pc1NhbWVNb250aChzdGFydE9mV2VlaywgZGF5KSB8fCB1dGlscy5pc1NhbWVNb250aChlbmRPZldlZWssIGRheSlcbiAgICApO1xuICB9O1xuXG4gIGlzQ3VycmVudE1vbnRoID0gKGRheSwgbSkgPT5cbiAgICB1dGlscy5nZXRZZWFyKGRheSkgPT09IHV0aWxzLmdldFllYXIodXRpbHMubmV3RGF0ZSgpKSAmJlxuICAgIG0gPT09IHV0aWxzLmdldE1vbnRoKHV0aWxzLm5ld0RhdGUoKSk7XG5cbiAgaXNDdXJyZW50UXVhcnRlciA9IChkYXksIHEpID0+XG4gICAgdXRpbHMuZ2V0WWVhcihkYXkpID09PSB1dGlscy5nZXRZZWFyKHV0aWxzLm5ld0RhdGUoKSkgJiZcbiAgICBxID09PSB1dGlscy5nZXRRdWFydGVyKHV0aWxzLm5ld0RhdGUoKSk7XG5cbiAgaXNTZWxlY3RlZE1vbnRoID0gKGRheSwgbSwgc2VsZWN0ZWQpID0+XG4gICAgdXRpbHMuZ2V0TW9udGgoc2VsZWN0ZWQpID09PSBtICYmXG4gICAgdXRpbHMuZ2V0WWVhcihkYXkpID09PSB1dGlscy5nZXRZZWFyKHNlbGVjdGVkKTtcblxuICBpc1NlbGVjdGVkUXVhcnRlciA9IChkYXksIHEsIHNlbGVjdGVkKSA9PlxuICAgIHV0aWxzLmdldFF1YXJ0ZXIoZGF5KSA9PT0gcSAmJlxuICAgIHV0aWxzLmdldFllYXIoZGF5KSA9PT0gdXRpbHMuZ2V0WWVhcihzZWxlY3RlZCk7XG5cbiAgcmVuZGVyV2Vla3MgPSAoKSA9PiB7XG4gICAgY29uc3Qgd2Vla3MgPSBbXTtcbiAgICB2YXIgaXNGaXhlZEhlaWdodCA9IHRoaXMucHJvcHMuZml4ZWRIZWlnaHQ7XG5cbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGJyZWFrQWZ0ZXJOZXh0UHVzaCA9IGZhbHNlO1xuICAgIGxldCBjdXJyZW50V2Vla1N0YXJ0ID0gdXRpbHMuZ2V0U3RhcnRPZldlZWsoXG4gICAgICB1dGlscy5nZXRTdGFydE9mTW9udGgodGhpcy5wcm9wcy5kYXkpLFxuICAgICAgdGhpcy5wcm9wcy5sb2NhbGUsXG4gICAgICB0aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXksXG4gICAgKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlclxuICAgICAgPyB1dGlscy5nZXRTdGFydE9mV2VlayhcbiAgICAgICAgICB0aGlzLnByb3BzLnNlbGVjdGVkLFxuICAgICAgICAgIHRoaXMucHJvcHMubG9jYWxlLFxuICAgICAgICAgIHRoaXMucHJvcHMuY2FsZW5kYXJTdGFydERheSxcbiAgICAgICAgKVxuICAgICAgOiB0aGlzLnByb3BzLnNlbGVjdGVkO1xuXG4gICAgY29uc3QgcHJlU2VsZWN0aW9uID0gdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlclxuICAgICAgPyB1dGlscy5nZXRTdGFydE9mV2VlayhcbiAgICAgICAgICB0aGlzLnByb3BzLnByZVNlbGVjdGlvbixcbiAgICAgICAgICB0aGlzLnByb3BzLmxvY2FsZSxcbiAgICAgICAgICB0aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXksXG4gICAgICAgIClcbiAgICAgIDogdGhpcy5wcm9wcy5wcmVTZWxlY3Rpb247XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgd2Vla3MucHVzaChcbiAgICAgICAgPFdlZWtcbiAgICAgICAgICBhcmlhTGFiZWxQcmVmaXg9e3RoaXMucHJvcHMud2Vla0FyaWFMYWJlbFByZWZpeH1cbiAgICAgICAgICBjaG9vc2VEYXlBcmlhTGFiZWxQcmVmaXg9e3RoaXMucHJvcHMuY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4fVxuICAgICAgICAgIGRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4PXt0aGlzLnByb3BzLmRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4fVxuICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICBkYXk9e2N1cnJlbnRXZWVrU3RhcnR9XG4gICAgICAgICAgbW9udGg9e3V0aWxzLmdldE1vbnRoKHRoaXMucHJvcHMuZGF5KX1cbiAgICAgICAgICBvbkRheUNsaWNrPXt0aGlzLmhhbmRsZURheUNsaWNrfVxuICAgICAgICAgIHVzZVBvaW50ZXJFdmVudD17dGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnR9XG4gICAgICAgICAgb25EYXlNb3VzZUVudGVyPXt0aGlzLmhhbmRsZURheU1vdXNlRW50ZXJ9XG4gICAgICAgICAgb25XZWVrU2VsZWN0PXt0aGlzLnByb3BzLm9uV2Vla1NlbGVjdH1cbiAgICAgICAgICBmb3JtYXRXZWVrTnVtYmVyPXt0aGlzLnByb3BzLmZvcm1hdFdlZWtOdW1iZXJ9XG4gICAgICAgICAgbG9jYWxlPXt0aGlzLnByb3BzLmxvY2FsZX1cbiAgICAgICAgICBtaW5EYXRlPXt0aGlzLnByb3BzLm1pbkRhdGV9XG4gICAgICAgICAgbWF4RGF0ZT17dGhpcy5wcm9wcy5tYXhEYXRlfVxuICAgICAgICAgIGV4Y2x1ZGVEYXRlcz17dGhpcy5wcm9wcy5leGNsdWRlRGF0ZXN9XG4gICAgICAgICAgZXhjbHVkZURhdGVJbnRlcnZhbHM9e3RoaXMucHJvcHMuZXhjbHVkZURhdGVJbnRlcnZhbHN9XG4gICAgICAgICAgaW5jbHVkZURhdGVzPXt0aGlzLnByb3BzLmluY2x1ZGVEYXRlc31cbiAgICAgICAgICBpbmNsdWRlRGF0ZUludGVydmFscz17dGhpcy5wcm9wcy5pbmNsdWRlRGF0ZUludGVydmFsc31cbiAgICAgICAgICBpbmxpbmU9e3RoaXMucHJvcHMuaW5saW5lfVxuICAgICAgICAgIHNob3VsZEZvY3VzRGF5SW5saW5lPXt0aGlzLnByb3BzLnNob3VsZEZvY3VzRGF5SW5saW5lfVxuICAgICAgICAgIGhpZ2hsaWdodERhdGVzPXt0aGlzLnByb3BzLmhpZ2hsaWdodERhdGVzfVxuICAgICAgICAgIGhvbGlkYXlzPXt0aGlzLnByb3BzLmhvbGlkYXlzfVxuICAgICAgICAgIHNlbGVjdGluZ0RhdGU9e3RoaXMucHJvcHMuc2VsZWN0aW5nRGF0ZX1cbiAgICAgICAgICBmaWx0ZXJEYXRlPXt0aGlzLnByb3BzLmZpbHRlckRhdGV9XG4gICAgICAgICAgcHJlU2VsZWN0aW9uPXtwcmVTZWxlY3Rpb259XG4gICAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkfVxuICAgICAgICAgIHNlbGVjdHNTdGFydD17dGhpcy5wcm9wcy5zZWxlY3RzU3RhcnR9XG4gICAgICAgICAgc2VsZWN0c0VuZD17dGhpcy5wcm9wcy5zZWxlY3RzRW5kfVxuICAgICAgICAgIHNlbGVjdHNSYW5nZT17dGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2V9XG4gICAgICAgICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U9e3RoaXMucHJvcHMuc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2V9XG4gICAgICAgICAgc2VsZWN0c011bHRpcGxlPXt0aGlzLnByb3BzLnNlbGVjdHNNdWx0aXBsZX1cbiAgICAgICAgICBzZWxlY3RlZERhdGVzPXt0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZXN9XG4gICAgICAgICAgc2hvd1dlZWtOdW1iZXI9e3RoaXMucHJvcHMuc2hvd1dlZWtOdW1iZXJzfVxuICAgICAgICAgIHNob3dXZWVrUGlja2VyPXt0aGlzLnByb3BzLnNob3dXZWVrUGlja2VyfVxuICAgICAgICAgIHN0YXJ0RGF0ZT17dGhpcy5wcm9wcy5zdGFydERhdGV9XG4gICAgICAgICAgZW5kRGF0ZT17dGhpcy5wcm9wcy5lbmREYXRlfVxuICAgICAgICAgIGRheUNsYXNzTmFtZT17dGhpcy5wcm9wcy5kYXlDbGFzc05hbWV9XG4gICAgICAgICAgc2V0T3Blbj17dGhpcy5wcm9wcy5zZXRPcGVufVxuICAgICAgICAgIHNob3VsZENsb3NlT25TZWxlY3Q9e3RoaXMucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdH1cbiAgICAgICAgICBkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbj17dGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbn1cbiAgICAgICAgICByZW5kZXJEYXlDb250ZW50cz17dGhpcy5wcm9wcy5yZW5kZXJEYXlDb250ZW50c31cbiAgICAgICAgICBoYW5kbGVPbktleURvd249e3RoaXMucHJvcHMuaGFuZGxlT25LZXlEb3dufVxuICAgICAgICAgIGlzSW5wdXRGb2N1c2VkPXt0aGlzLnByb3BzLmlzSW5wdXRGb2N1c2VkfVxuICAgICAgICAgIGNvbnRhaW5lclJlZj17dGhpcy5wcm9wcy5jb250YWluZXJSZWZ9XG4gICAgICAgICAgY2FsZW5kYXJTdGFydERheT17dGhpcy5wcm9wcy5jYWxlbmRhclN0YXJ0RGF5fVxuICAgICAgICAgIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kPXt0aGlzLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kfVxuICAgICAgICAgIG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQ9e3RoaXMucHJvcHMubW9udGhTaG93c0R1cGxpY2F0ZURheXNTdGFydH1cbiAgICAgICAgLz4sXG4gICAgICApO1xuXG4gICAgICBpZiAoYnJlYWtBZnRlck5leHRQdXNoKSBicmVhaztcblxuICAgICAgaSsrO1xuICAgICAgY3VycmVudFdlZWtTdGFydCA9IHV0aWxzLmFkZFdlZWtzKGN1cnJlbnRXZWVrU3RhcnQsIDEpO1xuXG4gICAgICAvLyBJZiBvbmUgb2YgdGhlc2UgY29uZGl0aW9ucyBpcyB0cnVlLCB3ZSB3aWxsIGVpdGhlciBicmVhayBvbiB0aGlzIHdlZWtcbiAgICAgIC8vIG9yIGJyZWFrIG9uIHRoZSBuZXh0IHdlZWtcbiAgICAgIGNvbnN0IGlzRml4ZWRBbmRGaW5hbFdlZWsgPVxuICAgICAgICBpc0ZpeGVkSGVpZ2h0ICYmIGkgPj0gRklYRURfSEVJR0hUX1NUQU5EQVJEX1dFRUtfQ09VTlQ7XG4gICAgICBjb25zdCBpc05vbkZpeGVkQW5kT3V0T2ZNb250aCA9XG4gICAgICAgICFpc0ZpeGVkSGVpZ2h0ICYmICF0aGlzLmlzV2Vla0luTW9udGgoY3VycmVudFdlZWtTdGFydCk7XG5cbiAgICAgIGlmIChpc0ZpeGVkQW5kRmluYWxXZWVrIHx8IGlzTm9uRml4ZWRBbmRPdXRPZk1vbnRoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnBlZWtOZXh0TW9udGgpIHtcbiAgICAgICAgICBicmVha0FmdGVyTmV4dFB1c2ggPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdlZWtzO1xuICB9O1xuXG4gIG9uTW9udGhDbGljayA9IChlLCBtKSA9PiB7XG4gICAgY29uc3QgbGFiZWxEYXRlID0gdXRpbHMuc2V0TW9udGgodGhpcy5wcm9wcy5kYXksIG0pO1xuXG4gICAgaWYgKHV0aWxzLmlzTW9udGhEaXNhYmxlZChsYWJlbERhdGUsIHRoaXMucHJvcHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVEYXlDbGljayh1dGlscy5nZXRTdGFydE9mTW9udGgobGFiZWxEYXRlKSwgZSk7XG4gIH07XG5cbiAgb25Nb250aE1vdXNlRW50ZXIgPSAobSkgPT4ge1xuICAgIGNvbnN0IGxhYmVsRGF0ZSA9IHV0aWxzLnNldE1vbnRoKHRoaXMucHJvcHMuZGF5LCBtKTtcblxuICAgIGlmICh1dGlscy5pc01vbnRoRGlzYWJsZWQobGFiZWxEYXRlLCB0aGlzLnByb3BzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaGFuZGxlRGF5TW91c2VFbnRlcih1dGlscy5nZXRTdGFydE9mTW9udGgobGFiZWxEYXRlKSk7XG4gIH07XG5cbiAgaGFuZGxlTW9udGhOYXZpZ2F0aW9uID0gKG5ld01vbnRoLCBuZXdEYXRlKSA9PiB7XG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZChuZXdEYXRlKSB8fCB0aGlzLmlzRXhjbHVkZWQobmV3RGF0ZSkpIHJldHVybjtcbiAgICB0aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbihuZXdEYXRlKTtcbiAgICB0aGlzLk1PTlRIX1JFRlNbbmV3TW9udGhdLmN1cnJlbnQgJiZcbiAgICAgIHRoaXMuTU9OVEhfUkVGU1tuZXdNb250aF0uY3VycmVudC5mb2N1cygpO1xuICB9O1xuXG4gIG9uTW9udGhLZXlEb3duID0gKGV2ZW50LCBtb250aCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgcHJlU2VsZWN0aW9uLFxuICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24sXG4gICAgICBzaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyLFxuICAgICAgc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsXG4gICAgICBzZXRQcmVTZWxlY3Rpb24sXG4gICAgICBoYW5kbGVPbk1vbnRoS2V5RG93bixcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBldmVudEtleSA9IGV2ZW50LmtleTtcbiAgICBpZiAoZXZlbnRLZXkgIT09IFwiVGFiXCIpIHtcbiAgICAgIC8vIHByZXZlbnREZWZhdWx0IG9uIHRhYiBldmVudCBibG9ja3MgZm9jdXMgY2hhbmdlXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAoIWRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICBjb25zdCBtb250aENvbHVtbnNMYXlvdXQgPSBnZXRNb250aENvbHVtbnNMYXlvdXQoXG4gICAgICAgIHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyLFxuICAgICAgICBzaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHZlcnRpY2FsT2Zmc2V0ID1cbiAgICAgICAgTU9OVEhfQ09MVU1OU1ttb250aENvbHVtbnNMYXlvdXRdLnZlcnRpY2FsTmF2aWdhdGlvbk9mZnNldDtcbiAgICAgIGNvbnN0IG1vbnRoc0dyaWQgPSBNT05USF9DT0xVTU5TW21vbnRoQ29sdW1uc0xheW91dF0uZ3JpZDtcbiAgICAgIHN3aXRjaCAoZXZlbnRLZXkpIHtcbiAgICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICAgICAgdGhpcy5vbk1vbnRoQ2xpY2soZXZlbnQsIG1vbnRoKTtcbiAgICAgICAgICBzZXRQcmVTZWxlY3Rpb24oc2VsZWN0ZWQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICAgIHRoaXMuaGFuZGxlTW9udGhOYXZpZ2F0aW9uKFxuICAgICAgICAgICAgbW9udGggPT09IDExID8gMCA6IG1vbnRoICsgTU9OVEhfTkFWSUdBVElPTl9IT1JJWk9OVEFMX09GRlNFVCxcbiAgICAgICAgICAgIHV0aWxzLmFkZE1vbnRocyhwcmVTZWxlY3Rpb24sIE1PTlRIX05BVklHQVRJT05fSE9SSVpPTlRBTF9PRkZTRVQpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgICB0aGlzLmhhbmRsZU1vbnRoTmF2aWdhdGlvbihcbiAgICAgICAgICAgIG1vbnRoID09PSAwID8gMTEgOiBtb250aCAtIE1PTlRIX05BVklHQVRJT05fSE9SSVpPTlRBTF9PRkZTRVQsXG4gICAgICAgICAgICB1dGlscy5zdWJNb250aHMocHJlU2VsZWN0aW9uLCBNT05USF9OQVZJR0FUSU9OX0hPUklaT05UQUxfT0ZGU0VUKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICAgIHRoaXMuaGFuZGxlTW9udGhOYXZpZ2F0aW9uKFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbW9udGggb24gdGhlIGZpcnN0IHJvd1xuICAgICAgICAgICAgbW9udGhzR3JpZFswXS5pbmNsdWRlcyhtb250aClcbiAgICAgICAgICAgICAgPyBtb250aCArIDEyIC0gdmVydGljYWxPZmZzZXRcbiAgICAgICAgICAgICAgOiBtb250aCAtIHZlcnRpY2FsT2Zmc2V0LFxuICAgICAgICAgICAgdXRpbHMuc3ViTW9udGhzKHByZVNlbGVjdGlvbiwgdmVydGljYWxPZmZzZXQpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgICAgICB0aGlzLmhhbmRsZU1vbnRoTmF2aWdhdGlvbihcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIG1vbnRoIG9uIHRoZSBsYXN0IHJvd1xuICAgICAgICAgICAgbW9udGhzR3JpZFttb250aHNHcmlkLmxlbmd0aCAtIDFdLmluY2x1ZGVzKG1vbnRoKVxuICAgICAgICAgICAgICA/IG1vbnRoIC0gMTIgKyB2ZXJ0aWNhbE9mZnNldFxuICAgICAgICAgICAgICA6IG1vbnRoICsgdmVydGljYWxPZmZzZXQsXG4gICAgICAgICAgICB1dGlscy5hZGRNb250aHMocHJlU2VsZWN0aW9uLCB2ZXJ0aWNhbE9mZnNldCksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVPbk1vbnRoS2V5RG93biAmJiBoYW5kbGVPbk1vbnRoS2V5RG93bihldmVudCk7XG4gIH07XG5cbiAgb25RdWFydGVyQ2xpY2sgPSAoZSwgcSkgPT4ge1xuICAgIGNvbnN0IGxhYmVsRGF0ZSA9IHV0aWxzLnNldFF1YXJ0ZXIodGhpcy5wcm9wcy5kYXksIHEpO1xuXG4gICAgaWYgKHV0aWxzLmlzUXVhcnRlckRpc2FibGVkKGxhYmVsRGF0ZSwgdGhpcy5wcm9wcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZURheUNsaWNrKHV0aWxzLmdldFN0YXJ0T2ZRdWFydGVyKGxhYmVsRGF0ZSksIGUpO1xuICB9O1xuXG4gIG9uUXVhcnRlck1vdXNlRW50ZXIgPSAocSkgPT4ge1xuICAgIGNvbnN0IGxhYmVsRGF0ZSA9IHV0aWxzLnNldFF1YXJ0ZXIodGhpcy5wcm9wcy5kYXksIHEpO1xuXG4gICAgaWYgKHV0aWxzLmlzUXVhcnRlckRpc2FibGVkKGxhYmVsRGF0ZSwgdGhpcy5wcm9wcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhhbmRsZURheU1vdXNlRW50ZXIodXRpbHMuZ2V0U3RhcnRPZlF1YXJ0ZXIobGFiZWxEYXRlKSk7XG4gIH07XG5cbiAgaGFuZGxlUXVhcnRlck5hdmlnYXRpb24gPSAobmV3UXVhcnRlciwgbmV3RGF0ZSkgPT4ge1xuICAgIGlmICh0aGlzLmlzRGlzYWJsZWQobmV3RGF0ZSkgfHwgdGhpcy5pc0V4Y2x1ZGVkKG5ld0RhdGUpKSByZXR1cm47XG4gICAgdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24obmV3RGF0ZSk7XG4gICAgdGhpcy5RVUFSVEVSX1JFRlNbbmV3UXVhcnRlciAtIDFdLmN1cnJlbnQgJiZcbiAgICAgIHRoaXMuUVVBUlRFUl9SRUZTW25ld1F1YXJ0ZXIgLSAxXS5jdXJyZW50LmZvY3VzKCk7XG4gIH07XG5cbiAgb25RdWFydGVyS2V5RG93biA9IChldmVudCwgcXVhcnRlcikgPT4ge1xuICAgIGNvbnN0IGV2ZW50S2V5ID0gZXZlbnQua2V5O1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbikge1xuICAgICAgc3dpdGNoIChldmVudEtleSkge1xuICAgICAgICBjYXNlIFwiRW50ZXJcIjpcbiAgICAgICAgICB0aGlzLm9uUXVhcnRlckNsaWNrKGV2ZW50LCBxdWFydGVyKTtcbiAgICAgICAgICB0aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbih0aGlzLnByb3BzLnNlbGVjdGVkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICB0aGlzLmhhbmRsZVF1YXJ0ZXJOYXZpZ2F0aW9uKFxuICAgICAgICAgICAgcXVhcnRlciA9PT0gNCA/IDEgOiBxdWFydGVyICsgMSxcbiAgICAgICAgICAgIHV0aWxzLmFkZFF1YXJ0ZXJzKHRoaXMucHJvcHMucHJlU2VsZWN0aW9uLCAxKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgdGhpcy5oYW5kbGVRdWFydGVyTmF2aWdhdGlvbihcbiAgICAgICAgICAgIHF1YXJ0ZXIgPT09IDEgPyA0IDogcXVhcnRlciAtIDEsXG4gICAgICAgICAgICB1dGlscy5zdWJRdWFydGVycyh0aGlzLnByb3BzLnByZVNlbGVjdGlvbiwgMSksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaXNNb250aERpc2FibGVkID0gKG1vbnRoKSA9PiB7XG4gICAgY29uc3QgeyBkYXksIG1pbkRhdGUsIG1heERhdGUsIGV4Y2x1ZGVEYXRlcywgaW5jbHVkZURhdGVzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGxhYmVsRGF0ZSA9IHV0aWxzLnNldE1vbnRoKGRheSwgbW9udGgpO1xuICAgIHJldHVybiAoXG4gICAgICAobWluRGF0ZSB8fCBtYXhEYXRlIHx8IGV4Y2x1ZGVEYXRlcyB8fCBpbmNsdWRlRGF0ZXMpICYmXG4gICAgICB1dGlscy5pc01vbnRoRGlzYWJsZWQobGFiZWxEYXRlLCB0aGlzLnByb3BzKVxuICAgICk7XG4gIH07XG5cbiAgZ2V0TW9udGhDbGFzc05hbWVzID0gKG0pID0+IHtcbiAgICBjb25zdCB7IGRheSwgc3RhcnREYXRlLCBlbmREYXRlLCBzZWxlY3RlZCwgcHJlU2VsZWN0aW9uLCBtb250aENsYXNzTmFtZSB9ID1cbiAgICAgIHRoaXMucHJvcHM7XG4gICAgY29uc3QgX21vbnRoQ2xhc3NOYW1lID0gbW9udGhDbGFzc05hbWVcbiAgICAgID8gbW9udGhDbGFzc05hbWUodXRpbHMuc2V0TW9udGgoZGF5LCBtKSlcbiAgICAgIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBjbHN4KFxuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0XCIsXG4gICAgICBgcmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtJHttfWAsXG4gICAgICBfbW9udGhDbGFzc05hbWUsXG4gICAgICB7XG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0tZGlzYWJsZWRcIjogdGhpcy5pc01vbnRoRGlzYWJsZWQobSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0tc2VsZWN0ZWRcIjogdGhpcy5pc1NlbGVjdGVkTW9udGgoXG4gICAgICAgICAgZGF5LFxuICAgICAgICAgIG0sXG4gICAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgICksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0ta2V5Ym9hcmQtc2VsZWN0ZWRcIjpcbiAgICAgICAgICAhdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiAmJlxuICAgICAgICAgIHRoaXMuaXNTZWxlY3RlZE1vbnRoKGRheSwgbSwgcHJlU2VsZWN0aW9uKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2VcIjpcbiAgICAgICAgICB0aGlzLmlzSW5TZWxlY3RpbmdSYW5nZU1vbnRoKG0pLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLWluLXJhbmdlXCI6IHV0aWxzLmlzTW9udGhJblJhbmdlKFxuICAgICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmREYXRlLFxuICAgICAgICAgIG0sXG4gICAgICAgICAgZGF5LFxuICAgICAgICApLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXJhbmdlLXN0YXJ0XCI6IHRoaXMuaXNSYW5nZVN0YXJ0TW9udGgobSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0tcmFuZ2UtZW5kXCI6IHRoaXMuaXNSYW5nZUVuZE1vbnRoKG0pLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXNlbGVjdGluZy1yYW5nZS1zdGFydFwiOlxuICAgICAgICAgIHRoaXMuaXNTZWxlY3RpbmdNb250aFJhbmdlU3RhcnQobSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dC0tc2VsZWN0aW5nLXJhbmdlLWVuZFwiOlxuICAgICAgICAgIHRoaXMuaXNTZWxlY3RpbmdNb250aFJhbmdlRW5kKG0pLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXRleHQtLXRvZGF5XCI6IHRoaXMuaXNDdXJyZW50TW9udGgoZGF5LCBtKSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfTtcblxuICBnZXRUYWJJbmRleCA9IChtKSA9PiB7XG4gICAgY29uc3QgcHJlU2VsZWN0ZWRNb250aCA9IHV0aWxzLmdldE1vbnRoKHRoaXMucHJvcHMucHJlU2VsZWN0aW9uKTtcbiAgICBjb25zdCB0YWJJbmRleCA9XG4gICAgICAhdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiAmJiBtID09PSBwcmVTZWxlY3RlZE1vbnRoXG4gICAgICAgID8gXCIwXCJcbiAgICAgICAgOiBcIi0xXCI7XG5cbiAgICByZXR1cm4gdGFiSW5kZXg7XG4gIH07XG5cbiAgZ2V0UXVhcnRlclRhYkluZGV4ID0gKHEpID0+IHtcbiAgICBjb25zdCBwcmVTZWxlY3RlZFF1YXJ0ZXIgPSB1dGlscy5nZXRRdWFydGVyKHRoaXMucHJvcHMucHJlU2VsZWN0aW9uKTtcbiAgICBjb25zdCB0YWJJbmRleCA9XG4gICAgICAhdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiAmJiBxID09PSBwcmVTZWxlY3RlZFF1YXJ0ZXJcbiAgICAgICAgPyBcIjBcIlxuICAgICAgICA6IFwiLTFcIjtcblxuICAgIHJldHVybiB0YWJJbmRleDtcbiAgfTtcblxuICBnZXRBcmlhTGFiZWwgPSAobW9udGgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjaG9vc2VEYXlBcmlhTGFiZWxQcmVmaXggPSBcIkNob29zZVwiLFxuICAgICAgZGlzYWJsZWREYXlBcmlhTGFiZWxQcmVmaXggPSBcIk5vdCBhdmFpbGFibGVcIixcbiAgICAgIGRheSxcbiAgICAgIGxvY2FsZSxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBsYWJlbERhdGUgPSB1dGlscy5zZXRNb250aChkYXksIG1vbnRoKTtcbiAgICBjb25zdCBwcmVmaXggPVxuICAgICAgdGhpcy5pc0Rpc2FibGVkKGxhYmVsRGF0ZSkgfHwgdGhpcy5pc0V4Y2x1ZGVkKGxhYmVsRGF0ZSlcbiAgICAgICAgPyBkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeFxuICAgICAgICA6IGNob29zZURheUFyaWFMYWJlbFByZWZpeDtcblxuICAgIHJldHVybiBgJHtwcmVmaXh9ICR7dXRpbHMuZm9ybWF0RGF0ZShsYWJlbERhdGUsIFwiTU1NTSB5eXl5XCIsIGxvY2FsZSl9YDtcbiAgfTtcblxuICBnZXRRdWFydGVyQ2xhc3NOYW1lcyA9IChxKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZGF5LFxuICAgICAgc3RhcnREYXRlLFxuICAgICAgZW5kRGF0ZSxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgbWluRGF0ZSxcbiAgICAgIG1heERhdGUsXG4gICAgICBwcmVTZWxlY3Rpb24sXG4gICAgICBkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2xzeChcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0XCIsXG4gICAgICBgcmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0ke3F9YCxcbiAgICAgIHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWRpc2FibGVkXCI6XG4gICAgICAgICAgKG1pbkRhdGUgfHwgbWF4RGF0ZSkgJiZcbiAgICAgICAgICB1dGlscy5pc1F1YXJ0ZXJEaXNhYmxlZCh1dGlscy5zZXRRdWFydGVyKGRheSwgcSksIHRoaXMucHJvcHMpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0tc2VsZWN0ZWRcIjogdGhpcy5pc1NlbGVjdGVkUXVhcnRlcihcbiAgICAgICAgICBkYXksXG4gICAgICAgICAgcSxcbiAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgKSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXRleHQtLWtleWJvYXJkLXNlbGVjdGVkXCI6XG4gICAgICAgICAgIWRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uICYmXG4gICAgICAgICAgdGhpcy5pc1NlbGVjdGVkUXVhcnRlcihkYXksIHEsIHByZVNlbGVjdGlvbiksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1zZWxlY3RpbmctcmFuZ2VcIjpcbiAgICAgICAgICB0aGlzLmlzSW5TZWxlY3RpbmdSYW5nZVF1YXJ0ZXIocSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1pbi1yYW5nZVwiOiB1dGlscy5pc1F1YXJ0ZXJJblJhbmdlKFxuICAgICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmREYXRlLFxuICAgICAgICAgIHEsXG4gICAgICAgICAgZGF5LFxuICAgICAgICApLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dC0tcmFuZ2Utc3RhcnRcIjpcbiAgICAgICAgICB0aGlzLmlzUmFuZ2VTdGFydFF1YXJ0ZXIocSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci10ZXh0LS1yYW5nZS1lbmRcIjogdGhpcy5pc1JhbmdlRW5kUXVhcnRlcihxKSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfTtcblxuICBnZXRNb250aENvbnRlbnQgPSAobSkgPT4ge1xuICAgIGNvbnN0IHsgc2hvd0Z1bGxNb250aFllYXJQaWNrZXIsIHJlbmRlck1vbnRoQ29udGVudCwgbG9jYWxlLCBkYXkgfSA9XG4gICAgICB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHNob3J0TW9udGhUZXh0ID0gdXRpbHMuZ2V0TW9udGhTaG9ydEluTG9jYWxlKG0sIGxvY2FsZSk7XG4gICAgY29uc3QgZnVsbE1vbnRoVGV4dCA9IHV0aWxzLmdldE1vbnRoSW5Mb2NhbGUobSwgbG9jYWxlKTtcbiAgICBpZiAocmVuZGVyTW9udGhDb250ZW50KSB7XG4gICAgICByZXR1cm4gcmVuZGVyTW9udGhDb250ZW50KG0sIHNob3J0TW9udGhUZXh0LCBmdWxsTW9udGhUZXh0LCBkYXkpO1xuICAgIH1cbiAgICByZXR1cm4gc2hvd0Z1bGxNb250aFllYXJQaWNrZXIgPyBmdWxsTW9udGhUZXh0IDogc2hvcnRNb250aFRleHQ7XG4gIH07XG5cbiAgZ2V0UXVhcnRlckNvbnRlbnQgPSAocSkgPT4ge1xuICAgIGNvbnN0IHsgcmVuZGVyUXVhcnRlckNvbnRlbnQsIGxvY2FsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzaG9ydFF1YXJ0ZXIgPSB1dGlscy5nZXRRdWFydGVyU2hvcnRJbkxvY2FsZShxLCBsb2NhbGUpO1xuICAgIHJldHVybiByZW5kZXJRdWFydGVyQ29udGVudFxuICAgICAgPyByZW5kZXJRdWFydGVyQ29udGVudChxLCBzaG9ydFF1YXJ0ZXIpXG4gICAgICA6IHNob3J0UXVhcnRlcjtcbiAgfTtcblxuICByZW5kZXJNb250aHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlcixcbiAgICAgIHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyLFxuICAgICAgZGF5LFxuICAgICAgc2VsZWN0ZWQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBtb250aENvbHVtbnMgPVxuICAgICAgTU9OVEhfQ09MVU1OU1tcbiAgICAgICAgZ2V0TW9udGhDb2x1bW5zTGF5b3V0KFxuICAgICAgICAgIHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyLFxuICAgICAgICAgIHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXIsXG4gICAgICAgIClcbiAgICAgIF0uZ3JpZDtcbiAgICByZXR1cm4gbW9udGhDb2x1bW5zLm1hcCgobW9udGgsIGkpID0+IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtd3JhcHBlclwiIGtleT17aX0+XG4gICAgICAgIHttb250aC5tYXAoKG0sIGopID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICByZWY9e3RoaXMuTU9OVEhfUkVGU1ttXX1cbiAgICAgICAgICAgIGtleT17an1cbiAgICAgICAgICAgIG9uQ2xpY2s9eyhldikgPT4ge1xuICAgICAgICAgICAgICB0aGlzLm9uTW9udGhDbGljayhldiwgbSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25LZXlEb3duPXsoZXYpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHV0aWxzLmlzU3BhY2VLZXlEb3duKGV2KSkge1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXYua2V5ID0gXCJFbnRlclwiO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5vbk1vbnRoS2V5RG93bihldiwgbSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25Nb3VzZUVudGVyPXtcbiAgICAgICAgICAgICAgIXRoaXMucHJvcHMudXNlUG9pbnRlckV2ZW50XG4gICAgICAgICAgICAgICAgPyAoKSA9PiB0aGlzLm9uTW9udGhNb3VzZUVudGVyKG0pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uUG9pbnRlckVudGVyPXtcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnRcbiAgICAgICAgICAgICAgICA/ICgpID0+IHRoaXMub25Nb250aE1vdXNlRW50ZXIobSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFiSW5kZXg9e3RoaXMuZ2V0VGFiSW5kZXgobSl9XG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuZ2V0TW9udGhDbGFzc05hbWVzKG0pfVxuICAgICAgICAgICAgYXJpYS1kaXNhYmxlZD17dGhpcy5pc01vbnRoRGlzYWJsZWQobSl9XG4gICAgICAgICAgICByb2xlPVwib3B0aW9uXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e3RoaXMuZ2V0QXJpYUxhYmVsKG0pfVxuICAgICAgICAgICAgYXJpYS1jdXJyZW50PXt0aGlzLmlzQ3VycmVudE1vbnRoKGRheSwgbSkgPyBcImRhdGVcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9e3RoaXMuaXNTZWxlY3RlZE1vbnRoKGRheSwgbSwgc2VsZWN0ZWQpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aGlzLmdldE1vbnRoQ29udGVudChtKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICApKTtcbiAgfTtcblxuICByZW5kZXJRdWFydGVycyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGRheSwgc2VsZWN0ZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcXVhcnRlcnMgPSBbMSwgMiwgMywgNF07XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci13cmFwcGVyXCI+XG4gICAgICAgIHtxdWFydGVycy5tYXAoKHEsIGopID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBrZXk9e2p9XG4gICAgICAgICAgICByZWY9e3RoaXMuUVVBUlRFUl9SRUZTW2pdfVxuICAgICAgICAgICAgcm9sZT1cIm9wdGlvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoZXYpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vblF1YXJ0ZXJDbGljayhldiwgcSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25LZXlEb3duPXsoZXYpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vblF1YXJ0ZXJLZXlEb3duKGV2LCBxKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI9e1xuICAgICAgICAgICAgICAhdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnRcbiAgICAgICAgICAgICAgICA/ICgpID0+IHRoaXMub25RdWFydGVyTW91c2VFbnRlcihxKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvblBvaW50ZXJFbnRlcj17XG4gICAgICAgICAgICAgIHRoaXMucHJvcHMudXNlUG9pbnRlckV2ZW50XG4gICAgICAgICAgICAgICAgPyAoKSA9PiB0aGlzLm9uUXVhcnRlck1vdXNlRW50ZXIocSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLmdldFF1YXJ0ZXJDbGFzc05hbWVzKHEpfVxuICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD17dGhpcy5pc1NlbGVjdGVkUXVhcnRlcihkYXksIHEsIHNlbGVjdGVkKX1cbiAgICAgICAgICAgIHRhYkluZGV4PXt0aGlzLmdldFF1YXJ0ZXJUYWJJbmRleChxKX1cbiAgICAgICAgICAgIGFyaWEtY3VycmVudD17dGhpcy5pc0N1cnJlbnRRdWFydGVyKGRheSwgcSkgPyBcImRhdGVcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dGhpcy5nZXRRdWFydGVyQ29udGVudChxKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIGdldENsYXNzTmFtZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2VsZWN0aW5nRGF0ZSxcbiAgICAgIHNlbGVjdHNTdGFydCxcbiAgICAgIHNlbGVjdHNFbmQsXG4gICAgICBzaG93TW9udGhZZWFyUGlja2VyLFxuICAgICAgc2hvd1F1YXJ0ZXJZZWFyUGlja2VyLFxuICAgICAgc2hvd1dlZWtQaWNrZXIsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2xzeChcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGhcIixcbiAgICAgIHtcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC0tc2VsZWN0aW5nLXJhbmdlXCI6XG4gICAgICAgICAgc2VsZWN0aW5nRGF0ZSAmJiAoc2VsZWN0c1N0YXJ0IHx8IHNlbGVjdHNFbmQpLFxuICAgICAgfSxcbiAgICAgIHsgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aFBpY2tlclwiOiBzaG93TW9udGhZZWFyUGlja2VyIH0sXG4gICAgICB7IFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlclBpY2tlclwiOiBzaG93UXVhcnRlclllYXJQaWNrZXIgfSxcbiAgICAgIHsgXCJyZWFjdC1kYXRlcGlja2VyX193ZWVrUGlja2VyXCI6IHNob3dXZWVrUGlja2VyIH0sXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2hvd01vbnRoWWVhclBpY2tlcixcbiAgICAgIHNob3dRdWFydGVyWWVhclBpY2tlcixcbiAgICAgIGRheSxcbiAgICAgIGFyaWFMYWJlbFByZWZpeCA9IFwiTW9udGggXCIsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBmb3JtYXR0ZWRBcmlhTGFiZWxQcmVmaXggPSBhcmlhTGFiZWxQcmVmaXhcbiAgICAgID8gYXJpYUxhYmVsUHJlZml4LnRyaW0oKSArIFwiIFwiXG4gICAgICA6IFwiXCI7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e3RoaXMuZ2V0Q2xhc3NOYW1lcygpfVxuICAgICAgICBvbk1vdXNlTGVhdmU9e1xuICAgICAgICAgICF0aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudCA/IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSA6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIG9uUG9pbnRlckxlYXZlPXtcbiAgICAgICAgICB0aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudCA/IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSA6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIGFyaWEtbGFiZWw9e2Ake2Zvcm1hdHRlZEFyaWFMYWJlbFByZWZpeH0ke3V0aWxzLmZvcm1hdERhdGUoZGF5LCBcIk1NTU0sIHl5eXlcIiwgdGhpcy5wcm9wcy5sb2NhbGUpfWB9XG4gICAgICAgIHJvbGU9XCJsaXN0Ym94XCJcbiAgICAgID5cbiAgICAgICAge3Nob3dNb250aFllYXJQaWNrZXJcbiAgICAgICAgICA/IHRoaXMucmVuZGVyTW9udGhzKClcbiAgICAgICAgICA6IHNob3dRdWFydGVyWWVhclBpY2tlclxuICAgICAgICAgICAgPyB0aGlzLnJlbmRlclF1YXJ0ZXJzKClcbiAgICAgICAgICAgIDogdGhpcy5yZW5kZXJXZWVrcygpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHtcbiAgZ2V0SG91cnMsXG4gIGdldE1pbnV0ZXMsXG4gIG5ld0RhdGUsXG4gIGdldFN0YXJ0T2ZEYXksXG4gIGFkZE1pbnV0ZXMsXG4gIGZvcm1hdERhdGUsXG4gIGlzVGltZUluRGlzYWJsZWRSYW5nZSxcbiAgaXNUaW1lRGlzYWJsZWQsXG4gIHRpbWVzVG9JbmplY3RBZnRlcixcbiAgZ2V0SG91cnNJbkRheSxcbiAgaXNTYW1lTWludXRlLFxufSBmcm9tIFwiLi9kYXRlX3V0aWxzXCI7XG5pbXBvcnQgeyBnZXRTZWNvbmRzIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW50ZXJ2YWxzOiAzMCxcbiAgICAgIG9uVGltZUNoYW5nZTogKCkgPT4ge30sXG4gICAgICB0b2RheUJ1dHRvbjogbnVsbCxcbiAgICAgIHRpbWVDYXB0aW9uOiBcIlRpbWVcIixcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGNhbGNDZW50ZXJQb3NpdGlvbiA9IChsaXN0SGVpZ2h0LCBjZW50ZXJMaVJlZikgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICBjZW50ZXJMaVJlZi5vZmZzZXRUb3AgLSAobGlzdEhlaWdodCAvIDIgLSBjZW50ZXJMaVJlZi5jbGllbnRIZWlnaHQgLyAyKVxuICAgICk7XG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmb3JtYXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW5jbHVkZVRpbWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW50ZXJ2YWxzOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHNlbGVjdGVkOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBvcGVuVG9EYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGltZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdG9kYXlCdXR0b246IFByb3BUeXBlcy5ub2RlLFxuICAgIG1pblRpbWU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIG1heFRpbWU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIGV4Y2x1ZGVUaW1lczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGZpbHRlclRpbWU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG1vbnRoUmVmOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRpbWVDYXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGluamVjdFRpbWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaGFuZGxlT25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhbGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7IGxvY2FsZTogUHJvcFR5cGVzLm9iamVjdCB9KSxcbiAgICBdKSxcbiAgICBzaG93VGltZVNlbGVjdE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGhlaWdodDogbnVsbCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBjb2RlIHRvIGVuc3VyZSBzZWxlY3RlZCB0aW1lIHdpbGwgYWx3YXlzIGJlIGluIGZvY3VzIHdpdGhpbiB0aW1lIHdpbmRvdyB3aGVuIGl0IGZpcnN0IGFwcGVhcnNcbiAgICB0aGlzLnNjcm9sbFRvVGhlU2VsZWN0ZWRUaW1lKCk7XG4gICAgaWYgKHRoaXMucHJvcHMubW9udGhSZWYgJiYgdGhpcy5oZWFkZXIpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBoZWlnaHQ6IHRoaXMucHJvcHMubW9udGhSZWYuY2xpZW50SGVpZ2h0IC0gdGhpcy5oZWFkZXIuY2xpZW50SGVpZ2h0LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2Nyb2xsVG9UaGVTZWxlY3RlZFRpbWUgPSAoKSA9PiB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5saXN0KSByZXR1cm47XG5cbiAgICAgIHRoaXMubGlzdC5zY3JvbGxUb3AgPVxuICAgICAgICB0aGlzLmNlbnRlckxpICYmXG4gICAgICAgIFRpbWUuY2FsY0NlbnRlclBvc2l0aW9uKFxuICAgICAgICAgIHRoaXMucHJvcHMubW9udGhSZWZcbiAgICAgICAgICAgID8gdGhpcy5wcm9wcy5tb250aFJlZi5jbGllbnRIZWlnaHQgLSB0aGlzLmhlYWRlci5jbGllbnRIZWlnaHRcbiAgICAgICAgICAgIDogdGhpcy5saXN0LmNsaWVudEhlaWdodCxcbiAgICAgICAgICB0aGlzLmNlbnRlckxpLFxuICAgICAgICApO1xuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUNsaWNrID0gKHRpbWUpID0+IHtcbiAgICBpZiAoXG4gICAgICAoKHRoaXMucHJvcHMubWluVGltZSB8fCB0aGlzLnByb3BzLm1heFRpbWUpICYmXG4gICAgICAgIGlzVGltZUluRGlzYWJsZWRSYW5nZSh0aW1lLCB0aGlzLnByb3BzKSkgfHxcbiAgICAgICgodGhpcy5wcm9wcy5leGNsdWRlVGltZXMgfHxcbiAgICAgICAgdGhpcy5wcm9wcy5pbmNsdWRlVGltZXMgfHxcbiAgICAgICAgdGhpcy5wcm9wcy5maWx0ZXJUaW1lKSAmJlxuICAgICAgICBpc1RpbWVEaXNhYmxlZCh0aW1lLCB0aGlzLnByb3BzKSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0aW1lKTtcbiAgfTtcblxuICBpc1NlbGVjdGVkVGltZSA9ICh0aW1lKSA9PlxuICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQgJiYgaXNTYW1lTWludXRlKHRoaXMucHJvcHMuc2VsZWN0ZWQsIHRpbWUpO1xuXG4gIGlzRGlzYWJsZWRUaW1lID0gKHRpbWUpID0+XG4gICAgKCh0aGlzLnByb3BzLm1pblRpbWUgfHwgdGhpcy5wcm9wcy5tYXhUaW1lKSAmJlxuICAgICAgaXNUaW1lSW5EaXNhYmxlZFJhbmdlKHRpbWUsIHRoaXMucHJvcHMpKSB8fFxuICAgICgodGhpcy5wcm9wcy5leGNsdWRlVGltZXMgfHxcbiAgICAgIHRoaXMucHJvcHMuaW5jbHVkZVRpbWVzIHx8XG4gICAgICB0aGlzLnByb3BzLmZpbHRlclRpbWUpICYmXG4gICAgICBpc1RpbWVEaXNhYmxlZCh0aW1lLCB0aGlzLnByb3BzKSk7XG5cbiAgbGlDbGFzc2VzID0gKHRpbWUpID0+IHtcbiAgICBsZXQgY2xhc3NlcyA9IFtcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW1cIixcbiAgICAgIHRoaXMucHJvcHMudGltZUNsYXNzTmFtZSA/IHRoaXMucHJvcHMudGltZUNsYXNzTmFtZSh0aW1lKSA6IHVuZGVmaW5lZCxcbiAgICBdO1xuXG4gICAgaWYgKHRoaXMuaXNTZWxlY3RlZFRpbWUodGltZSkpIHtcbiAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1zZWxlY3RlZFwiKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0Rpc2FibGVkVGltZSh0aW1lKSkge1xuICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW0tLWRpc2FibGVkXCIpO1xuICAgIH1cblxuICAgIC8vY29udmVydCB0aGlzLnByb3BzLmludGVydmFscyBhbmQgdGhlIHJlbGV2YW50IHRpbWUgdG8gc2Vjb25kcyBhbmQgY2hlY2sgaWYgaXQgaXQncyBhIGNsZWFuIG11bHRpcGxlIG9mIHRoZSBpbnRlcnZhbFxuICAgIGlmIChcbiAgICAgIHRoaXMucHJvcHMuaW5qZWN0VGltZXMgJiZcbiAgICAgIChnZXRIb3Vycyh0aW1lKSAqIDM2MDAgKyBnZXRNaW51dGVzKHRpbWUpICogNjAgKyBnZXRTZWNvbmRzKHRpbWUpKSAlXG4gICAgICAgICh0aGlzLnByb3BzLmludGVydmFscyAqIDYwKSAhPT1cbiAgICAgICAgMFxuICAgICkge1xuICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1saXN0LWl0ZW0tLWluamVjdGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc2VzLmpvaW4oXCIgXCIpO1xuICB9O1xuXG4gIGhhbmRsZU9uS2V5RG93biA9IChldmVudCwgdGltZSkgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09IFwiIFwiKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQua2V5ID0gXCJFbnRlclwiO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIChldmVudC5rZXkgPT09IFwiQXJyb3dVcFwiIHx8IGV2ZW50LmtleSA9PT0gXCJBcnJvd0xlZnRcIikgJiZcbiAgICAgIGV2ZW50LnRhcmdldC5wcmV2aW91c1NpYmxpbmdcbiAgICApIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC50YXJnZXQucHJldmlvdXNTaWJsaW5nLmZvY3VzKCk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChldmVudC5rZXkgPT09IFwiQXJyb3dEb3duXCIgfHwgZXZlbnQua2V5ID09PSBcIkFycm93UmlnaHRcIikgJiZcbiAgICAgIGV2ZW50LnRhcmdldC5uZXh0U2libGluZ1xuICAgICkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnRhcmdldC5uZXh0U2libGluZy5mb2N1cygpO1xuICAgIH1cblxuICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgdGhpcy5oYW5kbGVDbGljayh0aW1lKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5oYW5kbGVPbktleURvd24oZXZlbnQpO1xuICB9O1xuXG4gIHJlbmRlclRpbWVzID0gKCkgPT4ge1xuICAgIGxldCB0aW1lcyA9IFtdO1xuICAgIGNvbnN0IGZvcm1hdCA9IHRoaXMucHJvcHMuZm9ybWF0ID8gdGhpcy5wcm9wcy5mb3JtYXQgOiBcInBcIjtcbiAgICBjb25zdCBpbnRlcnZhbHMgPSB0aGlzLnByb3BzLmludGVydmFscztcblxuICAgIGNvbnN0IGFjdGl2ZURhdGUgPVxuICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZCB8fCB0aGlzLnByb3BzLm9wZW5Ub0RhdGUgfHwgbmV3RGF0ZSgpO1xuXG4gICAgY29uc3QgYmFzZSA9IGdldFN0YXJ0T2ZEYXkoYWN0aXZlRGF0ZSk7XG4gICAgY29uc3Qgc29ydGVkSW5qZWN0VGltZXMgPVxuICAgICAgdGhpcy5wcm9wcy5pbmplY3RUaW1lcyAmJlxuICAgICAgdGhpcy5wcm9wcy5pbmplY3RUaW1lcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgbWludXRlc0luRGF5ID0gNjAgKiBnZXRIb3Vyc0luRGF5KGFjdGl2ZURhdGUpO1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBtaW51dGVzSW5EYXkgLyBpbnRlcnZhbHM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11bHRpcGxpZXI7IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBhZGRNaW51dGVzKGJhc2UsIGkgKiBpbnRlcnZhbHMpO1xuICAgICAgdGltZXMucHVzaChjdXJyZW50VGltZSk7XG5cbiAgICAgIGlmIChzb3J0ZWRJbmplY3RUaW1lcykge1xuICAgICAgICBjb25zdCB0aW1lc1RvSW5qZWN0ID0gdGltZXNUb0luamVjdEFmdGVyKFxuICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgY3VycmVudFRpbWUsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBpbnRlcnZhbHMsXG4gICAgICAgICAgc29ydGVkSW5qZWN0VGltZXMsXG4gICAgICAgICk7XG4gICAgICAgIHRpbWVzID0gdGltZXMuY29uY2F0KHRpbWVzVG9JbmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERldGVybWluZSB3aGljaCB0aW1lIHRvIGZvY3VzIGFuZCBzY3JvbGwgaW50byB2aWV3IHdoZW4gY29tcG9uZW50IG1vdW50c1xuICAgIGNvbnN0IHRpbWVUb0ZvY3VzID0gdGltZXMucmVkdWNlKChwcmV2LCB0aW1lKSA9PiB7XG4gICAgICBpZiAodGltZS5nZXRUaW1lKCkgPD0gYWN0aXZlRGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9LCB0aW1lc1swXSk7XG5cbiAgICByZXR1cm4gdGltZXMubWFwKCh0aW1lLCBpKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGlcbiAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMsIHRpbWUpfVxuICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5saUNsYXNzZXModGltZSl9XG4gICAgICAgICAgcmVmPXsobGkpID0+IHtcbiAgICAgICAgICAgIGlmICh0aW1lID09PSB0aW1lVG9Gb2N1cykge1xuICAgICAgICAgICAgICB0aGlzLmNlbnRlckxpID0gbGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbktleURvd249eyhldikgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVPbktleURvd24oZXYsIHRpbWUpO1xuICAgICAgICAgIH19XG4gICAgICAgICAgdGFiSW5kZXg9e3RpbWUgPT09IHRpbWVUb0ZvY3VzID8gMCA6IC0xfVxuICAgICAgICAgIHJvbGU9XCJvcHRpb25cIlxuICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9e3RoaXMuaXNTZWxlY3RlZFRpbWUodGltZSkgPyBcInRydWVcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICBhcmlhLWRpc2FibGVkPXt0aGlzLmlzRGlzYWJsZWRUaW1lKHRpbWUpID8gXCJ0cnVlXCIgOiB1bmRlZmluZWR9XG4gICAgICAgID5cbiAgICAgICAgICB7Zm9ybWF0RGF0ZSh0aW1lLCBmb3JtYXQsIHRoaXMucHJvcHMubG9jYWxlKX1cbiAgICAgICAgPC9saT5cbiAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGVpZ2h0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtgcmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXIgJHtcbiAgICAgICAgICB0aGlzLnByb3BzLnRvZGF5QnV0dG9uXG4gICAgICAgICAgICA/IFwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1jb250YWluZXItLXdpdGgtdG9kYXktYnV0dG9uXCJcbiAgICAgICAgICAgIDogXCJcIlxuICAgICAgICB9YH1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17YHJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlciByZWFjdC1kYXRlcGlja2VyX19oZWFkZXItLXRpbWUgJHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5XG4gICAgICAgICAgICAgID8gXCJyZWFjdC1kYXRlcGlja2VyX19oZWFkZXItLXRpbWUtLW9ubHlcIlxuICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICB9YH1cbiAgICAgICAgICByZWY9eyhoZWFkZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXItdGltZV9faGVhZGVyXCI+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy50aW1lQ2FwdGlvbn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fdGltZS1ib3hcIj5cbiAgICAgICAgICAgIDx1bFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3RcIlxuICAgICAgICAgICAgICByZWY9eyhsaXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ID0gbGlzdDtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgc3R5bGU9e2hlaWdodCA/IHsgaGVpZ2h0IH0gOiB7fX1cbiAgICAgICAgICAgICAgcm9sZT1cImxpc3Rib3hcIlxuICAgICAgICAgICAgICBhcmlhLWxhYmVsPXt0aGlzLnByb3BzLnRpbWVDYXB0aW9ufVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJUaW1lcygpfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBnZXRZZWFyLCBuZXdEYXRlIH0gZnJvbSBcIi4vZGF0ZV91dGlsc1wiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4vZGF0ZV91dGlsc1wiO1xuaW1wb3J0IHsgY2xzeCB9IGZyb20gXCJjbHN4XCI7XG5cbmNvbnN0IFZFUlRJQ0FMX05BVklHQVRJT05fT0ZGU0VUID0gMztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWWVhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2xlYXJTZWxlY3RpbmdEYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBkYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgZW5kRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgb25EYXlDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcHJlU2VsZWN0aW9uOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBzZXRQcmVTZWxlY3Rpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbGVjdGVkOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWF4RGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgbWluRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgdXNlUG9pbnRlckV2ZW50OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvblllYXJNb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uWWVhck1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0aW5nRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgcmVuZGVyWWVhckNvbnRlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbGVjdHNFbmQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdHNTdGFydDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0c1JhbmdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdGFydERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIGV4Y2x1ZGVEYXRlczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgZGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkuaXNSZXF1aXJlZCxcbiAgICAgICAgICBtZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB9KSxcbiAgICAgIF0pLFxuICAgICksXG4gICAgaW5jbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgZmlsdGVyRGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgeWVhckl0ZW1OdW1iZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgaGFuZGxlT25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB5ZWFyQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIFlFQVJfUkVGUyA9IFsuLi5BcnJheSh0aGlzLnByb3BzLnllYXJJdGVtTnVtYmVyKV0ubWFwKCgpID0+XG4gICAgUmVhY3QuY3JlYXRlUmVmKCksXG4gICk7XG5cbiAgaXNEaXNhYmxlZCA9IChkYXRlKSA9PiB1dGlscy5pc0RheURpc2FibGVkKGRhdGUsIHRoaXMucHJvcHMpO1xuXG4gIGlzRXhjbHVkZWQgPSAoZGF0ZSkgPT4gdXRpbHMuaXNEYXlFeGNsdWRlZChkYXRlLCB0aGlzLnByb3BzKTtcblxuICBzZWxlY3RpbmdEYXRlID0gKCkgPT4gdGhpcy5wcm9wcy5zZWxlY3RpbmdEYXRlID8/IHRoaXMucHJvcHMucHJlU2VsZWN0aW9uO1xuXG4gIHVwZGF0ZUZvY3VzT25QYWdpbmF0ZSA9IChyZWZJbmRleCkgPT4ge1xuICAgIGNvbnN0IHdhaXRGb3JSZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuWUVBUl9SRUZTW3JlZkluZGV4XS5jdXJyZW50LmZvY3VzKCk7XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh3YWl0Rm9yUmVSZW5kZXIpO1xuICB9O1xuXG4gIGhhbmRsZVllYXJDbGljayA9IChkYXksIGV2ZW50KSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMub25EYXlDbGljaykge1xuICAgICAgdGhpcy5wcm9wcy5vbkRheUNsaWNrKGRheSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVZZWFyTmF2aWdhdGlvbiA9IChuZXdZZWFyLCBuZXdEYXRlKSA9PiB7XG4gICAgY29uc3QgeyBkYXRlLCB5ZWFySXRlbU51bWJlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHN0YXJ0UGVyaW9kIH0gPSB1dGlscy5nZXRZZWFyc1BlcmlvZChkYXRlLCB5ZWFySXRlbU51bWJlcik7XG5cbiAgICBpZiAodGhpcy5pc0Rpc2FibGVkKG5ld0RhdGUpIHx8IHRoaXMuaXNFeGNsdWRlZChuZXdEYXRlKSkgcmV0dXJuO1xuICAgIHRoaXMucHJvcHMuc2V0UHJlU2VsZWN0aW9uKG5ld0RhdGUpO1xuXG4gICAgaWYgKG5ld1llYXIgLSBzdGFydFBlcmlvZCA8IDApIHtcbiAgICAgIHRoaXMudXBkYXRlRm9jdXNPblBhZ2luYXRlKHllYXJJdGVtTnVtYmVyIC0gKHN0YXJ0UGVyaW9kIC0gbmV3WWVhcikpO1xuICAgIH0gZWxzZSBpZiAobmV3WWVhciAtIHN0YXJ0UGVyaW9kID49IHllYXJJdGVtTnVtYmVyKSB7XG4gICAgICB0aGlzLnVwZGF0ZUZvY3VzT25QYWdpbmF0ZShcbiAgICAgICAgTWF0aC5hYnMoeWVhckl0ZW1OdW1iZXIgLSAobmV3WWVhciAtIHN0YXJ0UGVyaW9kKSksXG4gICAgICApO1xuICAgIH0gZWxzZSB0aGlzLllFQVJfUkVGU1tuZXdZZWFyIC0gc3RhcnRQZXJpb2RdLmN1cnJlbnQuZm9jdXMoKTtcbiAgfTtcblxuICBpc1NhbWVEYXkgPSAoeSwgb3RoZXIpID0+IHV0aWxzLmlzU2FtZURheSh5LCBvdGhlcik7XG5cbiAgaXNDdXJyZW50WWVhciA9ICh5KSA9PiB5ID09PSBnZXRZZWFyKG5ld0RhdGUoKSk7XG5cbiAgaXNSYW5nZVN0YXJ0ID0gKHkpID0+XG4gICAgdGhpcy5wcm9wcy5zdGFydERhdGUgJiZcbiAgICB0aGlzLnByb3BzLmVuZERhdGUgJiZcbiAgICB1dGlscy5pc1NhbWVZZWFyKHV0aWxzLnNldFllYXIobmV3RGF0ZSgpLCB5KSwgdGhpcy5wcm9wcy5zdGFydERhdGUpO1xuXG4gIGlzUmFuZ2VFbmQgPSAoeSkgPT5cbiAgICB0aGlzLnByb3BzLnN0YXJ0RGF0ZSAmJlxuICAgIHRoaXMucHJvcHMuZW5kRGF0ZSAmJlxuICAgIHV0aWxzLmlzU2FtZVllYXIodXRpbHMuc2V0WWVhcihuZXdEYXRlKCksIHkpLCB0aGlzLnByb3BzLmVuZERhdGUpO1xuXG4gIGlzSW5SYW5nZSA9ICh5KSA9PlxuICAgIHV0aWxzLmlzWWVhckluUmFuZ2UoeSwgdGhpcy5wcm9wcy5zdGFydERhdGUsIHRoaXMucHJvcHMuZW5kRGF0ZSk7XG5cbiAgaXNJblNlbGVjdGluZ1JhbmdlID0gKHkpID0+IHtcbiAgICBjb25zdCB7IHNlbGVjdHNTdGFydCwgc2VsZWN0c0VuZCwgc2VsZWN0c1JhbmdlLCBzdGFydERhdGUsIGVuZERhdGUgfSA9XG4gICAgICB0aGlzLnByb3BzO1xuXG4gICAgaWYgKFxuICAgICAgIShzZWxlY3RzU3RhcnQgfHwgc2VsZWN0c0VuZCB8fCBzZWxlY3RzUmFuZ2UpIHx8XG4gICAgICAhdGhpcy5zZWxlY3RpbmdEYXRlKClcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdHNTdGFydCAmJiBlbmREYXRlKSB7XG4gICAgICByZXR1cm4gdXRpbHMuaXNZZWFySW5SYW5nZSh5LCB0aGlzLnNlbGVjdGluZ0RhdGUoKSwgZW5kRGF0ZSk7XG4gICAgfVxuICAgIGlmIChzZWxlY3RzRW5kICYmIHN0YXJ0RGF0ZSkge1xuICAgICAgcmV0dXJuIHV0aWxzLmlzWWVhckluUmFuZ2UoeSwgc3RhcnREYXRlLCB0aGlzLnNlbGVjdGluZ0RhdGUoKSk7XG4gICAgfVxuICAgIGlmIChzZWxlY3RzUmFuZ2UgJiYgc3RhcnREYXRlICYmICFlbmREYXRlKSB7XG4gICAgICByZXR1cm4gdXRpbHMuaXNZZWFySW5SYW5nZSh5LCBzdGFydERhdGUsIHRoaXMuc2VsZWN0aW5nRGF0ZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGlzU2VsZWN0aW5nUmFuZ2VTdGFydCA9ICh5KSA9PiB7XG4gICAgaWYgKCF0aGlzLmlzSW5TZWxlY3RpbmdSYW5nZSh5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHsgc3RhcnREYXRlLCBzZWxlY3RzU3RhcnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgX3llYXIgPSB1dGlscy5zZXRZZWFyKG5ld0RhdGUoKSwgeSk7XG5cbiAgICBpZiAoc2VsZWN0c1N0YXJ0KSB7XG4gICAgICByZXR1cm4gdXRpbHMuaXNTYW1lWWVhcihfeWVhciwgdGhpcy5zZWxlY3RpbmdEYXRlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdXRpbHMuaXNTYW1lWWVhcihfeWVhciwgc3RhcnREYXRlKTtcbiAgfTtcblxuICBpc1NlbGVjdGluZ1JhbmdlRW5kID0gKHkpID0+IHtcbiAgICBpZiAoIXRoaXMuaXNJblNlbGVjdGluZ1JhbmdlKHkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgeyBlbmREYXRlLCBzZWxlY3RzRW5kLCBzZWxlY3RzUmFuZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgX3llYXIgPSB1dGlscy5zZXRZZWFyKG5ld0RhdGUoKSwgeSk7XG5cbiAgICBpZiAoc2VsZWN0c0VuZCB8fCBzZWxlY3RzUmFuZ2UpIHtcbiAgICAgIHJldHVybiB1dGlscy5pc1NhbWVZZWFyKF95ZWFyLCB0aGlzLnNlbGVjdGluZ0RhdGUoKSk7XG4gICAgfVxuICAgIHJldHVybiB1dGlscy5pc1NhbWVZZWFyKF95ZWFyLCBlbmREYXRlKTtcbiAgfTtcblxuICBpc0tleWJvYXJkU2VsZWN0ZWQgPSAoeSkgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSB1dGlscy5nZXRTdGFydE9mWWVhcih1dGlscy5zZXRZZWFyKHRoaXMucHJvcHMuZGF0ZSwgeSkpO1xuICAgIHJldHVybiAoXG4gICAgICAhdGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiAmJlxuICAgICAgIXRoaXMucHJvcHMuaW5saW5lICYmXG4gICAgICAhdXRpbHMuaXNTYW1lRGF5KGRhdGUsIHV0aWxzLmdldFN0YXJ0T2ZZZWFyKHRoaXMucHJvcHMuc2VsZWN0ZWQpKSAmJlxuICAgICAgdXRpbHMuaXNTYW1lRGF5KGRhdGUsIHV0aWxzLmdldFN0YXJ0T2ZZZWFyKHRoaXMucHJvcHMucHJlU2VsZWN0aW9uKSlcbiAgICApO1xuICB9O1xuXG4gIG9uWWVhckNsaWNrID0gKGUsIHkpID0+IHtcbiAgICBjb25zdCB7IGRhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgdGhpcy5oYW5kbGVZZWFyQ2xpY2sodXRpbHMuZ2V0U3RhcnRPZlllYXIodXRpbHMuc2V0WWVhcihkYXRlLCB5KSksIGUpO1xuICB9O1xuXG4gIG9uWWVhcktleURvd24gPSAoZSwgeSkgPT4ge1xuICAgIGNvbnN0IHsga2V5IH0gPSBlO1xuICAgIGNvbnN0IHsgZGF0ZSwgeWVhckl0ZW1OdW1iZXIsIGhhbmRsZU9uS2V5RG93biB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChrZXkgIT09IFwiVGFiXCIpIHtcbiAgICAgIC8vIHByZXZlbnREZWZhdWx0IG9uIHRhYiBldmVudCBibG9ja3MgZm9jdXMgY2hhbmdlXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlIFwiRW50ZXJcIjpcbiAgICAgICAgICB0aGlzLm9uWWVhckNsaWNrKGUsIHkpO1xuICAgICAgICAgIHRoaXMucHJvcHMuc2V0UHJlU2VsZWN0aW9uKHRoaXMucHJvcHMuc2VsZWN0ZWQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICAgIHRoaXMuaGFuZGxlWWVhck5hdmlnYXRpb24oXG4gICAgICAgICAgICB5ICsgMSxcbiAgICAgICAgICAgIHV0aWxzLmFkZFllYXJzKHRoaXMucHJvcHMucHJlU2VsZWN0aW9uLCAxKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgdGhpcy5oYW5kbGVZZWFyTmF2aWdhdGlvbihcbiAgICAgICAgICAgIHkgLSAxLFxuICAgICAgICAgICAgdXRpbHMuc3ViWWVhcnModGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24sIDEpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6IHtcbiAgICAgICAgICBjb25zdCB7IHN0YXJ0UGVyaW9kIH0gPSB1dGlscy5nZXRZZWFyc1BlcmlvZChkYXRlLCB5ZWFySXRlbU51bWJlcik7XG4gICAgICAgICAgbGV0IG9mZnNldCA9IFZFUlRJQ0FMX05BVklHQVRJT05fT0ZGU0VUO1xuICAgICAgICAgIGxldCBuZXdZZWFyID0geSAtIG9mZnNldDtcblxuICAgICAgICAgIGlmIChuZXdZZWFyIDwgc3RhcnRQZXJpb2QpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZnRPdmVyT2Zmc2V0ID0geWVhckl0ZW1OdW1iZXIgJSBvZmZzZXQ7XG5cbiAgICAgICAgICAgIGlmICh5ID49IHN0YXJ0UGVyaW9kICYmIHkgPCBzdGFydFBlcmlvZCArIGxlZnRPdmVyT2Zmc2V0KSB7XG4gICAgICAgICAgICAgIG9mZnNldCA9IGxlZnRPdmVyT2Zmc2V0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb2Zmc2V0ICs9IGxlZnRPdmVyT2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdZZWFyID0geSAtIG9mZnNldDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmhhbmRsZVllYXJOYXZpZ2F0aW9uKFxuICAgICAgICAgICAgbmV3WWVhcixcbiAgICAgICAgICAgIHV0aWxzLnN1YlllYXJzKHRoaXMucHJvcHMucHJlU2VsZWN0aW9uLCBvZmZzZXQpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkFycm93RG93blwiOiB7XG4gICAgICAgICAgY29uc3QgeyBlbmRQZXJpb2QgfSA9IHV0aWxzLmdldFllYXJzUGVyaW9kKGRhdGUsIHllYXJJdGVtTnVtYmVyKTtcbiAgICAgICAgICBsZXQgb2Zmc2V0ID0gVkVSVElDQUxfTkFWSUdBVElPTl9PRkZTRVQ7XG4gICAgICAgICAgbGV0IG5ld1llYXIgPSB5ICsgb2Zmc2V0O1xuXG4gICAgICAgICAgaWYgKG5ld1llYXIgPiBlbmRQZXJpb2QpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZnRPdmVyT2Zmc2V0ID0geWVhckl0ZW1OdW1iZXIgJSBvZmZzZXQ7XG5cbiAgICAgICAgICAgIGlmICh5IDw9IGVuZFBlcmlvZCAmJiB5ID4gZW5kUGVyaW9kIC0gbGVmdE92ZXJPZmZzZXQpIHtcbiAgICAgICAgICAgICAgb2Zmc2V0ID0gbGVmdE92ZXJPZmZzZXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvZmZzZXQgKz0gbGVmdE92ZXJPZmZzZXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld1llYXIgPSB5ICsgb2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuaGFuZGxlWWVhck5hdmlnYXRpb24oXG4gICAgICAgICAgICBuZXdZZWFyLFxuICAgICAgICAgICAgdXRpbHMuYWRkWWVhcnModGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24sIG9mZnNldCksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZU9uS2V5RG93biAmJiBoYW5kbGVPbktleURvd24oZSk7XG4gIH07XG5cbiAgZ2V0WWVhckNsYXNzTmFtZXMgPSAoeSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGUsXG4gICAgICBtaW5EYXRlLFxuICAgICAgbWF4RGF0ZSxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgZXhjbHVkZURhdGVzLFxuICAgICAgaW5jbHVkZURhdGVzLFxuICAgICAgZmlsdGVyRGF0ZSxcbiAgICAgIHllYXJDbGFzc05hbWUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2xzeChcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0XCIsXG4gICAgICBgcmVhY3QtZGF0ZXBpY2tlcl9feWVhci0ke3l9YCxcbiAgICAgIHllYXJDbGFzc05hbWUgPyB5ZWFyQ2xhc3NOYW1lKHV0aWxzLnNldFllYXIoZGF0ZSwgeSkpIDogdW5kZWZpbmVkLFxuICAgICAge1xuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tc2VsZWN0ZWRcIjogeSA9PT0gZ2V0WWVhcihzZWxlY3RlZCksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1kaXNhYmxlZFwiOlxuICAgICAgICAgIChtaW5EYXRlIHx8IG1heERhdGUgfHwgZXhjbHVkZURhdGVzIHx8IGluY2x1ZGVEYXRlcyB8fCBmaWx0ZXJEYXRlKSAmJlxuICAgICAgICAgIHV0aWxzLmlzWWVhckRpc2FibGVkKHksIHRoaXMucHJvcHMpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0ta2V5Ym9hcmQtc2VsZWN0ZWRcIjpcbiAgICAgICAgICB0aGlzLmlzS2V5Ym9hcmRTZWxlY3RlZCh5KSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLXJhbmdlLXN0YXJ0XCI6IHRoaXMuaXNSYW5nZVN0YXJ0KHkpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tcmFuZ2UtZW5kXCI6IHRoaXMuaXNSYW5nZUVuZCh5KSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWluLXJhbmdlXCI6IHRoaXMuaXNJblJhbmdlKHkpLFxuICAgICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0taW4tc2VsZWN0aW5nLXJhbmdlXCI6XG4gICAgICAgICAgdGhpcy5pc0luU2VsZWN0aW5nUmFuZ2UoeSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS1zZWxlY3RpbmctcmFuZ2Utc3RhcnRcIjpcbiAgICAgICAgICB0aGlzLmlzU2VsZWN0aW5nUmFuZ2VTdGFydCh5KSxcbiAgICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLXNlbGVjdGluZy1yYW5nZS1lbmRcIjpcbiAgICAgICAgICB0aGlzLmlzU2VsZWN0aW5nUmFuZ2VFbmQoeSksXG4gICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci10ZXh0LS10b2RheVwiOiB0aGlzLmlzQ3VycmVudFllYXIoeSksXG4gICAgICB9LFxuICAgICk7XG4gIH07XG5cbiAgZ2V0WWVhclRhYkluZGV4ID0gKHkpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbikgcmV0dXJuIFwiLTFcIjtcbiAgICBjb25zdCBwcmVTZWxlY3RlZCA9IHV0aWxzLmdldFllYXIodGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24pO1xuXG4gICAgcmV0dXJuIHkgPT09IHByZVNlbGVjdGVkID8gXCIwXCIgOiBcIi0xXCI7XG4gIH07XG5cbiAgZ2V0WWVhckNvbnRhaW5lckNsYXNzTmFtZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBzZWxlY3RpbmdEYXRlLCBzZWxlY3RzU3RhcnQsIHNlbGVjdHNFbmQsIHNlbGVjdHNSYW5nZSB9ID1cbiAgICAgIHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGNsc3goXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyXCIsIHtcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci0tc2VsZWN0aW5nLXJhbmdlXCI6XG4gICAgICAgIHNlbGVjdGluZ0RhdGUgJiYgKHNlbGVjdHNTdGFydCB8fCBzZWxlY3RzRW5kIHx8IHNlbGVjdHNSYW5nZSksXG4gICAgfSk7XG4gIH07XG5cbiAgZ2V0WWVhckNvbnRlbnQgPSAoeSkgPT4ge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnJlbmRlclllYXJDb250ZW50ID8gdGhpcy5wcm9wcy5yZW5kZXJZZWFyQ29udGVudCh5KSA6IHk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHllYXJzTGlzdCA9IFtdO1xuICAgIGNvbnN0IHsgZGF0ZSwgeWVhckl0ZW1OdW1iZXIsIG9uWWVhck1vdXNlRW50ZXIsIG9uWWVhck1vdXNlTGVhdmUgfSA9XG4gICAgICB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgc3RhcnRQZXJpb2QsIGVuZFBlcmlvZCB9ID0gdXRpbHMuZ2V0WWVhcnNQZXJpb2QoXG4gICAgICBkYXRlLFxuICAgICAgeWVhckl0ZW1OdW1iZXIsXG4gICAgKTtcblxuICAgIGZvciAobGV0IHkgPSBzdGFydFBlcmlvZDsgeSA8PSBlbmRQZXJpb2Q7IHkrKykge1xuICAgICAgeWVhcnNMaXN0LnB1c2goXG4gICAgICAgIDxkaXZcbiAgICAgICAgICByZWY9e3RoaXMuWUVBUl9SRUZTW3kgLSBzdGFydFBlcmlvZF19XG4gICAgICAgICAgb25DbGljaz17KGV2KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uWWVhckNsaWNrKGV2LCB5KTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uS2V5RG93bj17KGV2KSA9PiB7XG4gICAgICAgICAgICBpZiAodXRpbHMuaXNTcGFjZUtleURvd24oZXYpKSB7XG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGV2LmtleSA9IFwiRW50ZXJcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5vblllYXJLZXlEb3duKGV2LCB5KTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIHRhYkluZGV4PXt0aGlzLmdldFllYXJUYWJJbmRleCh5KX1cbiAgICAgICAgICBjbGFzc05hbWU9e3RoaXMuZ2V0WWVhckNsYXNzTmFtZXMoeSl9XG4gICAgICAgICAgb25Nb3VzZUVudGVyPXtcbiAgICAgICAgICAgICF0aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudFxuICAgICAgICAgICAgICA/IChldikgPT4gb25ZZWFyTW91c2VFbnRlcihldiwgeSlcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgICAgb25Qb2ludGVyRW50ZXI9e1xuICAgICAgICAgICAgdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnRcbiAgICAgICAgICAgICAgPyAoZXYpID0+IG9uWWVhck1vdXNlRW50ZXIoZXYsIHkpXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uTW91c2VMZWF2ZT17XG4gICAgICAgICAgICAhdGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnRcbiAgICAgICAgICAgICAgPyAoZXYpID0+IG9uWWVhck1vdXNlTGVhdmUoZXYsIHkpXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uUG9pbnRlckxlYXZlPXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMudXNlUG9pbnRlckV2ZW50XG4gICAgICAgICAgICAgID8gKGV2KSA9PiBvblllYXJNb3VzZUxlYXZlKGV2LCB5KVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgICBrZXk9e3l9XG4gICAgICAgICAgYXJpYS1jdXJyZW50PXt0aGlzLmlzQ3VycmVudFllYXIoeSkgPyBcImRhdGVcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLmdldFllYXJDb250ZW50KHkpfVxuICAgICAgICA8L2Rpdj4sXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5nZXRZZWFyQ29udGFpbmVyQ2xhc3NOYW1lcygpfT5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX3llYXItd3JhcHBlclwiXG4gICAgICAgICAgb25Nb3VzZUxlYXZlPXtcbiAgICAgICAgICAgICF0aGlzLnByb3BzLnVzZVBvaW50ZXJFdmVudFxuICAgICAgICAgICAgICA/IHRoaXMucHJvcHMuY2xlYXJTZWxlY3RpbmdEYXRlXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uUG9pbnRlckxlYXZlPXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMudXNlUG9pbnRlckV2ZW50XG4gICAgICAgICAgICAgID8gdGhpcy5wcm9wcy5jbGVhclNlbGVjdGluZ0RhdGVcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICB7eWVhcnNMaXN0fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgaW5wdXRUaW1lIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgdGltZVN0cmluZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aW1lSW5wdXRMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjdXN0b21UaW1lSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRpbWU6IHRoaXMucHJvcHMudGltZVN0cmluZyxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICBpZiAocHJvcHMudGltZVN0cmluZyAhPT0gc3RhdGUudGltZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGltZTogcHJvcHMudGltZVN0cmluZyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIG51bGwgdG8gaW5kaWNhdGUgbm8gY2hhbmdlIHRvIHN0YXRlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgb25UaW1lQ2hhbmdlID0gKHRpbWUpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdGltZSB9KTtcblxuICAgIGNvbnN0IHsgZGF0ZTogcHJvcERhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaXNQcm9wRGF0ZVZhbGlkID0gcHJvcERhdGUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTihwcm9wRGF0ZSk7XG4gICAgY29uc3QgZGF0ZSA9IGlzUHJvcERhdGVWYWxpZCA/IHByb3BEYXRlIDogbmV3IERhdGUoKTtcblxuICAgIGRhdGUuc2V0SG91cnModGltZS5zcGxpdChcIjpcIilbMF0pO1xuICAgIGRhdGUuc2V0TWludXRlcyh0aW1lLnNwbGl0KFwiOlwiKVsxXSk7XG5cbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGRhdGUpO1xuICB9O1xuXG4gIHJlbmRlclRpbWVJbnB1dCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHRpbWUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBkYXRlLCB0aW1lU3RyaW5nLCBjdXN0b21UaW1lSW5wdXQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoY3VzdG9tVGltZUlucHV0KSB7XG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1c3RvbVRpbWVJbnB1dCwge1xuICAgICAgICBkYXRlLFxuICAgICAgICB2YWx1ZTogdGltZSxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25UaW1lQ2hhbmdlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxpbnB1dFxuICAgICAgICB0eXBlPVwidGltZVwiXG4gICAgICAgIGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXRcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIlRpbWVcIlxuICAgICAgICBuYW1lPVwidGltZS1pbnB1dFwiXG4gICAgICAgIHJlcXVpcmVkXG4gICAgICAgIHZhbHVlPXt0aW1lfVxuICAgICAgICBvbkNoYW5nZT17KGV2KSA9PiB7XG4gICAgICAgICAgdGhpcy5vblRpbWVDaGFuZ2UoZXYudGFyZ2V0LnZhbHVlIHx8IHRpbWVTdHJpbmcpO1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19pbnB1dC10aW1lLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXItdGltZV9fY2FwdGlvblwiPlxuICAgICAgICAgIHt0aGlzLnByb3BzLnRpbWVJbnB1dExhYmVsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyLXRpbWVfX2lucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlci10aW1lX19pbnB1dFwiPlxuICAgICAgICAgICAge3RoaXMucmVuZGVyVGltZUlucHV0KCl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDYWxlbmRhckNvbnRhaW5lcih7XG4gIHNob3dUaW1lU2VsZWN0T25seSA9IGZhbHNlLFxuICBzaG93VGltZSA9IGZhbHNlLFxuICBjbGFzc05hbWUsXG4gIGNoaWxkcmVuLFxufSkge1xuICBsZXQgYXJpYUxhYmVsID0gc2hvd1RpbWVTZWxlY3RPbmx5XG4gICAgPyBcIkNob29zZSBUaW1lXCJcbiAgICA6IGBDaG9vc2UgRGF0ZSR7c2hvd1RpbWUgPyBcIiBhbmQgVGltZVwiIDogXCJcIn1gO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICByb2xlPVwiZGlhbG9nXCJcbiAgICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbH1cbiAgICAgIGFyaWEtbW9kYWw9XCJ0cnVlXCJcbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkNhbGVuZGFyQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgc2hvd1RpbWVTZWxlY3RPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1RpbWU6IFByb3BUeXBlcy5ib29sLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbn07XG4iLCJpbXBvcnQgWWVhckRyb3Bkb3duIGZyb20gXCIuL3llYXJfZHJvcGRvd25cIjtcbmltcG9ydCBNb250aERyb3Bkb3duIGZyb20gXCIuL21vbnRoX2Ryb3Bkb3duXCI7XG5pbXBvcnQgTW9udGhZZWFyRHJvcGRvd24gZnJvbSBcIi4vbW9udGhfeWVhcl9kcm9wZG93blwiO1xuaW1wb3J0IE1vbnRoIGZyb20gXCIuL21vbnRoXCI7XG5pbXBvcnQgVGltZSBmcm9tIFwiLi90aW1lXCI7XG5pbXBvcnQgWWVhciBmcm9tIFwiLi95ZWFyXCI7XG5pbXBvcnQgSW5wdXRUaW1lIGZyb20gXCIuL2lucHV0VGltZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY2xzeCB9IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQgQ2FsZW5kYXJDb250YWluZXIgZnJvbSBcIi4vY2FsZW5kYXJfY29udGFpbmVyXCI7XG5pbXBvcnQge1xuICBuZXdEYXRlLFxuICBzZXRNb250aCxcbiAgZ2V0TW9udGgsXG4gIGFkZE1vbnRocyxcbiAgc3ViTW9udGhzLFxuICBnZXRTdGFydE9mV2VlayxcbiAgZ2V0U3RhcnRPZlRvZGF5LFxuICBhZGREYXlzLFxuICBmb3JtYXREYXRlLFxuICBzZXRZZWFyLFxuICBnZXRZZWFyLFxuICBpc0JlZm9yZSxcbiAgYWRkWWVhcnMsXG4gIHN1YlllYXJzLFxuICBpc0FmdGVyLFxuICBnZXRGb3JtYXR0ZWRXZWVrZGF5SW5Mb2NhbGUsXG4gIGdldFdlZWtkYXlTaG9ydEluTG9jYWxlLFxuICBnZXRXZWVrZGF5TWluSW5Mb2NhbGUsXG4gIGlzU2FtZURheSxcbiAgaXNTYW1lTW9udGgsXG4gIG1vbnRoRGlzYWJsZWRCZWZvcmUsXG4gIG1vbnRoRGlzYWJsZWRBZnRlcixcbiAgeWVhckRpc2FibGVkQmVmb3JlLFxuICB5ZWFyRGlzYWJsZWRBZnRlcixcbiAgeWVhcnNEaXNhYmxlZEFmdGVyLFxuICB5ZWFyc0Rpc2FibGVkQmVmb3JlLFxuICBxdWFydGVyRGlzYWJsZWRCZWZvcmUsXG4gIHF1YXJ0ZXJEaXNhYmxlZEFmdGVyLFxuICBnZXRFZmZlY3RpdmVNaW5EYXRlLFxuICBnZXRFZmZlY3RpdmVNYXhEYXRlLFxuICBhZGRaZXJvLFxuICBpc1ZhbGlkLFxuICBnZXRZZWFyc1BlcmlvZCxcbiAgREVGQVVMVF9ZRUFSX0lURU1fTlVNQkVSLFxuICBnZXRNb250aEluTG9jYWxlLFxufSBmcm9tIFwiLi9kYXRlX3V0aWxzXCI7XG5cbmNvbnN0IERST1BET1dOX0ZPQ1VTX0NMQVNTTkFNRVMgPSBbXG4gIFwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1zZWxlY3RcIixcbiAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1zZWxlY3RcIixcbiAgXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLXNlbGVjdFwiLFxuXTtcblxuY29uc3QgaXNEcm9wZG93blNlbGVjdCA9IChlbGVtZW50ID0ge30pID0+IHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IChlbGVtZW50LmNsYXNzTmFtZSB8fCBcIlwiKS5zcGxpdCgvXFxzKy8pO1xuICByZXR1cm4gRFJPUERPV05fRk9DVVNfQ0xBU1NOQU1FUy5zb21lKFxuICAgICh0ZXN0Q2xhc3NuYW1lKSA9PiBjbGFzc05hbWVzLmluZGV4T2YodGVzdENsYXNzbmFtZSkgPj0gMCxcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbGVuZGFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIGdldCBkZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRHJvcGRvd25Gb2N1czogKCkgPT4ge30sXG4gICAgICBtb250aHNTaG93bjogMSxcbiAgICAgIGZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbjogZmFsc2UsXG4gICAgICB0aW1lQ2FwdGlvbjogXCJUaW1lXCIsXG4gICAgICBwcmV2aW91c1llYXJCdXR0b25MYWJlbDogXCJQcmV2aW91cyBZZWFyXCIsXG4gICAgICBuZXh0WWVhckJ1dHRvbkxhYmVsOiBcIk5leHQgWWVhclwiLFxuICAgICAgcHJldmlvdXNNb250aEJ1dHRvbkxhYmVsOiBcIlByZXZpb3VzIE1vbnRoXCIsXG4gICAgICBuZXh0TW9udGhCdXR0b25MYWJlbDogXCJOZXh0IE1vbnRoXCIsXG4gICAgICBjdXN0b21UaW1lSW5wdXQ6IG51bGwsXG4gICAgICB5ZWFySXRlbU51bWJlcjogREVGQVVMVF9ZRUFSX0lURU1fTlVNQkVSLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFkanVzdERhdGVPbkNoYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgY29udGFpbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBkYXRlRm9ybWF0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXldKVxuICAgICAgLmlzUmVxdWlyZWQsXG4gICAgZGF5Q2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB3ZWVrRGF5Q2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtb250aENsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGltZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgeWVhckNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAgIGNhbGVuZGFyU3RhcnREYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZHJvcGRvd25Nb2RlOiBQcm9wVHlwZXMub25lT2YoW1wic2Nyb2xsXCIsIFwic2VsZWN0XCJdKSxcbiAgICBlbmREYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBleGNsdWRlRGF0ZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIGRhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLmlzUmVxdWlyZWQsXG4gICAgICAgICAgbWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgfSksXG4gICAgICBdKSxcbiAgICApLFxuICAgIGV4Y2x1ZGVEYXRlSW50ZXJ2YWxzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIHN0YXJ0OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICAgICAgZW5kOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICAgIH0pLFxuICAgICksXG4gICAgZmlsdGVyRGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZml4ZWRIZWlnaHQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGZvcm1hdFdlZWtOdW1iZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhpZ2hsaWdodERhdGVzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihNYXApLFxuICAgIGhvbGlkYXlzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihNYXApLFxuICAgIGluY2x1ZGVEYXRlczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluY2x1ZGVEYXRlSW50ZXJ2YWxzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIHN0YXJ0OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICAgICAgZW5kOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICAgIH0pLFxuICAgICksXG4gICAgaW5jbHVkZVRpbWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5qZWN0VGltZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3VsZEZvY3VzRGF5SW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhbGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7IGxvY2FsZTogUHJvcFR5cGVzLm9iamVjdCB9KSxcbiAgICBdKSxcbiAgICBtYXhEYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBtaW5EYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBtb250aHNTaG93bjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtb250aFNlbGVjdGVkSW46IFByb3BUeXBlcy5udW1iZXIsXG4gICAgbmV4dE1vbnRoQXJpYUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5leHRZZWFyQXJpYUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2xpY2tPdXRzaWRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uTW9udGhDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uWWVhckNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbkRyb3Bkb3duRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uV2Vla1NlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2hvd1RpbWVTZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dUaW1lSW5wdXQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dNb250aFllYXJQaWNrZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dGdWxsTW9udGhZZWFyUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1llYXJQaWNrZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dRdWFydGVyWWVhclBpY2tlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1dlZWtQaWNrZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dUaW1lU2VsZWN0T25seTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGltZUZvcm1hdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aW1lSW50ZXJ2YWxzOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uVGltZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGltZUlucHV0TGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbWluVGltZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgbWF4VGltZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgZXhjbHVkZVRpbWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgZmlsdGVyVGltZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGltZUNhcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb3BlblRvRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgcGVla05leHRNb250aDogUHJvcFR5cGVzLmJvb2wsXG4gICAgcHJldmlvdXNNb250aEFyaWFMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwcmV2aW91c1llYXJBcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2Nyb2xsYWJsZVllYXJEcm9wZG93bjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwcmVTZWxlY3Rpb246IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIHNlbGVjdGVkOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBzZWxlY3RzRW5kOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RzU3RhcnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdHNSYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdHNNdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0ZWREYXRlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSkpLFxuICAgIHNob3dNb250aERyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93UHJldmlvdXNNb250aHM6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dNb250aFllYXJEcm9wZG93bjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1dlZWtOdW1iZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93WWVhckRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdGFydERhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIHRvZGF5QnV0dG9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHVzZVdlZWtkYXlzU2hvcnQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGZvcm1hdFdlZWtEYXk6IFByb3BUeXBlcy5mdW5jLFxuICAgIHdpdGhQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuICAgIHdlZWtMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB5ZWFySXRlbU51bWJlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICB5ZWFyRHJvcGRvd25JdGVtTnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHNldE9wZW46IFByb3BUeXBlcy5mdW5jLFxuICAgIHNob3VsZENsb3NlT25TZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHVzZVNob3J0TW9udGhJbkRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAgIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLm5vZGUsXG4gICAgXSksXG4gICAgbmV4dE1vbnRoQnV0dG9uTGFiZWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgIF0pLFxuICAgIHByZXZpb3VzWWVhckJ1dHRvbkxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5leHRZZWFyQnV0dG9uTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcmVuZGVyQ3VzdG9tSGVhZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZW5kZXJEYXlDb250ZW50czogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVuZGVyTW9udGhDb250ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZW5kZXJRdWFydGVyQ29udGVudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVuZGVyWWVhckNvbnRlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHVzZVBvaW50ZXJFdmVudDogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25EYXlNb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vbnRoTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25ZZWFyTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25ZZWFyTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2hvd1BvcHBlckFycm93OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYW5kbGVPbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZU9uRGF5S2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaXNJbnB1dEZvY3VzZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGN1c3RvbVRpbWVJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgd2Vla0FyaWFMYWJlbFByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtb250aEFyaWFMYWJlbFByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzZXRQcmVTZWxlY3Rpb246IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5jb250YWluZXJSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkYXRlOiB0aGlzLmdldERhdGVJblZpZXcoKSxcbiAgICAgIHNlbGVjdGluZ0RhdGU6IG51bGwsXG4gICAgICBtb250aENvbnRhaW5lcjogbnVsbCxcbiAgICAgIGlzUmVuZGVyQXJpYUxpdmVNZXNzYWdlOiBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gbW9udGhDb250YWluZXIgaGVpZ2h0IGlzIG5lZWRlZCBpbiB0aW1lIGNvbXBvbmVudFxuICAgIC8vIHRvIGRldGVybWluZSB0aGUgaGVpZ2h0IGZvciB0aGUgdWwgaW4gdGhlIHRpbWUgY29tcG9uZW50XG4gICAgLy8gc2V0U3RhdGUgaGVyZSBzbyBoZWlnaHQgaXMgZ2l2ZW4gYWZ0ZXIgZmluYWwgY29tcG9uZW50XG4gICAgLy8gbGF5b3V0IGlzIHJlbmRlcmVkXG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3QpIHtcbiAgICAgIHRoaXMuYXNzaWduTW9udGhDb250YWluZXIgPSAoKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbW9udGhDb250YWluZXI6IHRoaXMubW9udGhDb250YWluZXIgfSk7XG4gICAgICB9KSgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLnByb3BzLnByZVNlbGVjdGlvbiAmJlxuICAgICAgKCFpc1NhbWVEYXkodGhpcy5wcm9wcy5wcmVTZWxlY3Rpb24sIHByZXZQcm9wcy5wcmVTZWxlY3Rpb24pIHx8XG4gICAgICAgIHRoaXMucHJvcHMubW9udGhTZWxlY3RlZEluICE9PSBwcmV2UHJvcHMubW9udGhTZWxlY3RlZEluKVxuICAgICkge1xuICAgICAgY29uc3QgaGFzTW9udGhDaGFuZ2VkID0gIWlzU2FtZU1vbnRoKFxuICAgICAgICB0aGlzLnN0YXRlLmRhdGUsXG4gICAgICAgIHRoaXMucHJvcHMucHJlU2VsZWN0aW9uLFxuICAgICAgKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRlOiB0aGlzLnByb3BzLnByZVNlbGVjdGlvbixcbiAgICAgICAgfSxcbiAgICAgICAgKCkgPT4gaGFzTW9udGhDaGFuZ2VkICYmIHRoaXMuaGFuZGxlQ3VzdG9tTW9udGhDaGFuZ2UodGhpcy5zdGF0ZS5kYXRlKSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRoaXMucHJvcHMub3BlblRvRGF0ZSAmJlxuICAgICAgIWlzU2FtZURheSh0aGlzLnByb3BzLm9wZW5Ub0RhdGUsIHByZXZQcm9wcy5vcGVuVG9EYXRlKVxuICAgICkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRhdGU6IHRoaXMucHJvcHMub3BlblRvRGF0ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUNsaWNrT3V0c2lkZSA9IChldmVudCkgPT4ge1xuICAgIHRoaXMucHJvcHMub25DbGlja091dHNpZGUoZXZlbnQpO1xuICB9O1xuXG4gIHNldENsaWNrT3V0c2lkZVJlZiA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXJSZWYuY3VycmVudDtcbiAgfTtcblxuICBoYW5kbGVEcm9wZG93bkZvY3VzID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKGlzRHJvcGRvd25TZWxlY3QoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgdGhpcy5wcm9wcy5vbkRyb3Bkb3duRm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgZ2V0RGF0ZUluVmlldyA9ICgpID0+IHtcbiAgICBjb25zdCB7IHByZVNlbGVjdGlvbiwgc2VsZWN0ZWQsIG9wZW5Ub0RhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgbWluRGF0ZSA9IGdldEVmZmVjdGl2ZU1pbkRhdGUodGhpcy5wcm9wcyk7XG4gICAgY29uc3QgbWF4RGF0ZSA9IGdldEVmZmVjdGl2ZU1heERhdGUodGhpcy5wcm9wcyk7XG4gICAgY29uc3QgY3VycmVudCA9IG5ld0RhdGUoKTtcbiAgICBjb25zdCBpbml0aWFsRGF0ZSA9IG9wZW5Ub0RhdGUgfHwgc2VsZWN0ZWQgfHwgcHJlU2VsZWN0aW9uO1xuICAgIGlmIChpbml0aWFsRGF0ZSkge1xuICAgICAgcmV0dXJuIGluaXRpYWxEYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWluRGF0ZSAmJiBpc0JlZm9yZShjdXJyZW50LCBtaW5EYXRlKSkge1xuICAgICAgICByZXR1cm4gbWluRGF0ZTtcbiAgICAgIH0gZWxzZSBpZiAobWF4RGF0ZSAmJiBpc0FmdGVyKGN1cnJlbnQsIG1heERhdGUpKSB7XG4gICAgICAgIHJldHVybiBtYXhEYXRlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3VycmVudDtcbiAgfTtcblxuICBpbmNyZWFzZU1vbnRoID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAoeyBkYXRlIH0pID0+ICh7XG4gICAgICAgIGRhdGU6IGFkZE1vbnRocyhkYXRlLCAxKSxcbiAgICAgIH0pLFxuICAgICAgKCkgPT4gdGhpcy5oYW5kbGVNb250aENoYW5nZSh0aGlzLnN0YXRlLmRhdGUpLFxuICAgICk7XG4gIH07XG5cbiAgZGVjcmVhc2VNb250aCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgKHsgZGF0ZSB9KSA9PiAoe1xuICAgICAgICBkYXRlOiBzdWJNb250aHMoZGF0ZSwgMSksXG4gICAgICB9KSxcbiAgICAgICgpID0+IHRoaXMuaGFuZGxlTW9udGhDaGFuZ2UodGhpcy5zdGF0ZS5kYXRlKSxcbiAgICApO1xuICB9O1xuXG4gIGhhbmRsZURheUNsaWNrID0gKGRheSwgZXZlbnQsIG1vbnRoU2VsZWN0ZWRJbikgPT4ge1xuICAgIHRoaXMucHJvcHMub25TZWxlY3QoZGF5LCBldmVudCwgbW9udGhTZWxlY3RlZEluKTtcbiAgICB0aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbiAmJiB0aGlzLnByb3BzLnNldFByZVNlbGVjdGlvbihkYXkpO1xuICB9O1xuXG4gIGhhbmRsZURheU1vdXNlRW50ZXIgPSAoZGF5KSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGluZ0RhdGU6IGRheSB9KTtcbiAgICB0aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlciAmJiB0aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlcihkYXkpO1xuICB9O1xuXG4gIGhhbmRsZU1vbnRoTW91c2VMZWF2ZSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0aW5nRGF0ZTogbnVsbCB9KTtcbiAgICB0aGlzLnByb3BzLm9uTW9udGhNb3VzZUxlYXZlICYmIHRoaXMucHJvcHMub25Nb250aE1vdXNlTGVhdmUoKTtcbiAgfTtcblxuICBoYW5kbGVZZWFyTW91c2VFbnRlciA9IChldmVudCwgeWVhcikgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RpbmdEYXRlOiBzZXRZZWFyKG5ld0RhdGUoKSwgeWVhcikgfSk7XG4gICAgISF0aGlzLnByb3BzLm9uWWVhck1vdXNlRW50ZXIgJiYgdGhpcy5wcm9wcy5vblllYXJNb3VzZUVudGVyKGV2ZW50LCB5ZWFyKTtcbiAgfTtcblxuICBoYW5kbGVZZWFyTW91c2VMZWF2ZSA9IChldmVudCwgeWVhcikgPT4ge1xuICAgICEhdGhpcy5wcm9wcy5vblllYXJNb3VzZUxlYXZlICYmIHRoaXMucHJvcHMub25ZZWFyTW91c2VMZWF2ZShldmVudCwgeWVhcik7XG4gIH07XG5cbiAgaGFuZGxlWWVhckNoYW5nZSA9IChkYXRlKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMub25ZZWFyQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uWWVhckNoYW5nZShkYXRlKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1JlbmRlckFyaWFMaXZlTWVzc2FnZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuYWRqdXN0RGF0ZU9uQ2hhbmdlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdCkge1xuICAgICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KGRhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJvcHMuc2V0T3Blbikge1xuICAgICAgICB0aGlzLnByb3BzLnNldE9wZW4odHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24gJiYgdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24oZGF0ZSk7XG4gIH07XG5cbiAgaGFuZGxlTW9udGhDaGFuZ2UgPSAoZGF0ZSkgPT4ge1xuICAgIHRoaXMuaGFuZGxlQ3VzdG9tTW9udGhDaGFuZ2UoZGF0ZSk7XG4gICAgaWYgKHRoaXMucHJvcHMuYWRqdXN0RGF0ZU9uQ2hhbmdlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdCkge1xuICAgICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KGRhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJvcHMuc2V0T3Blbikge1xuICAgICAgICB0aGlzLnByb3BzLnNldE9wZW4odHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24gJiYgdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24oZGF0ZSk7XG4gIH07XG5cbiAgaGFuZGxlQ3VzdG9tTW9udGhDaGFuZ2UgPSAoZGF0ZSkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW9udGhDaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb250aENoYW5nZShkYXRlKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1JlbmRlckFyaWFMaXZlTWVzc2FnZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlTW9udGhZZWFyQ2hhbmdlID0gKGRhdGUpID0+IHtcbiAgICB0aGlzLmhhbmRsZVllYXJDaGFuZ2UoZGF0ZSk7XG4gICAgdGhpcy5oYW5kbGVNb250aENoYW5nZShkYXRlKTtcbiAgfTtcblxuICBjaGFuZ2VZZWFyID0gKHllYXIpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgKHsgZGF0ZSB9KSA9PiAoe1xuICAgICAgICBkYXRlOiBzZXRZZWFyKGRhdGUsIHllYXIpLFxuICAgICAgfSksXG4gICAgICAoKSA9PiB0aGlzLmhhbmRsZVllYXJDaGFuZ2UodGhpcy5zdGF0ZS5kYXRlKSxcbiAgICApO1xuICB9O1xuXG4gIGNoYW5nZU1vbnRoID0gKG1vbnRoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICh7IGRhdGUgfSkgPT4gKHtcbiAgICAgICAgZGF0ZTogc2V0TW9udGgoZGF0ZSwgbW9udGgpLFxuICAgICAgfSksXG4gICAgICAoKSA9PiB0aGlzLmhhbmRsZU1vbnRoQ2hhbmdlKHRoaXMuc3RhdGUuZGF0ZSksXG4gICAgKTtcbiAgfTtcblxuICBjaGFuZ2VNb250aFllYXIgPSAobW9udGhZZWFyKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICh7IGRhdGUgfSkgPT4gKHtcbiAgICAgICAgZGF0ZTogc2V0WWVhcihzZXRNb250aChkYXRlLCBnZXRNb250aChtb250aFllYXIpKSwgZ2V0WWVhcihtb250aFllYXIpKSxcbiAgICAgIH0pLFxuICAgICAgKCkgPT4gdGhpcy5oYW5kbGVNb250aFllYXJDaGFuZ2UodGhpcy5zdGF0ZS5kYXRlKSxcbiAgICApO1xuICB9O1xuXG4gIGhlYWRlciA9IChkYXRlID0gdGhpcy5zdGF0ZS5kYXRlKSA9PiB7XG4gICAgY29uc3Qgc3RhcnRPZldlZWsgPSBnZXRTdGFydE9mV2VlayhcbiAgICAgIGRhdGUsXG4gICAgICB0aGlzLnByb3BzLmxvY2FsZSxcbiAgICAgIHRoaXMucHJvcHMuY2FsZW5kYXJTdGFydERheSxcbiAgICApO1xuXG4gICAgY29uc3QgZGF5TmFtZXMgPSBbXTtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93V2Vla051bWJlcnMpIHtcbiAgICAgIGRheU5hbWVzLnB1c2goXG4gICAgICAgIDxkaXYga2V5PVwiV1wiIGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX2RheS1uYW1lXCI+XG4gICAgICAgICAge3RoaXMucHJvcHMud2Vla0xhYmVsIHx8IFwiI1wifVxuICAgICAgICA8L2Rpdj4sXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGF5TmFtZXMuY29uY2F0KFxuICAgICAgWzAsIDEsIDIsIDMsIDQsIDUsIDZdLm1hcCgob2Zmc2V0KSA9PiB7XG4gICAgICAgIGNvbnN0IGRheSA9IGFkZERheXMoc3RhcnRPZldlZWssIG9mZnNldCk7XG4gICAgICAgIGNvbnN0IHdlZWtEYXlOYW1lID0gdGhpcy5mb3JtYXRXZWVrZGF5KGRheSwgdGhpcy5wcm9wcy5sb2NhbGUpO1xuXG4gICAgICAgIGNvbnN0IHdlZWtEYXlDbGFzc05hbWUgPSB0aGlzLnByb3BzLndlZWtEYXlDbGFzc05hbWVcbiAgICAgICAgICA/IHRoaXMucHJvcHMud2Vla0RheUNsYXNzTmFtZShkYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBrZXk9e29mZnNldH1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2Zvcm1hdERhdGUoZGF5LCBcIkVFRUVcIiwgdGhpcy5wcm9wcy5sb2NhbGUpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWVcIiwgd2Vla0RheUNsYXNzTmFtZSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3dlZWtEYXlOYW1lfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgKTtcbiAgfTtcblxuICBmb3JtYXRXZWVrZGF5ID0gKGRheSwgbG9jYWxlKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybWF0V2Vla0RheSkge1xuICAgICAgcmV0dXJuIGdldEZvcm1hdHRlZFdlZWtkYXlJbkxvY2FsZShkYXksIHRoaXMucHJvcHMuZm9ybWF0V2Vla0RheSwgbG9jYWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvcHMudXNlV2Vla2RheXNTaG9ydFxuICAgICAgPyBnZXRXZWVrZGF5U2hvcnRJbkxvY2FsZShkYXksIGxvY2FsZSlcbiAgICAgIDogZ2V0V2Vla2RheU1pbkluTG9jYWxlKGRheSwgbG9jYWxlKTtcbiAgfTtcblxuICBkZWNyZWFzZVllYXIgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICh7IGRhdGUgfSkgPT4gKHtcbiAgICAgICAgZGF0ZTogc3ViWWVhcnMoXG4gICAgICAgICAgZGF0ZSxcbiAgICAgICAgICB0aGlzLnByb3BzLnNob3dZZWFyUGlja2VyID8gdGhpcy5wcm9wcy55ZWFySXRlbU51bWJlciA6IDEsXG4gICAgICAgICksXG4gICAgICB9KSxcbiAgICAgICgpID0+IHRoaXMuaGFuZGxlWWVhckNoYW5nZSh0aGlzLnN0YXRlLmRhdGUpLFxuICAgICk7XG4gIH07XG5cbiAgY2xlYXJTZWxlY3RpbmdEYXRlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RpbmdEYXRlOiBudWxsIH0pO1xuICB9O1xuXG4gIHJlbmRlclByZXZpb3VzQnV0dG9uID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLnJlbmRlckN1c3RvbUhlYWRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBhbGxQcmV2RGF5c0Rpc2FibGVkO1xuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSB0aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXI6XG4gICAgICAgIGFsbFByZXZEYXlzRGlzYWJsZWQgPSB5ZWFyRGlzYWJsZWRCZWZvcmUodGhpcy5zdGF0ZS5kYXRlLCB0aGlzLnByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI6XG4gICAgICAgIGFsbFByZXZEYXlzRGlzYWJsZWQgPSB5ZWFyc0Rpc2FibGVkQmVmb3JlKHRoaXMuc3RhdGUuZGF0ZSwgdGhpcy5wcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlcjpcbiAgICAgICAgYWxsUHJldkRheXNEaXNhYmxlZCA9IHF1YXJ0ZXJEaXNhYmxlZEJlZm9yZShcbiAgICAgICAgICB0aGlzLnN0YXRlLmRhdGUsXG4gICAgICAgICAgdGhpcy5wcm9wcyxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhbGxQcmV2RGF5c0Rpc2FibGVkID0gbW9udGhEaXNhYmxlZEJlZm9yZSh0aGlzLnN0YXRlLmRhdGUsIHRoaXMucHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoIXRoaXMucHJvcHMuZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uICYmXG4gICAgICAgICF0aGlzLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbiAmJlxuICAgICAgICBhbGxQcmV2RGF5c0Rpc2FibGVkKSB8fFxuICAgICAgdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpY29uQ2xhc3NlcyA9IFtcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi1pY29uXCIsXG4gICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvbi0tcHJldmlvdXNcIixcbiAgICBdO1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IFtcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvblwiLFxuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91c1wiLFxuICAgIF07XG5cbiAgICBsZXQgY2xpY2tIYW5kbGVyID0gdGhpcy5kZWNyZWFzZU1vbnRoO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyIHx8XG4gICAgICB0aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlciB8fFxuICAgICAgdGhpcy5wcm9wcy5zaG93WWVhclBpY2tlclxuICAgICkge1xuICAgICAgY2xpY2tIYW5kbGVyID0gdGhpcy5kZWNyZWFzZVllYXI7XG4gICAgfVxuXG4gICAgaWYgKGFsbFByZXZEYXlzRGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5zaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb24pIHtcbiAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXByZXZpb3VzLS1kaXNhYmxlZFwiKTtcbiAgICAgIGNsaWNrSGFuZGxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JZZWFyID1cbiAgICAgIHRoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlciB8fFxuICAgICAgdGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXIgfHxcbiAgICAgIHRoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI7XG5cbiAgICBjb25zdCB7IHByZXZpb3VzTW9udGhCdXR0b25MYWJlbCwgcHJldmlvdXNZZWFyQnV0dG9uTGFiZWwgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7XG4gICAgICBwcmV2aW91c01vbnRoQXJpYUxhYmVsID0gdHlwZW9mIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbCA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IHByZXZpb3VzTW9udGhCdXR0b25MYWJlbFxuICAgICAgICA6IFwiUHJldmlvdXMgTW9udGhcIixcbiAgICAgIHByZXZpb3VzWWVhckFyaWFMYWJlbCA9IHR5cGVvZiBwcmV2aW91c1llYXJCdXR0b25MYWJlbCA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IHByZXZpb3VzWWVhckJ1dHRvbkxhYmVsXG4gICAgICAgIDogXCJQcmV2aW91cyBZZWFyXCIsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oXCIgXCIpfVxuICAgICAgICBvbkNsaWNrPXtjbGlja0hhbmRsZXJ9XG4gICAgICAgIG9uS2V5RG93bj17dGhpcy5wcm9wcy5oYW5kbGVPbktleURvd259XG4gICAgICAgIGFyaWEtbGFiZWw9e2lzRm9yWWVhciA/IHByZXZpb3VzWWVhckFyaWFMYWJlbCA6IHByZXZpb3VzTW9udGhBcmlhTGFiZWx9XG4gICAgICA+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17aWNvbkNsYXNzZXMuam9pbihcIiBcIil9PlxuICAgICAgICAgIHtpc0ZvclllYXJcbiAgICAgICAgICAgID8gdGhpcy5wcm9wcy5wcmV2aW91c1llYXJCdXR0b25MYWJlbFxuICAgICAgICAgICAgOiB0aGlzLnByb3BzLnByZXZpb3VzTW9udGhCdXR0b25MYWJlbH1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9idXR0b24+XG4gICAgKTtcbiAgfTtcblxuICBpbmNyZWFzZVllYXIgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICh7IGRhdGUgfSkgPT4gKHtcbiAgICAgICAgZGF0ZTogYWRkWWVhcnMoXG4gICAgICAgICAgZGF0ZSxcbiAgICAgICAgICB0aGlzLnByb3BzLnNob3dZZWFyUGlja2VyID8gdGhpcy5wcm9wcy55ZWFySXRlbU51bWJlciA6IDEsXG4gICAgICAgICksXG4gICAgICB9KSxcbiAgICAgICgpID0+IHRoaXMuaGFuZGxlWWVhckNoYW5nZSh0aGlzLnN0YXRlLmRhdGUpLFxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyTmV4dEJ1dHRvbiA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5yZW5kZXJDdXN0b21IZWFkZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgYWxsTmV4dERheXNEaXNhYmxlZDtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyOlxuICAgICAgICBhbGxOZXh0RGF5c0Rpc2FibGVkID0geWVhckRpc2FibGVkQWZ0ZXIodGhpcy5zdGF0ZS5kYXRlLCB0aGlzLnByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI6XG4gICAgICAgIGFsbE5leHREYXlzRGlzYWJsZWQgPSB5ZWFyc0Rpc2FibGVkQWZ0ZXIodGhpcy5zdGF0ZS5kYXRlLCB0aGlzLnByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRoaXMucHJvcHMuc2hvd1F1YXJ0ZXJZZWFyUGlja2VyOlxuICAgICAgICBhbGxOZXh0RGF5c0Rpc2FibGVkID0gcXVhcnRlckRpc2FibGVkQWZ0ZXIodGhpcy5zdGF0ZS5kYXRlLCB0aGlzLnByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhbGxOZXh0RGF5c0Rpc2FibGVkID0gbW9udGhEaXNhYmxlZEFmdGVyKHRoaXMuc3RhdGUuZGF0ZSwgdGhpcy5wcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICghdGhpcy5wcm9wcy5mb3JjZVNob3dNb250aE5hdmlnYXRpb24gJiZcbiAgICAgICAgIXRoaXMucHJvcHMuc2hvd0Rpc2FibGVkTW9udGhOYXZpZ2F0aW9uICYmXG4gICAgICAgIGFsbE5leHREYXlzRGlzYWJsZWQpIHx8XG4gICAgICB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNsYXNzZXMgPSBbXG4gICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb25cIixcbiAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dFwiLFxuICAgIF07XG4gICAgY29uc3QgaWNvbkNsYXNzZXMgPSBbXG4gICAgICBcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24taWNvblwiLFxuICAgICAgXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLWljb24tLW5leHRcIixcbiAgICBdO1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0KSB7XG4gICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1uZXh0LS13aXRoLXRpbWVcIik7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnRvZGF5QnV0dG9uKSB7XG4gICAgICBjbGFzc2VzLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1uZXh0LS13aXRoLXRvZGF5LWJ1dHRvblwiKTtcbiAgICB9XG5cbiAgICBsZXQgY2xpY2tIYW5kbGVyID0gdGhpcy5pbmNyZWFzZU1vbnRoO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyIHx8XG4gICAgICB0aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlciB8fFxuICAgICAgdGhpcy5wcm9wcy5zaG93WWVhclBpY2tlclxuICAgICkge1xuICAgICAgY2xpY2tIYW5kbGVyID0gdGhpcy5pbmNyZWFzZVllYXI7XG4gICAgfVxuXG4gICAgaWYgKGFsbE5leHREYXlzRGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5zaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb24pIHtcbiAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLWRpc2FibGVkXCIpO1xuICAgICAgY2xpY2tIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBpc0ZvclllYXIgPVxuICAgICAgdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyIHx8XG4gICAgICB0aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlciB8fFxuICAgICAgdGhpcy5wcm9wcy5zaG93WWVhclBpY2tlcjtcblxuICAgIGNvbnN0IHsgbmV4dE1vbnRoQnV0dG9uTGFiZWwsIG5leHRZZWFyQnV0dG9uTGFiZWwgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgbmV4dE1vbnRoQXJpYUxhYmVsID0gdHlwZW9mIG5leHRNb250aEJ1dHRvbkxhYmVsID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gbmV4dE1vbnRoQnV0dG9uTGFiZWxcbiAgICAgICAgOiBcIk5leHQgTW9udGhcIixcbiAgICAgIG5leHRZZWFyQXJpYUxhYmVsID0gdHlwZW9mIG5leHRZZWFyQnV0dG9uTGFiZWwgPT09IFwic3RyaW5nXCJcbiAgICAgICAgPyBuZXh0WWVhckJ1dHRvbkxhYmVsXG4gICAgICAgIDogXCJOZXh0IFllYXJcIixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8YnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbihcIiBcIil9XG4gICAgICAgIG9uQ2xpY2s9e2NsaWNrSGFuZGxlcn1cbiAgICAgICAgb25LZXlEb3duPXt0aGlzLnByb3BzLmhhbmRsZU9uS2V5RG93bn1cbiAgICAgICAgYXJpYS1sYWJlbD17aXNGb3JZZWFyID8gbmV4dFllYXJBcmlhTGFiZWwgOiBuZXh0TW9udGhBcmlhTGFiZWx9XG4gICAgICA+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17aWNvbkNsYXNzZXMuam9pbihcIiBcIil9PlxuICAgICAgICAgIHtpc0ZvclllYXJcbiAgICAgICAgICAgID8gdGhpcy5wcm9wcy5uZXh0WWVhckJ1dHRvbkxhYmVsXG4gICAgICAgICAgICA6IHRoaXMucHJvcHMubmV4dE1vbnRoQnV0dG9uTGFiZWx9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvYnV0dG9uPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyQ3VycmVudE1vbnRoID0gKGRhdGUgPSB0aGlzLnN0YXRlLmRhdGUpID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0gW1wicmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aFwiXTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNob3dZZWFyRHJvcGRvd24pIHtcbiAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX2N1cnJlbnQtbW9udGgtLWhhc1llYXJEcm9wZG93blwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd01vbnRoRHJvcGRvd24pIHtcbiAgICAgIGNsYXNzZXMucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX2N1cnJlbnQtbW9udGgtLWhhc01vbnRoRHJvcGRvd25cIik7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnNob3dNb250aFllYXJEcm9wZG93bikge1xuICAgICAgY2xhc3Nlcy5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aC0taGFzTW9udGhZZWFyRHJvcGRvd25cIik7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKFwiIFwiKX0+XG4gICAgICAgIHtmb3JtYXREYXRlKGRhdGUsIHRoaXMucHJvcHMuZGF0ZUZvcm1hdCwgdGhpcy5wcm9wcy5sb2NhbGUpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJZZWFyRHJvcGRvd24gPSAob3ZlcnJpZGVIaWRlID0gZmFsc2UpID0+IHtcbiAgICBpZiAoIXRoaXMucHJvcHMuc2hvd1llYXJEcm9wZG93biB8fCBvdmVycmlkZUhpZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxZZWFyRHJvcGRvd25cbiAgICAgICAgYWRqdXN0RGF0ZU9uQ2hhbmdlPXt0aGlzLnByb3BzLmFkanVzdERhdGVPbkNoYW5nZX1cbiAgICAgICAgZGF0ZT17dGhpcy5zdGF0ZS5kYXRlfVxuICAgICAgICBvblNlbGVjdD17dGhpcy5wcm9wcy5vblNlbGVjdH1cbiAgICAgICAgc2V0T3Blbj17dGhpcy5wcm9wcy5zZXRPcGVufVxuICAgICAgICBkcm9wZG93bk1vZGU9e3RoaXMucHJvcHMuZHJvcGRvd25Nb2RlfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5jaGFuZ2VZZWFyfVxuICAgICAgICBtaW5EYXRlPXt0aGlzLnByb3BzLm1pbkRhdGV9XG4gICAgICAgIG1heERhdGU9e3RoaXMucHJvcHMubWF4RGF0ZX1cbiAgICAgICAgeWVhcj17Z2V0WWVhcih0aGlzLnN0YXRlLmRhdGUpfVxuICAgICAgICBzY3JvbGxhYmxlWWVhckRyb3Bkb3duPXt0aGlzLnByb3BzLnNjcm9sbGFibGVZZWFyRHJvcGRvd259XG4gICAgICAgIHllYXJEcm9wZG93bkl0ZW1OdW1iZXI9e3RoaXMucHJvcHMueWVhckRyb3Bkb3duSXRlbU51bWJlcn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJNb250aERyb3Bkb3duID0gKG92ZXJyaWRlSGlkZSA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnNob3dNb250aERyb3Bkb3duIHx8IG92ZXJyaWRlSGlkZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPE1vbnRoRHJvcGRvd25cbiAgICAgICAgZHJvcGRvd25Nb2RlPXt0aGlzLnByb3BzLmRyb3Bkb3duTW9kZX1cbiAgICAgICAgbG9jYWxlPXt0aGlzLnByb3BzLmxvY2FsZX1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlTW9udGh9XG4gICAgICAgIG1vbnRoPXtnZXRNb250aCh0aGlzLnN0YXRlLmRhdGUpfVxuICAgICAgICB1c2VTaG9ydE1vbnRoSW5Ecm9wZG93bj17dGhpcy5wcm9wcy51c2VTaG9ydE1vbnRoSW5Ecm9wZG93bn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJNb250aFllYXJEcm9wZG93biA9IChvdmVycmlkZUhpZGUgPSBmYWxzZSkgPT4ge1xuICAgIGlmICghdGhpcy5wcm9wcy5zaG93TW9udGhZZWFyRHJvcGRvd24gfHwgb3ZlcnJpZGVIaWRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8TW9udGhZZWFyRHJvcGRvd25cbiAgICAgICAgZHJvcGRvd25Nb2RlPXt0aGlzLnByb3BzLmRyb3Bkb3duTW9kZX1cbiAgICAgICAgbG9jYWxlPXt0aGlzLnByb3BzLmxvY2FsZX1cbiAgICAgICAgZGF0ZUZvcm1hdD17dGhpcy5wcm9wcy5kYXRlRm9ybWF0fVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5jaGFuZ2VNb250aFllYXJ9XG4gICAgICAgIG1pbkRhdGU9e3RoaXMucHJvcHMubWluRGF0ZX1cbiAgICAgICAgbWF4RGF0ZT17dGhpcy5wcm9wcy5tYXhEYXRlfVxuICAgICAgICBkYXRlPXt0aGlzLnN0YXRlLmRhdGV9XG4gICAgICAgIHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bj17dGhpcy5wcm9wcy5zY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd259XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgaGFuZGxlVG9kYXlCdXR0b25DbGljayA9IChlKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vblNlbGVjdChnZXRTdGFydE9mVG9kYXkoKSwgZSk7XG4gICAgdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24gJiYgdGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb24oZ2V0U3RhcnRPZlRvZGF5KCkpO1xuICB9O1xuXG4gIHJlbmRlclRvZGF5QnV0dG9uID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5wcm9wcy50b2RheUJ1dHRvbiB8fCB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX190b2RheS1idXR0b25cIlxuICAgICAgICBvbkNsaWNrPXsoZSkgPT4gdGhpcy5oYW5kbGVUb2RheUJ1dHRvbkNsaWNrKGUpfVxuICAgICAgPlxuICAgICAgICB7dGhpcy5wcm9wcy50b2RheUJ1dHRvbn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVmYXVsdEhlYWRlciA9ICh7IG1vbnRoRGF0ZSwgaSB9KSA9PiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtgcmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyICR7XG4gICAgICAgIHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RcbiAgICAgICAgICA/IFwicmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyLS1oYXMtdGltZS1zZWxlY3RcIlxuICAgICAgICAgIDogXCJcIlxuICAgICAgfWB9XG4gICAgPlxuICAgICAge3RoaXMucmVuZGVyQ3VycmVudE1vbnRoKG1vbnRoRGF0ZSl9XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17YHJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlcl9fZHJvcGRvd24gcmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyX19kcm9wZG93bi0tJHt0aGlzLnByb3BzLmRyb3Bkb3duTW9kZX1gfVxuICAgICAgICBvbkZvY3VzPXt0aGlzLmhhbmRsZURyb3Bkb3duRm9jdXN9XG4gICAgICA+XG4gICAgICAgIHt0aGlzLnJlbmRlck1vbnRoRHJvcGRvd24oaSAhPT0gMCl9XG4gICAgICAgIHt0aGlzLnJlbmRlck1vbnRoWWVhckRyb3Bkb3duKGkgIT09IDApfVxuICAgICAgICB7dGhpcy5yZW5kZXJZZWFyRHJvcGRvd24oaSAhPT0gMCl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWVzXCI+XG4gICAgICAgIHt0aGlzLmhlYWRlcihtb250aERhdGUpfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgcmVuZGVyQ3VzdG9tSGVhZGVyID0gKGhlYWRlckFyZ3MgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgbW9udGhEYXRlLCBpIH0gPSBoZWFkZXJBcmdzO1xuXG4gICAgaWYgKFxuICAgICAgKHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3QgJiYgIXRoaXMuc3RhdGUubW9udGhDb250YWluZXIpIHx8XG4gICAgICB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seVxuICAgICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcHJldk1vbnRoQnV0dG9uRGlzYWJsZWQgPSBtb250aERpc2FibGVkQmVmb3JlKFxuICAgICAgdGhpcy5zdGF0ZS5kYXRlLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICApO1xuXG4gICAgY29uc3QgbmV4dE1vbnRoQnV0dG9uRGlzYWJsZWQgPSBtb250aERpc2FibGVkQWZ0ZXIoXG4gICAgICB0aGlzLnN0YXRlLmRhdGUsXG4gICAgICB0aGlzLnByb3BzLFxuICAgICk7XG5cbiAgICBjb25zdCBwcmV2WWVhckJ1dHRvbkRpc2FibGVkID0geWVhckRpc2FibGVkQmVmb3JlKFxuICAgICAgdGhpcy5zdGF0ZS5kYXRlLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICApO1xuXG4gICAgY29uc3QgbmV4dFllYXJCdXR0b25EaXNhYmxlZCA9IHllYXJEaXNhYmxlZEFmdGVyKFxuICAgICAgdGhpcy5zdGF0ZS5kYXRlLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICApO1xuXG4gICAgY29uc3Qgc2hvd0RheU5hbWVzID1cbiAgICAgICF0aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXIgJiZcbiAgICAgICF0aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlciAmJlxuICAgICAgIXRoaXMucHJvcHMuc2hvd1llYXJQaWNrZXI7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19oZWFkZXIgcmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyLS1jdXN0b21cIlxuICAgICAgICBvbkZvY3VzPXt0aGlzLnByb3BzLm9uRHJvcGRvd25Gb2N1c31cbiAgICAgID5cbiAgICAgICAge3RoaXMucHJvcHMucmVuZGVyQ3VzdG9tSGVhZGVyKHtcbiAgICAgICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgICAgIGN1c3RvbUhlYWRlckNvdW50OiBpLFxuICAgICAgICAgIG1vbnRoRGF0ZSxcbiAgICAgICAgICBjaGFuZ2VNb250aDogdGhpcy5jaGFuZ2VNb250aCxcbiAgICAgICAgICBjaGFuZ2VZZWFyOiB0aGlzLmNoYW5nZVllYXIsXG4gICAgICAgICAgZGVjcmVhc2VNb250aDogdGhpcy5kZWNyZWFzZU1vbnRoLFxuICAgICAgICAgIGluY3JlYXNlTW9udGg6IHRoaXMuaW5jcmVhc2VNb250aCxcbiAgICAgICAgICBkZWNyZWFzZVllYXI6IHRoaXMuZGVjcmVhc2VZZWFyLFxuICAgICAgICAgIGluY3JlYXNlWWVhcjogdGhpcy5pbmNyZWFzZVllYXIsXG4gICAgICAgICAgcHJldk1vbnRoQnV0dG9uRGlzYWJsZWQsXG4gICAgICAgICAgbmV4dE1vbnRoQnV0dG9uRGlzYWJsZWQsXG4gICAgICAgICAgcHJldlllYXJCdXR0b25EaXNhYmxlZCxcbiAgICAgICAgICBuZXh0WWVhckJ1dHRvbkRpc2FibGVkLFxuICAgICAgICB9KX1cbiAgICAgICAge3Nob3dEYXlOYW1lcyAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZXNcIj5cbiAgICAgICAgICAgIHt0aGlzLmhlYWRlcihtb250aERhdGUpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJZZWFySGVhZGVyID0gKHsgbW9udGhEYXRlIH0pID0+IHtcbiAgICBjb25zdCB7IHNob3dZZWFyUGlja2VyLCB5ZWFySXRlbU51bWJlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHN0YXJ0UGVyaW9kLCBlbmRQZXJpb2QgfSA9IGdldFllYXJzUGVyaW9kKFxuICAgICAgbW9udGhEYXRlLFxuICAgICAgeWVhckl0ZW1OdW1iZXIsXG4gICAgKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19oZWFkZXIgcmVhY3QtZGF0ZXBpY2tlci15ZWFyLWhlYWRlclwiPlxuICAgICAgICB7c2hvd1llYXJQaWNrZXIgPyBgJHtzdGFydFBlcmlvZH0gLSAke2VuZFBlcmlvZH1gIDogZ2V0WWVhcihtb250aERhdGUpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJIZWFkZXIgPSAoaGVhZGVyQXJncykgPT4ge1xuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSB0aGlzLnByb3BzLnJlbmRlckN1c3RvbUhlYWRlciAhPT0gdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJDdXN0b21IZWFkZXIoaGVhZGVyQXJncyk7XG4gICAgICBjYXNlIHRoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlciB8fFxuICAgICAgICB0aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlciB8fFxuICAgICAgICB0aGlzLnByb3BzLnNob3dZZWFyUGlja2VyOlxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJZZWFySGVhZGVyKGhlYWRlckFyZ3MpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGVmYXVsdEhlYWRlcihoZWFkZXJBcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyTW9udGhzID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSB8fCB0aGlzLnByb3BzLnNob3dZZWFyUGlja2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbW9udGhMaXN0ID0gW107XG4gICAgY29uc3QgbW9udGhzVG9TdWJ0cmFjdCA9IHRoaXMucHJvcHMuc2hvd1ByZXZpb3VzTW9udGhzXG4gICAgICA/IHRoaXMucHJvcHMubW9udGhzU2hvd24gLSAxXG4gICAgICA6IDA7XG4gICAgY29uc3QgZnJvbU1vbnRoRGF0ZSA9XG4gICAgICB0aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXIgfHwgdGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXJcbiAgICAgICAgPyBhZGRZZWFycyh0aGlzLnN0YXRlLmRhdGUsIG1vbnRoc1RvU3VidHJhY3QpXG4gICAgICAgIDogc3ViTW9udGhzKHRoaXMuc3RhdGUuZGF0ZSwgbW9udGhzVG9TdWJ0cmFjdCk7XG4gICAgY29uc3QgbW9udGhTZWxlY3RlZEluID0gdGhpcy5wcm9wcy5tb250aFNlbGVjdGVkSW4gPz8gbW9udGhzVG9TdWJ0cmFjdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcHMubW9udGhzU2hvd247ICsraSkge1xuICAgICAgY29uc3QgbW9udGhzVG9BZGQgPSBpIC0gbW9udGhTZWxlY3RlZEluICsgbW9udGhzVG9TdWJ0cmFjdDtcbiAgICAgIGNvbnN0IG1vbnRoRGF0ZSA9XG4gICAgICAgIHRoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlciB8fCB0aGlzLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlclxuICAgICAgICAgID8gYWRkWWVhcnMoZnJvbU1vbnRoRGF0ZSwgbW9udGhzVG9BZGQpXG4gICAgICAgICAgOiBhZGRNb250aHMoZnJvbU1vbnRoRGF0ZSwgbW9udGhzVG9BZGQpO1xuICAgICAgY29uc3QgbW9udGhLZXkgPSBgbW9udGgtJHtpfWA7XG4gICAgICBjb25zdCBtb250aFNob3dzRHVwbGljYXRlRGF5c0VuZCA9IGkgPCB0aGlzLnByb3BzLm1vbnRoc1Nob3duIC0gMTtcbiAgICAgIGNvbnN0IG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQgPSBpID4gMDtcbiAgICAgIG1vbnRoTGlzdC5wdXNoKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAga2V5PXttb250aEtleX1cbiAgICAgICAgICByZWY9eyhkaXYpID0+IHtcbiAgICAgICAgICAgIHRoaXMubW9udGhDb250YWluZXIgPSBkaXY7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1jb250YWluZXJcIlxuICAgICAgICA+XG4gICAgICAgICAge3RoaXMucmVuZGVySGVhZGVyKHsgbW9udGhEYXRlLCBpIH0pfVxuICAgICAgICAgIDxNb250aFxuICAgICAgICAgICAgY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4PXt0aGlzLnByb3BzLmNob29zZURheUFyaWFMYWJlbFByZWZpeH1cbiAgICAgICAgICAgIGRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4PXt0aGlzLnByb3BzLmRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4fVxuICAgICAgICAgICAgd2Vla0FyaWFMYWJlbFByZWZpeD17dGhpcy5wcm9wcy53ZWVrQXJpYUxhYmVsUHJlZml4fVxuICAgICAgICAgICAgYXJpYUxhYmVsUHJlZml4PXt0aGlzLnByb3BzLm1vbnRoQXJpYUxhYmVsUHJlZml4fVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlTW9udGhZZWFyfVxuICAgICAgICAgICAgZGF5PXttb250aERhdGV9XG4gICAgICAgICAgICBkYXlDbGFzc05hbWU9e3RoaXMucHJvcHMuZGF5Q2xhc3NOYW1lfVxuICAgICAgICAgICAgY2FsZW5kYXJTdGFydERheT17dGhpcy5wcm9wcy5jYWxlbmRhclN0YXJ0RGF5fVxuICAgICAgICAgICAgbW9udGhDbGFzc05hbWU9e3RoaXMucHJvcHMubW9udGhDbGFzc05hbWV9XG4gICAgICAgICAgICBvbkRheUNsaWNrPXt0aGlzLmhhbmRsZURheUNsaWNrfVxuICAgICAgICAgICAgaGFuZGxlT25LZXlEb3duPXt0aGlzLnByb3BzLmhhbmRsZU9uRGF5S2V5RG93bn1cbiAgICAgICAgICAgIGhhbmRsZU9uTW9udGhLZXlEb3duPXt0aGlzLnByb3BzLmhhbmRsZU9uS2V5RG93bn1cbiAgICAgICAgICAgIHVzZVBvaW50ZXJFdmVudD17dGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnR9XG4gICAgICAgICAgICBvbkRheU1vdXNlRW50ZXI9e3RoaXMuaGFuZGxlRGF5TW91c2VFbnRlcn1cbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17dGhpcy5oYW5kbGVNb250aE1vdXNlTGVhdmV9XG4gICAgICAgICAgICBvbldlZWtTZWxlY3Q9e3RoaXMucHJvcHMub25XZWVrU2VsZWN0fVxuICAgICAgICAgICAgb3JkZXJJbkRpc3BsYXk9e2l9XG4gICAgICAgICAgICBmb3JtYXRXZWVrTnVtYmVyPXt0aGlzLnByb3BzLmZvcm1hdFdlZWtOdW1iZXJ9XG4gICAgICAgICAgICBsb2NhbGU9e3RoaXMucHJvcHMubG9jYWxlfVxuICAgICAgICAgICAgbWluRGF0ZT17dGhpcy5wcm9wcy5taW5EYXRlfVxuICAgICAgICAgICAgbWF4RGF0ZT17dGhpcy5wcm9wcy5tYXhEYXRlfVxuICAgICAgICAgICAgZXhjbHVkZURhdGVzPXt0aGlzLnByb3BzLmV4Y2x1ZGVEYXRlc31cbiAgICAgICAgICAgIGV4Y2x1ZGVEYXRlSW50ZXJ2YWxzPXt0aGlzLnByb3BzLmV4Y2x1ZGVEYXRlSW50ZXJ2YWxzfVxuICAgICAgICAgICAgaGlnaGxpZ2h0RGF0ZXM9e3RoaXMucHJvcHMuaGlnaGxpZ2h0RGF0ZXN9XG4gICAgICAgICAgICBob2xpZGF5cz17dGhpcy5wcm9wcy5ob2xpZGF5c31cbiAgICAgICAgICAgIHNlbGVjdGluZ0RhdGU9e3RoaXMuc3RhdGUuc2VsZWN0aW5nRGF0ZX1cbiAgICAgICAgICAgIGluY2x1ZGVEYXRlcz17dGhpcy5wcm9wcy5pbmNsdWRlRGF0ZXN9XG4gICAgICAgICAgICBpbmNsdWRlRGF0ZUludGVydmFscz17dGhpcy5wcm9wcy5pbmNsdWRlRGF0ZUludGVydmFsc31cbiAgICAgICAgICAgIGlubGluZT17dGhpcy5wcm9wcy5pbmxpbmV9XG4gICAgICAgICAgICBzaG91bGRGb2N1c0RheUlubGluZT17dGhpcy5wcm9wcy5zaG91bGRGb2N1c0RheUlubGluZX1cbiAgICAgICAgICAgIGZpeGVkSGVpZ2h0PXt0aGlzLnByb3BzLmZpeGVkSGVpZ2h0fVxuICAgICAgICAgICAgZmlsdGVyRGF0ZT17dGhpcy5wcm9wcy5maWx0ZXJEYXRlfVxuICAgICAgICAgICAgcHJlU2VsZWN0aW9uPXt0aGlzLnByb3BzLnByZVNlbGVjdGlvbn1cbiAgICAgICAgICAgIHNldFByZVNlbGVjdGlvbj17dGhpcy5wcm9wcy5zZXRQcmVTZWxlY3Rpb259XG4gICAgICAgICAgICBzZWxlY3RlZD17dGhpcy5wcm9wcy5zZWxlY3RlZH1cbiAgICAgICAgICAgIHNlbGVjdHNTdGFydD17dGhpcy5wcm9wcy5zZWxlY3RzU3RhcnR9XG4gICAgICAgICAgICBzZWxlY3RzRW5kPXt0aGlzLnByb3BzLnNlbGVjdHNFbmR9XG4gICAgICAgICAgICBzZWxlY3RzUmFuZ2U9e3RoaXMucHJvcHMuc2VsZWN0c1JhbmdlfVxuICAgICAgICAgICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U9e3RoaXMucHJvcHMuc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2V9XG4gICAgICAgICAgICBzZWxlY3RzTXVsdGlwbGU9e3RoaXMucHJvcHMuc2VsZWN0c011bHRpcGxlfVxuICAgICAgICAgICAgc2VsZWN0ZWREYXRlcz17dGhpcy5wcm9wcy5zZWxlY3RlZERhdGVzfVxuICAgICAgICAgICAgc2hvd1dlZWtOdW1iZXJzPXt0aGlzLnByb3BzLnNob3dXZWVrTnVtYmVyc31cbiAgICAgICAgICAgIHN0YXJ0RGF0ZT17dGhpcy5wcm9wcy5zdGFydERhdGV9XG4gICAgICAgICAgICBlbmREYXRlPXt0aGlzLnByb3BzLmVuZERhdGV9XG4gICAgICAgICAgICBwZWVrTmV4dE1vbnRoPXt0aGlzLnByb3BzLnBlZWtOZXh0TW9udGh9XG4gICAgICAgICAgICBzZXRPcGVuPXt0aGlzLnByb3BzLnNldE9wZW59XG4gICAgICAgICAgICBzaG91bGRDbG9zZU9uU2VsZWN0PXt0aGlzLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3R9XG4gICAgICAgICAgICByZW5kZXJEYXlDb250ZW50cz17dGhpcy5wcm9wcy5yZW5kZXJEYXlDb250ZW50c31cbiAgICAgICAgICAgIHJlbmRlck1vbnRoQ29udGVudD17dGhpcy5wcm9wcy5yZW5kZXJNb250aENvbnRlbnR9XG4gICAgICAgICAgICByZW5kZXJRdWFydGVyQ29udGVudD17dGhpcy5wcm9wcy5yZW5kZXJRdWFydGVyQ29udGVudH1cbiAgICAgICAgICAgIHJlbmRlclllYXJDb250ZW50PXt0aGlzLnByb3BzLnJlbmRlclllYXJDb250ZW50fVxuICAgICAgICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb249e3RoaXMucHJvcHMuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb259XG4gICAgICAgICAgICBzaG93TW9udGhZZWFyUGlja2VyPXt0aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXJ9XG4gICAgICAgICAgICBzaG93RnVsbE1vbnRoWWVhclBpY2tlcj17dGhpcy5wcm9wcy5zaG93RnVsbE1vbnRoWWVhclBpY2tlcn1cbiAgICAgICAgICAgIHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXI9e1xuICAgICAgICAgICAgICB0aGlzLnByb3BzLnNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyPXtcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hvd1llYXJQaWNrZXI9e3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXJ9XG4gICAgICAgICAgICBzaG93UXVhcnRlclllYXJQaWNrZXI9e3RoaXMucHJvcHMuc2hvd1F1YXJ0ZXJZZWFyUGlja2VyfVxuICAgICAgICAgICAgc2hvd1dlZWtQaWNrZXI9e3RoaXMucHJvcHMuc2hvd1dlZWtQaWNrZXJ9XG4gICAgICAgICAgICBpc0lucHV0Rm9jdXNlZD17dGhpcy5wcm9wcy5pc0lucHV0Rm9jdXNlZH1cbiAgICAgICAgICAgIGNvbnRhaW5lclJlZj17dGhpcy5jb250YWluZXJSZWZ9XG4gICAgICAgICAgICBtb250aFNob3dzRHVwbGljYXRlRGF5c0VuZD17bW9udGhTaG93c0R1cGxpY2F0ZURheXNFbmR9XG4gICAgICAgICAgICBtb250aFNob3dzRHVwbGljYXRlRGF5c1N0YXJ0PXttb250aFNob3dzRHVwbGljYXRlRGF5c1N0YXJ0fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PixcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBtb250aExpc3Q7XG4gIH07XG5cbiAgcmVuZGVyWWVhcnMgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnNob3dZZWFyUGlja2VyKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX3llYXItLWNvbnRhaW5lclwiPlxuICAgICAgICAgIHt0aGlzLnJlbmRlckhlYWRlcih7IG1vbnRoRGF0ZTogdGhpcy5zdGF0ZS5kYXRlIH0pfVxuICAgICAgICAgIDxZZWFyXG4gICAgICAgICAgICBvbkRheUNsaWNrPXt0aGlzLmhhbmRsZURheUNsaWNrfVxuICAgICAgICAgICAgc2VsZWN0aW5nRGF0ZT17dGhpcy5zdGF0ZS5zZWxlY3RpbmdEYXRlfVxuICAgICAgICAgICAgY2xlYXJTZWxlY3RpbmdEYXRlPXt0aGlzLmNsZWFyU2VsZWN0aW5nRGF0ZX1cbiAgICAgICAgICAgIGRhdGU9e3RoaXMuc3RhdGUuZGF0ZX1cbiAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgb25ZZWFyTW91c2VFbnRlcj17dGhpcy5oYW5kbGVZZWFyTW91c2VFbnRlcn1cbiAgICAgICAgICAgIG9uWWVhck1vdXNlTGVhdmU9e3RoaXMuaGFuZGxlWWVhck1vdXNlTGVhdmV9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXJUaW1lU2VjdGlvbiA9ICgpID0+IHtcbiAgICBpZiAoXG4gICAgICB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0ICYmXG4gICAgICAodGhpcy5zdGF0ZS5tb250aENvbnRhaW5lciB8fCB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSlcbiAgICApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxUaW1lXG4gICAgICAgICAgc2VsZWN0ZWQ9e3RoaXMucHJvcHMuc2VsZWN0ZWR9XG4gICAgICAgICAgb3BlblRvRGF0ZT17dGhpcy5wcm9wcy5vcGVuVG9EYXRlfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnByb3BzLm9uVGltZUNoYW5nZX1cbiAgICAgICAgICB0aW1lQ2xhc3NOYW1lPXt0aGlzLnByb3BzLnRpbWVDbGFzc05hbWV9XG4gICAgICAgICAgZm9ybWF0PXt0aGlzLnByb3BzLnRpbWVGb3JtYXR9XG4gICAgICAgICAgaW5jbHVkZVRpbWVzPXt0aGlzLnByb3BzLmluY2x1ZGVUaW1lc31cbiAgICAgICAgICBpbnRlcnZhbHM9e3RoaXMucHJvcHMudGltZUludGVydmFsc31cbiAgICAgICAgICBtaW5UaW1lPXt0aGlzLnByb3BzLm1pblRpbWV9XG4gICAgICAgICAgbWF4VGltZT17dGhpcy5wcm9wcy5tYXhUaW1lfVxuICAgICAgICAgIGV4Y2x1ZGVUaW1lcz17dGhpcy5wcm9wcy5leGNsdWRlVGltZXN9XG4gICAgICAgICAgZmlsdGVyVGltZT17dGhpcy5wcm9wcy5maWx0ZXJUaW1lfVxuICAgICAgICAgIHRpbWVDYXB0aW9uPXt0aGlzLnByb3BzLnRpbWVDYXB0aW9ufVxuICAgICAgICAgIHRvZGF5QnV0dG9uPXt0aGlzLnByb3BzLnRvZGF5QnV0dG9ufVxuICAgICAgICAgIHNob3dNb250aERyb3Bkb3duPXt0aGlzLnByb3BzLnNob3dNb250aERyb3Bkb3dufVxuICAgICAgICAgIHNob3dNb250aFllYXJEcm9wZG93bj17dGhpcy5wcm9wcy5zaG93TW9udGhZZWFyRHJvcGRvd259XG4gICAgICAgICAgc2hvd1llYXJEcm9wZG93bj17dGhpcy5wcm9wcy5zaG93WWVhckRyb3Bkb3dufVxuICAgICAgICAgIHdpdGhQb3J0YWw9e3RoaXMucHJvcHMud2l0aFBvcnRhbH1cbiAgICAgICAgICBtb250aFJlZj17dGhpcy5zdGF0ZS5tb250aENvbnRhaW5lcn1cbiAgICAgICAgICBpbmplY3RUaW1lcz17dGhpcy5wcm9wcy5pbmplY3RUaW1lc31cbiAgICAgICAgICBsb2NhbGU9e3RoaXMucHJvcHMubG9jYWxlfVxuICAgICAgICAgIGhhbmRsZU9uS2V5RG93bj17dGhpcy5wcm9wcy5oYW5kbGVPbktleURvd259XG4gICAgICAgICAgc2hvd1RpbWVTZWxlY3RPbmx5PXt0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcklucHV0VGltZVNlY3Rpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKHRoaXMucHJvcHMuc2VsZWN0ZWQpO1xuICAgIGNvbnN0IHRpbWVWYWxpZCA9IGlzVmFsaWQodGltZSkgJiYgQm9vbGVhbih0aGlzLnByb3BzLnNlbGVjdGVkKTtcbiAgICBjb25zdCB0aW1lU3RyaW5nID0gdGltZVZhbGlkXG4gICAgICA/IGAke2FkZFplcm8odGltZS5nZXRIb3VycygpKX06JHthZGRaZXJvKHRpbWUuZ2V0TWludXRlcygpKX1gXG4gICAgICA6IFwiXCI7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd1RpbWVJbnB1dCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPElucHV0VGltZVxuICAgICAgICAgIGRhdGU9e3RpbWV9XG4gICAgICAgICAgdGltZVN0cmluZz17dGltZVN0cmluZ31cbiAgICAgICAgICB0aW1lSW5wdXRMYWJlbD17dGhpcy5wcm9wcy50aW1lSW5wdXRMYWJlbH1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vblRpbWVDaGFuZ2V9XG4gICAgICAgICAgY3VzdG9tVGltZUlucHV0PXt0aGlzLnByb3BzLmN1c3RvbVRpbWVJbnB1dH1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlckFyaWFMaXZlUmVnaW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgc3RhcnRQZXJpb2QsIGVuZFBlcmlvZCB9ID0gZ2V0WWVhcnNQZXJpb2QoXG4gICAgICB0aGlzLnN0YXRlLmRhdGUsXG4gICAgICB0aGlzLnByb3BzLnllYXJJdGVtTnVtYmVyLFxuICAgICk7XG4gICAgbGV0IGFyaWFMaXZlTWVzc2FnZTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNob3dZZWFyUGlja2VyKSB7XG4gICAgICBhcmlhTGl2ZU1lc3NhZ2UgPSBgJHtzdGFydFBlcmlvZH0gLSAke2VuZFBlcmlvZH1gO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLnByb3BzLnNob3dNb250aFllYXJQaWNrZXIgfHxcbiAgICAgIHRoaXMucHJvcHMuc2hvd1F1YXJ0ZXJZZWFyUGlja2VyXG4gICAgKSB7XG4gICAgICBhcmlhTGl2ZU1lc3NhZ2UgPSBnZXRZZWFyKHRoaXMuc3RhdGUuZGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyaWFMaXZlTWVzc2FnZSA9IGAke2dldE1vbnRoSW5Mb2NhbGUoXG4gICAgICAgIGdldE1vbnRoKHRoaXMuc3RhdGUuZGF0ZSksXG4gICAgICAgIHRoaXMucHJvcHMubG9jYWxlLFxuICAgICAgKX0gJHtnZXRZZWFyKHRoaXMuc3RhdGUuZGF0ZSl9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW5cbiAgICAgICAgcm9sZT1cImFsZXJ0XCJcbiAgICAgICAgYXJpYS1saXZlPVwicG9saXRlXCJcbiAgICAgICAgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fYXJpYS1saXZlXCJcbiAgICAgID5cbiAgICAgICAge3RoaXMuc3RhdGUuaXNSZW5kZXJBcmlhTGl2ZU1lc3NhZ2UgJiYgYXJpYUxpdmVNZXNzYWdlfVxuICAgICAgPC9zcGFuPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyQ2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fY2hpbGRyZW4tY29udGFpbmVyXCI+XG4gICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IENvbnRhaW5lciA9IHRoaXMucHJvcHMuY29udGFpbmVyIHx8IENhbGVuZGFyQ29udGFpbmVyO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6IFwiY29udGVudHNcIiB9fSByZWY9e3RoaXMuY29udGFpbmVyUmVmfT5cbiAgICAgICAgPENvbnRhaW5lclxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChcInJlYWN0LWRhdGVwaWNrZXJcIiwgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlci0tdGltZS1vbmx5XCI6IHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5LFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIHNob3dUaW1lPXt0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0IHx8IHRoaXMucHJvcHMuc2hvd1RpbWVJbnB1dH1cbiAgICAgICAgICBzaG93VGltZVNlbGVjdE9ubHk9e3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5fVxuICAgICAgICA+XG4gICAgICAgICAge3RoaXMucmVuZGVyQXJpYUxpdmVSZWdpb24oKX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJQcmV2aW91c0J1dHRvbigpfVxuICAgICAgICAgIHt0aGlzLnJlbmRlck5leHRCdXR0b24oKX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJNb250aHMoKX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJZZWFycygpfVxuICAgICAgICAgIHt0aGlzLnJlbmRlclRvZGF5QnV0dG9uKCl9XG4gICAgICAgICAge3RoaXMucmVuZGVyVGltZVNlY3Rpb24oKX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJJbnB1dFRpbWVTZWN0aW9uKCl9XG4gICAgICAgICAge3RoaXMucmVuZGVyQ2hpbGRyZW4oKX1cbiAgICAgICAgPC9Db250YWluZXI+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmNvbnN0IENhbGVuZGFySWNvbiA9ICh7IGljb24sIGNsYXNzTmFtZSA9IFwiXCIsIG9uQ2xpY2sgfSkgPT4ge1xuICBjb25zdCBkZWZhdWx0Q2xhc3MgPSBcInJlYWN0LWRhdGVwaWNrZXJfX2NhbGVuZGFyLWljb25cIjtcblxuICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoaWNvbikpIHtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGljb24sIHtcbiAgICAgIGNsYXNzTmFtZTogYCR7aWNvbi5wcm9wcy5jbGFzc05hbWUgfHwgXCJcIn0gJHtkZWZhdWx0Q2xhc3N9ICR7Y2xhc3NOYW1lfWAsXG4gICAgICBvbkNsaWNrOiAoZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGljb24ucHJvcHMub25DbGljayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgaWNvbi5wcm9wcy5vbkNsaWNrKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvbkNsaWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBvbkNsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpY29uID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxpXG4gICAgICAgIGNsYXNzTmFtZT17YCR7ZGVmYXVsdENsYXNzfSAke2ljb259ICR7Y2xhc3NOYW1lfWB9XG4gICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICAvLyBEZWZhdWx0IFNWRyBJY29uXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgY2xhc3NOYW1lPXtgJHtkZWZhdWx0Q2xhc3N9ICR7Y2xhc3NOYW1lfWB9XG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgNDQ4IDUxMlwiXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgID5cbiAgICAgIDxwYXRoIGQ9XCJNOTYgMzJWNjRINDhDMjEuNSA2NCAwIDg1LjUgMCAxMTJ2NDhINDQ4VjExMmMwLTI2LjUtMjEuNS00OC00OC00OEgzNTJWMzJjMC0xNy43LTE0LjMtMzItMzItMzJzLTMyIDE0LjMtMzIgMzJWNjRIMTYwVjMyYzAtMTcuNy0xNC4zLTMyLTMyLTMyUzk2IDE0LjMgOTYgMzJ6TTQ0OCAxOTJIMFY0NjRjMCAyNi41IDIxLjUgNDggNDggNDhINDAwYzI2LjUgMCA0OC0yMS41IDQ4LTQ4VjE5MnpcIiAvPlxuICAgIDwvc3ZnPlxuICApO1xufTtcblxuQ2FsZW5kYXJJY29uLnByb3BUeXBlcyA9IHtcbiAgaWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENhbGVuZGFySWNvbjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcnRhbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gICAgcG9ydGFsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcG9ydGFsSG9zdDogUHJvcFR5cGVzLmluc3RhbmNlT2YoU2hhZG93Um9vdCksXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnBvcnRhbFJvb3QgPSAodGhpcy5wcm9wcy5wb3J0YWxIb3N0IHx8IGRvY3VtZW50KS5nZXRFbGVtZW50QnlJZChcbiAgICAgIHRoaXMucHJvcHMucG9ydGFsSWQsXG4gICAgKTtcbiAgICBpZiAoIXRoaXMucG9ydGFsUm9vdCkge1xuICAgICAgdGhpcy5wb3J0YWxSb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHRoaXMucG9ydGFsUm9vdC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCB0aGlzLnByb3BzLnBvcnRhbElkKTtcbiAgICAgICh0aGlzLnByb3BzLnBvcnRhbEhvc3QgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQodGhpcy5wb3J0YWxSb290KTtcbiAgICB9XG4gICAgdGhpcy5wb3J0YWxSb290LmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wb3J0YWxSb290LnJlbW92ZUNoaWxkKHRoaXMuZWwpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdERPTS5jcmVhdGVQb3J0YWwodGhpcy5wcm9wcy5jaGlsZHJlbiwgdGhpcy5lbCk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLy8gVGFiTG9vcCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIHRhYmJpbmcgb3V0c2lkZSBvZiB0aGUgcG9wcGVyXG4vLyBJdCBjcmVhdGVzIGEgdGFiaW5kZXggbG9vcCBzbyB0aGF0IFwiVGFiXCIgb24gdGhlIGxhc3QgZWxlbWVudCB3aWxsIGZvY3VzIHRoZSBmaXJzdCBlbGVtZW50XG4vLyBhbmQgXCJTaGlmdCBUYWJcIiBvbiB0aGUgZmlyc3QgZWxlbWVudCB3aWxsIGZvY3VzIHRoZSBsYXN0IGVsZW1lbnRcblxuY29uc3QgZm9jdXNhYmxlRWxlbWVudHNTZWxlY3RvciA9XG4gIFwiW3RhYmluZGV4XSwgYSwgYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYVwiO1xuY29uc3QgZm9jdXNhYmxlRmlsdGVyID0gKG5vZGUpID0+ICFub2RlLmRpc2FibGVkICYmIG5vZGUudGFiSW5kZXggIT09IC0xO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJMb29wIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIGdldCBkZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZVRhYkxvb3A6IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gICAgZW5hYmxlVGFiTG9vcDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnRhYkxvb3BSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgfVxuXG4gIC8vIHF1ZXJ5IGFsbCBmb2N1c2FibGUgZWxlbWVudHNcbiAgLy8gdHJpbSBmaXJzdCBhbmQgbGFzdCBiZWNhdXNlIHRoZXkgYXJlIHRoZSBmb2N1cyBndWFyZHNcbiAgZ2V0VGFiQ2hpbGRyZW4gPSAoKSA9PlxuICAgIEFycmF5LnByb3RvdHlwZS5zbGljZVxuICAgICAgLmNhbGwoXG4gICAgICAgIHRoaXMudGFiTG9vcFJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZm9jdXNhYmxlRWxlbWVudHNTZWxlY3RvciksXG4gICAgICAgIDEsXG4gICAgICAgIC0xLFxuICAgICAgKVxuICAgICAgLmZpbHRlcihmb2N1c2FibGVGaWx0ZXIpO1xuXG4gIGhhbmRsZUZvY3VzU3RhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgdGFiQ2hpbGRyZW4gPSB0aGlzLmdldFRhYkNoaWxkcmVuKCk7XG4gICAgdGFiQ2hpbGRyZW4gJiZcbiAgICAgIHRhYkNoaWxkcmVuLmxlbmd0aCA+IDEgJiZcbiAgICAgIHRhYkNoaWxkcmVuW3RhYkNoaWxkcmVuLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG4gIH07XG5cbiAgaGFuZGxlRm9jdXNFbmQgPSAoKSA9PiB7XG4gICAgY29uc3QgdGFiQ2hpbGRyZW4gPSB0aGlzLmdldFRhYkNoaWxkcmVuKCk7XG4gICAgdGFiQ2hpbGRyZW4gJiYgdGFiQ2hpbGRyZW4ubGVuZ3RoID4gMSAmJiB0YWJDaGlsZHJlblswXS5mb2N1cygpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZW5hYmxlVGFiTG9vcCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlYWN0LWRhdGVwaWNrZXJfX3RhYi1sb29wXCIgcmVmPXt0aGlzLnRhYkxvb3BSZWZ9PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fdGFiLWxvb3BfX3N0YXJ0XCJcbiAgICAgICAgICB0YWJJbmRleD1cIjBcIlxuICAgICAgICAgIG9uRm9jdXM9e3RoaXMuaGFuZGxlRm9jdXNTdGFydH1cbiAgICAgICAgLz5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX190YWItbG9vcF9fZW5kXCJcbiAgICAgICAgICB0YWJJbmRleD1cIjBcIlxuICAgICAgICAgIG9uRm9jdXM9e3RoaXMuaGFuZGxlRm9jdXNFbmR9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1xuICB1c2VGbG9hdGluZyxcbiAgYXJyb3csXG4gIG9mZnNldCxcbiAgZmxpcCxcbiAgYXV0b1VwZGF0ZSxcbn0gZnJvbSBcIkBmbG9hdGluZy11aS9yZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgcG9wcGVyUGxhY2VtZW50UG9zaXRpb25zID0gW1xuICBcInRvcC1zdGFydFwiLFxuICBcInRvcC1lbmRcIixcbiAgXCJib3R0b20tc3RhcnRcIixcbiAgXCJib3R0b20tZW5kXCIsXG4gIFwicmlnaHQtc3RhcnRcIixcbiAgXCJyaWdodC1lbmRcIixcbiAgXCJsZWZ0LXN0YXJ0XCIsXG4gIFwibGVmdC1lbmRcIixcbiAgXCJ0b3BcIixcbiAgXCJyaWdodFwiLFxuICBcImJvdHRvbVwiLFxuICBcImxlZnRcIixcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhGbG9hdGluZyhDb21wb25lbnQpIHtcbiAgY29uc3QgV2l0aEZsb2F0aW5nID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgYWx0X3Byb3BzID0ge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICBwb3BwZXJNb2RpZmllcnM6IHByb3BzLnBvcHBlck1vZGlmaWVycyB8fCBbXSxcbiAgICAgIHBvcHBlclByb3BzOiBwcm9wcy5wb3BwZXJQcm9wcyB8fCB7fSxcbiAgICAgIGhpZGVQb3BwZXI6XG4gICAgICAgIHR5cGVvZiBwcm9wcy5oaWRlUG9wcGVyID09PSBcImJvb2xlYW5cIiA/IHByb3BzLmhpZGVQb3BwZXIgOiB0cnVlLFxuICAgIH07XG4gICAgY29uc3QgYXJyb3dSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgICBjb25zdCBmbG9hdGluZ1Byb3BzID0gdXNlRmxvYXRpbmcoe1xuICAgICAgb3BlbjogIWFsdF9wcm9wcy5oaWRlUG9wcGVyLFxuICAgICAgd2hpbGVFbGVtZW50c01vdW50ZWQ6IGF1dG9VcGRhdGUsXG4gICAgICBwbGFjZW1lbnQ6IGFsdF9wcm9wcy5wb3BwZXJQbGFjZW1lbnQsXG4gICAgICBtaWRkbGV3YXJlOiBbXG4gICAgICAgIGZsaXAoeyBwYWRkaW5nOiAxNSB9KSxcbiAgICAgICAgb2Zmc2V0KDEwKSxcbiAgICAgICAgYXJyb3coeyBlbGVtZW50OiBhcnJvd1JlZiB9KSxcbiAgICAgICAgLi4uYWx0X3Byb3BzLnBvcHBlck1vZGlmaWVycyxcbiAgICAgIF0sXG4gICAgICAuLi5hbHRfcHJvcHMucG9wcGVyUHJvcHMsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENvbXBvbmVudCB7Li4uYWx0X3Byb3BzfSBwb3BwZXJQcm9wcz17eyAuLi5mbG9hdGluZ1Byb3BzLCBhcnJvd1JlZiB9fSAvPlxuICAgICk7XG4gIH07XG5cbiAgV2l0aEZsb2F0aW5nLnByb3BUeXBlcyA9IHtcbiAgICBwb3BwZXJQbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihwb3BwZXJQbGFjZW1lbnRQb3NpdGlvbnMpLFxuICAgIHBvcHBlck1vZGlmaWVyczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCksXG4gICAgcG9wcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaGlkZVBvcHBlcjogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgcmV0dXJuIFdpdGhGbG9hdGluZztcbn1cbiIsImltcG9ydCB7IGNsc3ggfSBmcm9tIFwiY2xzeFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgRmxvYXRpbmdBcnJvdyB9IGZyb20gXCJAZmxvYXRpbmctdWkvcmVhY3RcIjtcbmltcG9ydCBUYWJMb29wIGZyb20gXCIuL3RhYl9sb29wXCI7XG5pbXBvcnQgUG9ydGFsIGZyb20gXCIuL3BvcnRhbFwiO1xuaW1wb3J0IHdpdGhGbG9hdGluZyBmcm9tIFwiLi93aXRoX2Zsb2F0aW5nXCI7XG5cbi8vIEV4cG9ydGVkIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG5leHBvcnQgY2xhc3MgUG9wcGVyQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIGdldCBkZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhpZGVQb3BwZXI6IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHdyYXBwZXJDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGlkZVBvcHBlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgcG9wcGVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgICBwb3BwZXJDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHBvcHBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRhcmdldENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgZW5hYmxlVGFiTG9vcDogUHJvcFR5cGVzLmJvb2wsXG4gICAgcG9wcGVyT25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzaG93QXJyb3c6IFByb3BUeXBlcy5ib29sLFxuICAgIHBvcnRhbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBvcnRhbEhvc3Q6IFByb3BUeXBlcy5pbnN0YW5jZU9mKFNoYWRvd1Jvb3QpLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICB3cmFwcGVyQ2xhc3NOYW1lLFxuICAgICAgaGlkZVBvcHBlcixcbiAgICAgIHBvcHBlckNvbXBvbmVudCxcbiAgICAgIHRhcmdldENvbXBvbmVudCxcbiAgICAgIGVuYWJsZVRhYkxvb3AsXG4gICAgICBwb3BwZXJPbktleURvd24sXG4gICAgICBwb3J0YWxJZCxcbiAgICAgIHBvcnRhbEhvc3QsXG4gICAgICBwb3BwZXJQcm9wcyxcbiAgICAgIHNob3dBcnJvdyxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGxldCBwb3BwZXI7XG5cbiAgICBpZiAoIWhpZGVQb3BwZXIpIHtcbiAgICAgIGNvbnN0IGNsYXNzZXMgPSBjbHN4KFwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIiwgY2xhc3NOYW1lKTtcbiAgICAgIHBvcHBlciA9IChcbiAgICAgICAgPFRhYkxvb3AgZW5hYmxlVGFiTG9vcD17ZW5hYmxlVGFiTG9vcH0+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgcmVmPXtwb3BwZXJQcm9wcy5yZWZzLnNldEZsb2F0aW5nfVxuICAgICAgICAgICAgc3R5bGU9e3BvcHBlclByb3BzLmZsb2F0aW5nU3R5bGVzfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzfVxuICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9e3BvcHBlclByb3BzLnBsYWNlbWVudH1cbiAgICAgICAgICAgIG9uS2V5RG93bj17cG9wcGVyT25LZXlEb3dufVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwb3BwZXJDb21wb25lbnR9XG4gICAgICAgICAgICB7c2hvd0Fycm93ICYmIChcbiAgICAgICAgICAgICAgPEZsb2F0aW5nQXJyb3dcbiAgICAgICAgICAgICAgICByZWY9e3BvcHBlclByb3BzLmFycm93UmVmfVxuICAgICAgICAgICAgICAgIGNvbnRleHQ9e3BvcHBlclByb3BzLmNvbnRleHR9XG4gICAgICAgICAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9ezF9XG4gICAgICAgICAgICAgICAgaGVpZ2h0PXs4fVxuICAgICAgICAgICAgICAgIHdpZHRoPXsxNn1cbiAgICAgICAgICAgICAgICBzdHlsZT17eyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlWSgtMXB4KVwiIH19XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fdHJpYW5nbGVcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9UYWJMb29wPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5wb3BwZXJDb250YWluZXIpIHtcbiAgICAgIHBvcHBlciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5wb3BwZXJDb250YWluZXIsIHt9LCBwb3BwZXIpO1xuICAgIH1cblxuICAgIGlmIChwb3J0YWxJZCAmJiAhaGlkZVBvcHBlcikge1xuICAgICAgcG9wcGVyID0gKFxuICAgICAgICA8UG9ydGFsIHBvcnRhbElkPXtwb3J0YWxJZH0gcG9ydGFsSG9zdD17cG9ydGFsSG9zdH0+XG4gICAgICAgICAge3BvcHBlcn1cbiAgICAgICAgPC9Qb3J0YWw+XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHdyYXBwZXJDbGFzc2VzID0gY2xzeChcInJlYWN0LWRhdGVwaWNrZXItd3JhcHBlclwiLCB3cmFwcGVyQ2xhc3NOYW1lKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxkaXYgcmVmPXtwb3BwZXJQcm9wcy5yZWZzLnNldFJlZmVyZW5jZX0gY2xhc3NOYW1lPXt3cmFwcGVyQ2xhc3Nlc30+XG4gICAgICAgICAge3RhcmdldENvbXBvbmVudH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtwb3BwZXJ9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aEZsb2F0aW5nKFBvcHBlckNvbXBvbmVudCk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgQ2FsZW5kYXIgZnJvbSBcIi4vY2FsZW5kYXJcIjtcbmltcG9ydCBDYWxlbmRhckljb24gZnJvbSBcIi4vY2FsZW5kYXJfaWNvblwiO1xuaW1wb3J0IFBvcnRhbCBmcm9tIFwiLi9wb3J0YWxcIjtcbmltcG9ydCBQb3BwZXJDb21wb25lbnQgZnJvbSBcIi4vcG9wcGVyX2NvbXBvbmVudFwiO1xuaW1wb3J0IHsgcG9wcGVyUGxhY2VtZW50UG9zaXRpb25zIH0gZnJvbSBcIi4vd2l0aF9mbG9hdGluZ1wiO1xuaW1wb3J0IHsgY2xzeCB9IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQgeyBzZXQgfSBmcm9tIFwiZGF0ZS1mbnMvc2V0XCI7XG5pbXBvcnQgeyBzdGFydE9mRGF5IH0gZnJvbSBcImRhdGUtZm5zL3N0YXJ0T2ZEYXlcIjtcbmltcG9ydCB7IGVuZE9mRGF5IH0gZnJvbSBcImRhdGUtZm5zL2VuZE9mRGF5XCI7XG5pbXBvcnQgeyBpc1ZhbGlkIH0gZnJvbSBcImRhdGUtZm5zL2lzVmFsaWRcIjtcbmltcG9ydCB7XG4gIG5ld0RhdGUsXG4gIGlzRGF0ZSxcbiAgaXNCZWZvcmUsXG4gIGlzQWZ0ZXIsXG4gIGlzRXF1YWwsXG4gIHNldFRpbWUsXG4gIGdldFNlY29uZHMsXG4gIGdldE1pbnV0ZXMsXG4gIGdldEhvdXJzLFxuICBhZGREYXlzLFxuICBhZGRNb250aHMsXG4gIGFkZFdlZWtzLFxuICBzdWJEYXlzLFxuICBzdWJNb250aHMsXG4gIHN1YldlZWtzLFxuICBhZGRZZWFycyxcbiAgc3ViWWVhcnMsXG4gIGlzRGF5RGlzYWJsZWQsXG4gIGlzRGF5SW5SYW5nZSxcbiAgZ2V0RWZmZWN0aXZlTWluRGF0ZSxcbiAgZ2V0RWZmZWN0aXZlTWF4RGF0ZSxcbiAgcGFyc2VEYXRlLFxuICBzYWZlRGF0ZUZvcm1hdCxcbiAgc2FmZURhdGVSYW5nZUZvcm1hdCxcbiAgZ2V0SGlnaHRMaWdodERheXNNYXAsXG4gIGdldFllYXIsXG4gIGdldE1vbnRoLFxuICBnZXRTdGFydE9mV2VlayxcbiAgZ2V0RW5kT2ZXZWVrLFxuICByZWdpc3RlckxvY2FsZSxcbiAgc2V0RGVmYXVsdExvY2FsZSxcbiAgZ2V0RGVmYXVsdExvY2FsZSxcbiAgREVGQVVMVF9ZRUFSX0lURU1fTlVNQkVSLFxuICBpc1NhbWVEYXksXG4gIGlzTW9udGhEaXNhYmxlZCxcbiAgaXNZZWFyRGlzYWJsZWQsXG4gIHNhZmVNdWx0aXBsZURhdGVzRm9ybWF0LFxuICBnZXRIb2xpZGF5c01hcCxcbiAgaXNEYXRlQmVmb3JlLFxufSBmcm9tIFwiLi9kYXRlX3V0aWxzXCI7XG5pbXBvcnQgVGFiTG9vcCBmcm9tIFwiLi90YWJfbG9vcFwiO1xuaW1wb3J0IG9uQ2xpY2tPdXRzaWRlIGZyb20gXCJyZWFjdC1vbmNsaWNrb3V0c2lkZVwiO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIENhbGVuZGFyQ29udGFpbmVyIH0gZnJvbSBcIi4vY2FsZW5kYXJfY29udGFpbmVyXCI7XG5cbmV4cG9ydCB7IHJlZ2lzdGVyTG9jYWxlLCBzZXREZWZhdWx0TG9jYWxlLCBnZXREZWZhdWx0TG9jYWxlIH07XG5cbmNvbnN0IG91dHNpZGVDbGlja0lnbm9yZUNsYXNzID0gXCJyZWFjdC1kYXRlcGlja2VyLWlnbm9yZS1vbmNsaWNrb3V0c2lkZVwiO1xuY29uc3QgV3JhcHBlZENhbGVuZGFyID0gb25DbGlja091dHNpZGUoQ2FsZW5kYXIpO1xuXG4vLyBDb21wYXJlcyBkYXRlcyB5ZWFyK21vbnRoIGNvbWJpbmF0aW9uc1xuZnVuY3Rpb24gaGFzUHJlU2VsZWN0aW9uQ2hhbmdlZChkYXRlMSwgZGF0ZTIpIHtcbiAgaWYgKGRhdGUxICYmIGRhdGUyKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGdldE1vbnRoKGRhdGUxKSAhPT0gZ2V0TW9udGgoZGF0ZTIpIHx8IGdldFllYXIoZGF0ZTEpICE9PSBnZXRZZWFyKGRhdGUyKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gZGF0ZTEgIT09IGRhdGUyO1xufVxuXG4vKipcbiAqIEdlbmVyYWwgZGF0ZXBpY2tlciBjb21wb25lbnQuXG4gKi9cbmNvbnN0IElOUFVUX0VSUl8xID0gXCJEYXRlIGlucHV0IG5vdCB2YWxpZC5cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0ZVBpY2tlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbGxvd1NhbWVEYXk6IGZhbHNlLFxuICAgICAgZGF0ZUZvcm1hdDogXCJNTS9kZC95eXl5XCIsXG4gICAgICBkYXRlRm9ybWF0Q2FsZW5kYXI6IFwiTExMTCB5eXl5XCIsXG4gICAgICBvbkNoYW5nZSgpIHt9LFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246IGZhbHNlLFxuICAgICAgZHJvcGRvd25Nb2RlOiBcInNjcm9sbFwiLFxuICAgICAgb25Gb2N1cygpIHt9LFxuICAgICAgb25CbHVyKCkge30sXG4gICAgICBvbktleURvd24oKSB7fSxcbiAgICAgIG9uSW5wdXRDbGljaygpIHt9LFxuICAgICAgb25TZWxlY3QoKSB7fSxcbiAgICAgIG9uQ2xpY2tPdXRzaWRlKCkge30sXG4gICAgICBvbk1vbnRoQ2hhbmdlKCkge30sXG4gICAgICBvbkNhbGVuZGFyT3BlbigpIHt9LFxuICAgICAgb25DYWxlbmRhckNsb3NlKCkge30sXG4gICAgICBwcmV2ZW50T3Blbk9uRm9jdXM6IGZhbHNlLFxuICAgICAgb25ZZWFyQ2hhbmdlKCkge30sXG4gICAgICBvbklucHV0RXJyb3IoKSB7fSxcbiAgICAgIG1vbnRoc1Nob3duOiAxLFxuICAgICAgcmVhZE9ubHk6IGZhbHNlLFxuICAgICAgd2l0aFBvcnRhbDogZmFsc2UsXG4gICAgICBzZWxlY3RzRGlzYWJsZWREYXlzSW5SYW5nZTogZmFsc2UsXG4gICAgICBzaG91bGRDbG9zZU9uU2VsZWN0OiB0cnVlLFxuICAgICAgc2hvd1RpbWVTZWxlY3Q6IGZhbHNlLFxuICAgICAgc2hvd1RpbWVJbnB1dDogZmFsc2UsXG4gICAgICBzaG93UHJldmlvdXNNb250aHM6IGZhbHNlLFxuICAgICAgc2hvd01vbnRoWWVhclBpY2tlcjogZmFsc2UsXG4gICAgICBzaG93RnVsbE1vbnRoWWVhclBpY2tlcjogZmFsc2UsXG4gICAgICBzaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyOiBmYWxzZSxcbiAgICAgIHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyOiBmYWxzZSxcbiAgICAgIHNob3dZZWFyUGlja2VyOiBmYWxzZSxcbiAgICAgIHNob3dRdWFydGVyWWVhclBpY2tlcjogZmFsc2UsXG4gICAgICBzaG93V2Vla1BpY2tlcjogZmFsc2UsXG4gICAgICBzdHJpY3RQYXJzaW5nOiBmYWxzZSxcbiAgICAgIHN3YXBSYW5nZTogZmFsc2UsXG4gICAgICB0aW1lSW50ZXJ2YWxzOiAzMCxcbiAgICAgIHRpbWVDYXB0aW9uOiBcIlRpbWVcIixcbiAgICAgIHByZXZpb3VzTW9udGhBcmlhTGFiZWw6IFwiUHJldmlvdXMgTW9udGhcIixcbiAgICAgIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbDogXCJQcmV2aW91cyBNb250aFwiLFxuICAgICAgbmV4dE1vbnRoQXJpYUxhYmVsOiBcIk5leHQgTW9udGhcIixcbiAgICAgIG5leHRNb250aEJ1dHRvbkxhYmVsOiBcIk5leHQgTW9udGhcIixcbiAgICAgIHByZXZpb3VzWWVhckFyaWFMYWJlbDogXCJQcmV2aW91cyBZZWFyXCIsXG4gICAgICBwcmV2aW91c1llYXJCdXR0b25MYWJlbDogXCJQcmV2aW91cyBZZWFyXCIsXG4gICAgICBuZXh0WWVhckFyaWFMYWJlbDogXCJOZXh0IFllYXJcIixcbiAgICAgIG5leHRZZWFyQnV0dG9uTGFiZWw6IFwiTmV4dCBZZWFyXCIsXG4gICAgICB0aW1lSW5wdXRMYWJlbDogXCJUaW1lXCIsXG4gICAgICBlbmFibGVUYWJMb29wOiB0cnVlLFxuICAgICAgeWVhckl0ZW1OdW1iZXI6IERFRkFVTFRfWUVBUl9JVEVNX05VTUJFUixcbiAgICAgIGZvY3VzU2VsZWN0ZWRNb250aDogZmFsc2UsXG4gICAgICBzaG93UG9wcGVyQXJyb3c6IHRydWUsXG4gICAgICBleGNsdWRlU2Nyb2xsYmFyOiB0cnVlLFxuICAgICAgY3VzdG9tVGltZUlucHV0OiBudWxsLFxuICAgICAgY2FsZW5kYXJTdGFydERheTogdW5kZWZpbmVkLFxuICAgICAgdG9nZ2xlQ2FsZW5kYXJPbkljb25DbGljazogZmFsc2UsXG4gICAgICB1c2VQb2ludGVyRXZlbnQ6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFkanVzdERhdGVPbkNoYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgYWxsb3dTYW1lRGF5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhcmlhRGVzY3JpYmVkQnk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYXJpYUludmFsaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYXJpYUxhYmVsQ2xvc2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYXJpYUxhYmVsbGVkQnk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYXJpYVJlcXVpcmVkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGNhbGVuZGFyQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNhbGVuZGFyQ29udGFpbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNsb3NlT25TY3JvbGw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjdXN0b21JbnB1dDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgY3VzdG9tSW5wdXRSZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2FsZW5kYXJTdGFydERheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXNcbiAgICBkYXRlRm9ybWF0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXldKSxcbiAgICBkYXRlRm9ybWF0Q2FsZW5kYXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGF5Q2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB3ZWVrRGF5Q2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtb250aENsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGltZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkcm9wZG93bk1vZGU6IFByb3BUeXBlcy5vbmVPZihbXCJzY3JvbGxcIiwgXCJzZWxlY3RcIl0pLmlzUmVxdWlyZWQsXG4gICAgZW5kRGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgZXhjbHVkZURhdGVzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgIFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICBkYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKS5pc1JlcXVpcmVkLFxuICAgICAgICAgIG1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIH0pLFxuICAgICAgXSksXG4gICAgKSxcbiAgICBleGNsdWRlRGF0ZUludGVydmFsczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBzdGFydDogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgICAgIGVuZDogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgICB9KSxcbiAgICApLFxuICAgIGZpbHRlckRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGZpeGVkSGVpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmb3JtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZvcm1hdFdlZWtOdW1iZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhpZ2hsaWdodERhdGVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaG9saWRheXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbmNsdWRlRGF0ZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbmNsdWRlRGF0ZUludGVydmFsczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluY2x1ZGVUaW1lczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluamVjdFRpbWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0NsZWFyYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdG9nZ2xlQ2FsZW5kYXJPbkljb25DbGljazogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgIFByb3BUeXBlcy5ib29sLFxuICAgIF0pLFxuICAgIHNob3dJY29uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNhbGVuZGFySWNvbkNsYXNzbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsb2NhbGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7IGxvY2FsZTogUHJvcFR5cGVzLm9iamVjdCB9KSxcbiAgICBdKSxcbiAgICBtYXhEYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBtaW5EYXRlOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBtb250aHNTaG93bjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uV2Vla1NlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DbGlja091dHNpZGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ2hhbmdlUmF3OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbklucHV0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb250aENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25ZZWFyQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbklucHV0RXJyb3I6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG9uQ2FsZW5kYXJPcGVuOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNhbGVuZGFyQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9wZW5Ub0RhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIHBlZWtOZXh0TW9udGg6IFByb3BUeXBlcy5ib29sLFxuICAgIHBsYWNlaG9sZGVyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwb3BwZXJDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHBvcHBlckNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZywgLy8gPFBvcHBlckNvbXBvbmVudC8+IHByb3BzXG4gICAgcG9wcGVyTW9kaWZpZXJzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSwgLy8gPFBvcHBlckNvbXBvbmVudC8+IHByb3BzXG4gICAgcG9wcGVyUGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YocG9wcGVyUGxhY2VtZW50UG9zaXRpb25zKSwgLy8gPFBvcHBlckNvbXBvbmVudC8+IHByb3BzXG4gICAgcG9wcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcHJldmVudE9wZW5PbkZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gICAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNjcm9sbGFibGVZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICAgIHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERhdGUpLFxuICAgIHNlbGVjdHNFbmQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdHNTdGFydDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0c1JhbmdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RzRGlzYWJsZWREYXlzSW5SYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0c011bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RlZERhdGVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSksXG4gICAgc2hvd01vbnRoRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dQcmV2aW91c01vbnRoczogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd01vbnRoWWVhckRyb3Bkb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93V2Vla051bWJlcnM6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dZZWFyRHJvcGRvd246IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdFBhcnNpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIHN3YXBSYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAgIHN0YXJ0RGF0ZTogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gICAgc3RhcnRPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB0aW1lQ2FwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0b2RheUJ1dHRvbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgdXNlV2Vla2RheXNTaG9ydDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZm9ybWF0V2Vla0RheTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgd2Vla0xhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHdpdGhQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuICAgIHBvcnRhbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHBvcnRhbEhvc3Q6IFByb3BUeXBlcy5pbnN0YW5jZU9mKFNoYWRvd1Jvb3QpLFxuICAgIHllYXJJdGVtTnVtYmVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHllYXJEcm9wZG93bkl0ZW1OdW1iZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgc2hvdWxkQ2xvc2VPblNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1RpbWVJbnB1dDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd01vbnRoWWVhclBpY2tlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd0Z1bGxNb250aFllYXJQaWNrZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93WWVhclBpY2tlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1F1YXJ0ZXJZZWFyUGlja2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93V2Vla1BpY2tlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd0RhdGVTZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dUaW1lU2VsZWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93VGltZVNlbGVjdE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAgIHRpbWVGb3JtYXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGltZUludGVydmFsczogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtaW5UaW1lOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBtYXhUaW1lOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgICBleGNsdWRlVGltZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBmaWx0ZXJUaW1lOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB1c2VTaG9ydE1vbnRoSW5Ecm9wZG93bjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xlYXJCdXR0b25UaXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjbGVhckJ1dHRvbkNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwcmV2aW91c01vbnRoQXJpYUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLm5vZGUsXG4gICAgXSksXG4gICAgbmV4dE1vbnRoQXJpYUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5leHRNb250aEJ1dHRvbkxhYmVsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMubm9kZSxcbiAgICBdKSxcbiAgICBwcmV2aW91c1llYXJBcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcHJldmlvdXNZZWFyQnV0dG9uTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbmV4dFllYXJBcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbmV4dFllYXJCdXR0b25MYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aW1lSW5wdXRMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICByZW5kZXJDdXN0b21IZWFkZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlbmRlckRheUNvbnRlbnRzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZW5kZXJNb250aENvbnRlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlbmRlclF1YXJ0ZXJDb250ZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZW5kZXJZZWFyQ29udGVudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgd3JhcHBlckNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmb2N1c1NlbGVjdGVkTW9udGg6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uRGF5TW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb250aE1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uWWVhck1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uWWVhck1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNob3dQb3BwZXJBcnJvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgZXhjbHVkZVNjcm9sbGJhcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgZW5hYmxlVGFiTG9vcDogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VzdG9tVGltZUlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgICB3ZWVrQXJpYUxhYmVsUHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1vbnRoQXJpYUxhYmVsUHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHVzZVBvaW50ZXJFdmVudDogUHJvcFR5cGVzLmJvb2wsXG4gICAgeWVhckNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuY2FsY0luaXRpYWxTdGF0ZSgpO1xuICAgIHRoaXMucHJldmVudEZvY3VzVGltZW91dCA9IG51bGw7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGlmIChcbiAgICAgIHByZXZQcm9wcy5pbmxpbmUgJiZcbiAgICAgIGhhc1ByZVNlbGVjdGlvbkNoYW5nZWQocHJldlByb3BzLnNlbGVjdGVkLCB0aGlzLnByb3BzLnNlbGVjdGVkKVxuICAgICkge1xuICAgICAgdGhpcy5zZXRQcmVTZWxlY3Rpb24odGhpcy5wcm9wcy5zZWxlY3RlZCk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMuc3RhdGUubW9udGhTZWxlY3RlZEluICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHByZXZQcm9wcy5tb250aHNTaG93biAhPT0gdGhpcy5wcm9wcy5tb250aHNTaG93blxuICAgICkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1vbnRoU2VsZWN0ZWRJbjogMCB9KTtcbiAgICB9XG4gICAgaWYgKHByZXZQcm9wcy5oaWdobGlnaHREYXRlcyAhPT0gdGhpcy5wcm9wcy5oaWdobGlnaHREYXRlcykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGhpZ2hsaWdodERhdGVzOiBnZXRIaWdodExpZ2h0RGF5c01hcCh0aGlzLnByb3BzLmhpZ2hsaWdodERhdGVzKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhcHJldlN0YXRlLmZvY3VzZWQgJiZcbiAgICAgICFpc0VxdWFsKHByZXZQcm9wcy5zZWxlY3RlZCwgdGhpcy5wcm9wcy5zZWxlY3RlZClcbiAgICApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpbnB1dFZhbHVlOiBudWxsIH0pO1xuICAgIH1cblxuICAgIGlmIChwcmV2U3RhdGUub3BlbiAhPT0gdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICBpZiAocHJldlN0YXRlLm9wZW4gPT09IGZhbHNlICYmIHRoaXMuc3RhdGUub3BlbiA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnByb3BzLm9uQ2FsZW5kYXJPcGVuKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2U3RhdGUub3BlbiA9PT0gdHJ1ZSAmJiB0aGlzLnN0YXRlLm9wZW4gPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25DYWxlbmRhckNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jbGVhclByZXZlbnRGb2N1c1RpbWVvdXQoKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcbiAgfVxuXG4gIGdldFByZVNlbGVjdGlvbiA9ICgpID0+XG4gICAgdGhpcy5wcm9wcy5vcGVuVG9EYXRlXG4gICAgICA/IHRoaXMucHJvcHMub3BlblRvRGF0ZVxuICAgICAgOiB0aGlzLnByb3BzLnNlbGVjdHNFbmQgJiYgdGhpcy5wcm9wcy5zdGFydERhdGVcbiAgICAgICAgPyB0aGlzLnByb3BzLnN0YXJ0RGF0ZVxuICAgICAgICA6IHRoaXMucHJvcHMuc2VsZWN0c1N0YXJ0ICYmIHRoaXMucHJvcHMuZW5kRGF0ZVxuICAgICAgICAgID8gdGhpcy5wcm9wcy5lbmREYXRlXG4gICAgICAgICAgOiBuZXdEYXRlKCk7XG5cbiAgLy8gQ29udmVydCB0aGUgZGF0ZSBmcm9tIHN0cmluZyBmb3JtYXQgdG8gc3RhbmRhcmQgRGF0ZSBmb3JtYXRcbiAgbW9kaWZ5SG9saWRheXMgPSAoKSA9PlxuICAgIHRoaXMucHJvcHMuaG9saWRheXM/LnJlZHVjZSgoYWNjdW11bGF0b3IsIGhvbGlkYXkpID0+IHtcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShob2xpZGF5LmRhdGUpO1xuICAgICAgaWYgKCFpc1ZhbGlkKGRhdGUpKSB7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFsuLi5hY2N1bXVsYXRvciwgeyAuLi5ob2xpZGF5LCBkYXRlIH1dO1xuICAgIH0sIFtdKTtcblxuICBjYWxjSW5pdGlhbFN0YXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRQcmVTZWxlY3Rpb24gPSB0aGlzLmdldFByZVNlbGVjdGlvbigpO1xuICAgIGNvbnN0IG1pbkRhdGUgPSBnZXRFZmZlY3RpdmVNaW5EYXRlKHRoaXMucHJvcHMpO1xuICAgIGNvbnN0IG1heERhdGUgPSBnZXRFZmZlY3RpdmVNYXhEYXRlKHRoaXMucHJvcHMpO1xuICAgIGNvbnN0IGJvdW5kZWRQcmVTZWxlY3Rpb24gPVxuICAgICAgbWluRGF0ZSAmJiBpc0JlZm9yZShkZWZhdWx0UHJlU2VsZWN0aW9uLCBzdGFydE9mRGF5KG1pbkRhdGUpKVxuICAgICAgICA/IG1pbkRhdGVcbiAgICAgICAgOiBtYXhEYXRlICYmIGlzQWZ0ZXIoZGVmYXVsdFByZVNlbGVjdGlvbiwgZW5kT2ZEYXkobWF4RGF0ZSkpXG4gICAgICAgICAgPyBtYXhEYXRlXG4gICAgICAgICAgOiBkZWZhdWx0UHJlU2VsZWN0aW9uO1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuOiB0aGlzLnByb3BzLnN0YXJ0T3BlbiB8fCBmYWxzZSxcbiAgICAgIHByZXZlbnRGb2N1czogZmFsc2UsXG4gICAgICBwcmVTZWxlY3Rpb246XG4gICAgICAgICh0aGlzLnByb3BzLnNlbGVjdHNSYW5nZVxuICAgICAgICAgID8gdGhpcy5wcm9wcy5zdGFydERhdGVcbiAgICAgICAgICA6IHRoaXMucHJvcHMuc2VsZWN0ZWQpID8/IGJvdW5kZWRQcmVTZWxlY3Rpb24sXG4gICAgICAvLyB0cmFuc2Zvcm1pbmcgaGlnaGxpZ2h0ZWQgZGF5cyAocGVyaGFwcyBuZXN0ZWQgYXJyYXkpXG4gICAgICAvLyB0byBmbGF0IE1hcCBmb3IgZmFzdGVyIGFjY2VzcyBpbiBkYXkuanN4XG4gICAgICBoaWdobGlnaHREYXRlczogZ2V0SGlnaHRMaWdodERheXNNYXAodGhpcy5wcm9wcy5oaWdobGlnaHREYXRlcyksXG4gICAgICBmb2N1c2VkOiBmYWxzZSxcbiAgICAgIC8vIHVzZWQgdG8gZm9jdXMgZGF5IGluIGlubGluZSB2ZXJzaW9uIGFmdGVyIG1vbnRoIGhhcyBjaGFuZ2VkLCBidXQgbm90IG9uXG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgc2hvdWxkRm9jdXNEYXlJbmxpbmU6IGZhbHNlLFxuICAgICAgaXNSZW5kZXJBcmlhTGl2ZU1lc3NhZ2U6IGZhbHNlLFxuICAgIH07XG4gIH07XG5cbiAgY2xlYXJQcmV2ZW50Rm9jdXNUaW1lb3V0ID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByZXZlbnRGb2N1c1RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnByZXZlbnRGb2N1c1RpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBzZXRGb2N1cyA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5pbnB1dCAmJiB0aGlzLmlucHV0LmZvY3VzKSB7XG4gICAgICB0aGlzLmlucHV0LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgc2V0Qmx1ciA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5pbnB1dCAmJiB0aGlzLmlucHV0LmJsdXIpIHtcbiAgICAgIHRoaXMuaW5wdXQuYmx1cigpO1xuICAgIH1cblxuICAgIHRoaXMuY2FuY2VsRm9jdXNJbnB1dCgpO1xuICB9O1xuXG4gIHNldE9wZW4gPSAob3Blbiwgc2tpcFNldEJsdXIgPSBmYWxzZSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICB7XG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIHByZVNlbGVjdGlvbjpcbiAgICAgICAgICBvcGVuICYmIHRoaXMuc3RhdGUub3BlblxuICAgICAgICAgICAgPyB0aGlzLnN0YXRlLnByZVNlbGVjdGlvblxuICAgICAgICAgICAgOiB0aGlzLmNhbGNJbml0aWFsU3RhdGUoKS5wcmVTZWxlY3Rpb24sXG4gICAgICAgIGxhc3RQcmVTZWxlY3RDaGFuZ2U6IFBSRVNFTEVDVF9DSEFOR0VfVklBX05BVklHQVRFLFxuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKCFvcGVuKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICAgIChwcmV2KSA9PiAoe1xuICAgICAgICAgICAgICBmb2N1c2VkOiBza2lwU2V0Qmx1ciA/IHByZXYuZm9jdXNlZCA6IGZhbHNlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICFza2lwU2V0Qmx1ciAmJiB0aGlzLnNldEJsdXIoKTtcblxuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW5wdXRWYWx1ZTogbnVsbCB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApO1xuICB9O1xuICBpbnB1dE9rID0gKCkgPT4gaXNEYXRlKHRoaXMuc3RhdGUucHJlU2VsZWN0aW9uKTtcblxuICBpc0NhbGVuZGFyT3BlbiA9ICgpID0+XG4gICAgdGhpcy5wcm9wcy5vcGVuID09PSB1bmRlZmluZWRcbiAgICAgID8gdGhpcy5zdGF0ZS5vcGVuICYmICF0aGlzLnByb3BzLmRpc2FibGVkICYmICF0aGlzLnByb3BzLnJlYWRPbmx5XG4gICAgICA6IHRoaXMucHJvcHMub3BlbjtcblxuICBoYW5kbGVGb2N1cyA9IChldmVudCkgPT4ge1xuICAgIGlmICghdGhpcy5zdGF0ZS5wcmV2ZW50Rm9jdXMpIHtcbiAgICAgIHRoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICBpZiAoIXRoaXMucHJvcHMucHJldmVudE9wZW5PbkZvY3VzICYmICF0aGlzLnByb3BzLnJlYWRPbmx5KSB7XG4gICAgICAgIHRoaXMuc2V0T3Blbih0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGZvY3VzZWQ6IHRydWUgfSk7XG4gIH07XG5cbiAgc2VuZEZvY3VzQmFja1RvSW5wdXQgPSAoKSA9PiB7XG4gICAgLy8gQ2xlYXIgcHJldmlvdXMgdGltZW91dCBpZiBpdCBleGlzdHNcbiAgICBpZiAodGhpcy5wcmV2ZW50Rm9jdXNUaW1lb3V0KSB7XG4gICAgICB0aGlzLmNsZWFyUHJldmVudEZvY3VzVGltZW91dCgpO1xuICAgIH1cblxuICAgIC8vIGNsb3NlIHRoZSBwb3BwZXIgYW5kIHJlZm9jdXMgdGhlIGlucHV0XG4gICAgLy8gc3RvcCB0aGUgaW5wdXQgZnJvbSBhdXRvIG9wZW5pbmcgb25Gb2N1c1xuICAgIC8vIHNldEZvY3VzIHRvIHRoZSBpbnB1dFxuICAgIHRoaXMuc2V0U3RhdGUoeyBwcmV2ZW50Rm9jdXM6IHRydWUgfSwgKCkgPT4ge1xuICAgICAgdGhpcy5wcmV2ZW50Rm9jdXNUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0Rm9jdXMoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByZXZlbnRGb2N1czogZmFsc2UgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjYW5jZWxGb2N1c0lucHV0ID0gKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmlucHV0Rm9jdXNUaW1lb3V0KTtcbiAgICB0aGlzLmlucHV0Rm9jdXNUaW1lb3V0ID0gbnVsbDtcbiAgfTtcblxuICBkZWZlckZvY3VzSW5wdXQgPSAoKSA9PiB7XG4gICAgdGhpcy5jYW5jZWxGb2N1c0lucHV0KCk7XG4gICAgdGhpcy5pbnB1dEZvY3VzVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRGb2N1cygpLCAxKTtcbiAgfTtcblxuICBoYW5kbGVEcm9wZG93bkZvY3VzID0gKCkgPT4ge1xuICAgIHRoaXMuY2FuY2VsRm9jdXNJbnB1dCgpO1xuICB9O1xuXG4gIGhhbmRsZUJsdXIgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoIXRoaXMuc3RhdGUub3BlbiB8fCB0aGlzLnByb3BzLndpdGhQb3J0YWwgfHwgdGhpcy5wcm9wcy5zaG93VGltZUlucHV0KSB7XG4gICAgICB0aGlzLnByb3BzLm9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGZvY3VzZWQ6IGZhbHNlIH0pO1xuICB9O1xuXG4gIGhhbmRsZUNhbGVuZGFyQ2xpY2tPdXRzaWRlID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmlubGluZSkge1xuICAgICAgdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbkNsaWNrT3V0c2lkZShldmVudCk7XG4gICAgaWYgKHRoaXMucHJvcHMud2l0aFBvcnRhbCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlQ2hhbmdlID0gKC4uLmFsbEFyZ3MpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBhbGxBcmdzWzBdO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlUmF3KSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlUmF3LmFwcGx5KHRoaXMsIGFsbEFyZ3MpO1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkICE9PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAgICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKClcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaW5wdXRWYWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgbGFzdFByZVNlbGVjdENoYW5nZTogUFJFU0VMRUNUX0NIQU5HRV9WSUFfSU5QVVQsXG4gICAgfSk7XG4gICAgbGV0IGRhdGUgPSBwYXJzZURhdGUoXG4gICAgICBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICB0aGlzLnByb3BzLmRhdGVGb3JtYXQsXG4gICAgICB0aGlzLnByb3BzLmxvY2FsZSxcbiAgICAgIHRoaXMucHJvcHMuc3RyaWN0UGFyc2luZyxcbiAgICAgIHRoaXMucHJvcHMubWluRGF0ZSxcbiAgICApO1xuICAgIC8vIFVzZSBkYXRlIGZyb20gYHNlbGVjdGVkYCBwcm9wIHdoZW4gbWFuaXB1bGF0aW5nIG9ubHkgdGltZSBmb3IgaW5wdXQgdmFsdWVcbiAgICBpZiAoXG4gICAgICB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSAmJlxuICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZCAmJlxuICAgICAgZGF0ZSAmJlxuICAgICAgIWlzU2FtZURheShkYXRlLCB0aGlzLnByb3BzLnNlbGVjdGVkKVxuICAgICkge1xuICAgICAgZGF0ZSA9IHNldCh0aGlzLnByb3BzLnNlbGVjdGVkLCB7XG4gICAgICAgIGhvdXJzOiBnZXRIb3VycyhkYXRlKSxcbiAgICAgICAgbWludXRlczogZ2V0TWludXRlcyhkYXRlKSxcbiAgICAgICAgc2Vjb25kczogZ2V0U2Vjb25kcyhkYXRlKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0ZSB8fCAhZXZlbnQudGFyZ2V0LnZhbHVlKSB7XG4gICAgICB0aGlzLnNldFNlbGVjdGVkKGRhdGUsIGV2ZW50LCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlU2VsZWN0ID0gKGRhdGUsIGV2ZW50LCBtb250aFNlbGVjdGVkSW4pID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0ICYmICF0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0KSB7XG4gICAgICAvLyBQcmV2ZW50aW5nIG9uRm9jdXMgZXZlbnQgdG8gZml4IGlzc3VlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vSGFja2VyMHgwMS9yZWFjdC1kYXRlcGlja2VyL2lzc3Vlcy82MjhcbiAgICAgIHRoaXMuc2VuZEZvY3VzQmFja1RvSW5wdXQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2VSYXcpIHtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2VSYXcoZXZlbnQpO1xuICAgIH1cbiAgICB0aGlzLnNldFNlbGVjdGVkKGRhdGUsIGV2ZW50LCBmYWxzZSwgbW9udGhTZWxlY3RlZEluKTtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93RGF0ZVNlbGVjdCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzUmVuZGVyQXJpYUxpdmVNZXNzYWdlOiB0cnVlIH0pO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdCB8fCB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0KSB7XG4gICAgICB0aGlzLnNldFByZVNlbGVjdGlvbihkYXRlKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnByb3BzLmlubGluZSkge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLnNlbGVjdHNSYW5nZSkge1xuICAgICAgICB0aGlzLnNldE9wZW4oZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKFxuICAgICAgICBzdGFydERhdGUgJiZcbiAgICAgICAgIWVuZERhdGUgJiZcbiAgICAgICAgKHRoaXMucHJvcHMuc3dhcFJhbmdlIHx8ICFpc0RhdGVCZWZvcmUoZGF0ZSwgc3RhcnREYXRlKSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLnNldE9wZW4oZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBzZXRTZWxlY3RlZCA9IChkYXRlLCBldmVudCwga2VlcElucHV0LCBtb250aFNlbGVjdGVkSW4pID0+IHtcbiAgICBsZXQgY2hhbmdlZERhdGUgPSBkYXRlO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd1llYXJQaWNrZXIpIHtcbiAgICAgIGlmIChcbiAgICAgICAgY2hhbmdlZERhdGUgIT09IG51bGwgJiZcbiAgICAgICAgaXNZZWFyRGlzYWJsZWQoZ2V0WWVhcihjaGFuZ2VkRGF0ZSksIHRoaXMucHJvcHMpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyKSB7XG4gICAgICBpZiAoY2hhbmdlZERhdGUgIT09IG51bGwgJiYgaXNNb250aERpc2FibGVkKGNoYW5nZWREYXRlLCB0aGlzLnByb3BzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjaGFuZ2VkRGF0ZSAhPT0gbnVsbCAmJiBpc0RheURpc2FibGVkKGNoYW5nZWREYXRlLCB0aGlzLnByb3BzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgb25DaGFuZ2UsXG4gICAgICBzZWxlY3RzUmFuZ2UsXG4gICAgICBzdGFydERhdGUsXG4gICAgICBlbmREYXRlLFxuICAgICAgc2VsZWN0c011bHRpcGxlLFxuICAgICAgc2VsZWN0ZWREYXRlcyxcbiAgICAgIG1pblRpbWUsXG4gICAgICBzd2FwUmFuZ2UsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoXG4gICAgICAhaXNFcXVhbCh0aGlzLnByb3BzLnNlbGVjdGVkLCBjaGFuZ2VkRGF0ZSkgfHxcbiAgICAgIHRoaXMucHJvcHMuYWxsb3dTYW1lRGF5IHx8XG4gICAgICBzZWxlY3RzUmFuZ2UgfHxcbiAgICAgIHNlbGVjdHNNdWx0aXBsZVxuICAgICkge1xuICAgICAgaWYgKGNoYW5nZWREYXRlICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLnByb3BzLnNlbGVjdGVkICYmXG4gICAgICAgICAgKCFrZWVwSW5wdXQgfHxcbiAgICAgICAgICAgICghdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdCAmJlxuICAgICAgICAgICAgICAhdGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkgJiZcbiAgICAgICAgICAgICAgIXRoaXMucHJvcHMuc2hvd1RpbWVJbnB1dCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGNoYW5nZWREYXRlID0gc2V0VGltZShjaGFuZ2VkRGF0ZSwge1xuICAgICAgICAgICAgaG91cjogZ2V0SG91cnModGhpcy5wcm9wcy5zZWxlY3RlZCksXG4gICAgICAgICAgICBtaW51dGU6IGdldE1pbnV0ZXModGhpcy5wcm9wcy5zZWxlY3RlZCksXG4gICAgICAgICAgICBzZWNvbmQ6IGdldFNlY29uZHModGhpcy5wcm9wcy5zZWxlY3RlZCksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBtaW5UaW1lIGlzIHByZXNlbnQgdGhlbiBzZXQgdGhlIHRpbWUgdG8gbWluVGltZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWtlZXBJbnB1dCAmJlxuICAgICAgICAgICh0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0IHx8IHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAobWluVGltZSkge1xuICAgICAgICAgICAgY2hhbmdlZERhdGUgPSBzZXRUaW1lKGNoYW5nZWREYXRlLCB7XG4gICAgICAgICAgICAgIGhvdXI6IG1pblRpbWUuZ2V0SG91cnMoKSxcbiAgICAgICAgICAgICAgbWludXRlOiBtaW5UaW1lLmdldE1pbnV0ZXMoKSxcbiAgICAgICAgICAgICAgc2Vjb25kOiBtaW5UaW1lLmdldFNlY29uZHMoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5pbmxpbmUpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHByZVNlbGVjdGlvbjogY2hhbmdlZERhdGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmZvY3VzU2VsZWN0ZWRNb250aCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtb250aFNlbGVjdGVkSW46IG1vbnRoU2VsZWN0ZWRJbiB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdHNSYW5nZSkge1xuICAgICAgICBjb25zdCBub1JhbmdlcyA9ICFzdGFydERhdGUgJiYgIWVuZERhdGU7XG4gICAgICAgIGNvbnN0IGhhc1N0YXJ0UmFuZ2UgPSBzdGFydERhdGUgJiYgIWVuZERhdGU7XG4gICAgICAgIGNvbnN0IGlzUmFuZ2VGaWxsZWQgPSBzdGFydERhdGUgJiYgZW5kRGF0ZTtcbiAgICAgICAgaWYgKG5vUmFuZ2VzKSB7XG4gICAgICAgICAgb25DaGFuZ2UoW2NoYW5nZWREYXRlLCBudWxsXSwgZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc1N0YXJ0UmFuZ2UpIHtcbiAgICAgICAgICBpZiAoY2hhbmdlZERhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG9uQ2hhbmdlKFtudWxsLCBudWxsXSwgZXZlbnQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlQmVmb3JlKGNoYW5nZWREYXRlLCBzdGFydERhdGUpKSB7XG4gICAgICAgICAgICBpZiAoc3dhcFJhbmdlKSB7XG4gICAgICAgICAgICAgIG9uQ2hhbmdlKFtjaGFuZ2VkRGF0ZSwgc3RhcnREYXRlXSwgZXZlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb25DaGFuZ2UoW2NoYW5nZWREYXRlLCBudWxsXSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbkNoYW5nZShbc3RhcnREYXRlLCBjaGFuZ2VkRGF0ZV0sIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmFuZ2VGaWxsZWQpIHtcbiAgICAgICAgICBvbkNoYW5nZShbY2hhbmdlZERhdGUsIG51bGxdLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0c011bHRpcGxlKSB7XG4gICAgICAgIGlmICghc2VsZWN0ZWREYXRlcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgb25DaGFuZ2UoW2NoYW5nZWREYXRlXSwgZXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGlzQ2hhbmdlZERhdGVBbHJlYWR5U2VsZWN0ZWQgPSBzZWxlY3RlZERhdGVzLnNvbWUoXG4gICAgICAgICAgICAoc2VsZWN0ZWREYXRlKSA9PiBpc1NhbWVEYXkoc2VsZWN0ZWREYXRlLCBjaGFuZ2VkRGF0ZSksXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChpc0NoYW5nZWREYXRlQWxyZWFkeVNlbGVjdGVkKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0RGF0ZXMgPSBzZWxlY3RlZERhdGVzLmZpbHRlcihcbiAgICAgICAgICAgICAgKHNlbGVjdGVkRGF0ZSkgPT4gIWlzU2FtZURheShzZWxlY3RlZERhdGUsIGNoYW5nZWREYXRlKSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIG9uQ2hhbmdlKG5leHREYXRlcywgZXZlbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbkNoYW5nZShbLi4uc2VsZWN0ZWREYXRlcywgY2hhbmdlZERhdGVdLCBldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkNoYW5nZShjaGFuZ2VkRGF0ZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgha2VlcElucHV0KSB7XG4gICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KGNoYW5nZWREYXRlLCBldmVudCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaW5wdXRWYWx1ZTogbnVsbCB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gV2hlbiBjaGVja2luZyBwcmVTZWxlY3Rpb24gdmlhIG1pbi9tYXhEYXRlLCB0aW1lcyBuZWVkIHRvIGJlIG1hbmlwdWxhdGVkIHZpYSBzdGFydE9mRGF5L2VuZE9mRGF5XG4gIHNldFByZVNlbGVjdGlvbiA9IChkYXRlKSA9PiB7XG4gICAgY29uc3QgaGFzTWluRGF0ZSA9IHR5cGVvZiB0aGlzLnByb3BzLm1pbkRhdGUgIT09IFwidW5kZWZpbmVkXCI7XG4gICAgY29uc3QgaGFzTWF4RGF0ZSA9IHR5cGVvZiB0aGlzLnByb3BzLm1heERhdGUgIT09IFwidW5kZWZpbmVkXCI7XG4gICAgbGV0IGlzVmFsaWREYXRlU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICBpZiAoZGF0ZSkge1xuICAgICAgY29uc3QgZGF0ZVN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRhdGUpO1xuICAgICAgaWYgKGhhc01pbkRhdGUgJiYgaGFzTWF4RGF0ZSkge1xuICAgICAgICAvLyBpc0RheUluUmFuZ2UgdXNlcyBzdGFydE9mRGF5IGludGVybmFsbHksIHNvIG5vdCBuZWNlc3NhcnkgdG8gbWFuaXB1bGF0ZSB0aW1lcyBoZXJlXG4gICAgICAgIGlzVmFsaWREYXRlU2VsZWN0aW9uID0gaXNEYXlJblJhbmdlKFxuICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICAgIHRoaXMucHJvcHMubWF4RGF0ZSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzTWluRGF0ZSkge1xuICAgICAgICBjb25zdCBtaW5EYXRlU3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkodGhpcy5wcm9wcy5taW5EYXRlKTtcbiAgICAgICAgaXNWYWxpZERhdGVTZWxlY3Rpb24gPVxuICAgICAgICAgIGlzQWZ0ZXIoZGF0ZSwgbWluRGF0ZVN0YXJ0T2ZEYXkpIHx8XG4gICAgICAgICAgaXNFcXVhbChkYXRlU3RhcnRPZkRheSwgbWluRGF0ZVN0YXJ0T2ZEYXkpO1xuICAgICAgfSBlbHNlIGlmIChoYXNNYXhEYXRlKSB7XG4gICAgICAgIGNvbnN0IG1heERhdGVFbmRPZkRheSA9IGVuZE9mRGF5KHRoaXMucHJvcHMubWF4RGF0ZSk7XG4gICAgICAgIGlzVmFsaWREYXRlU2VsZWN0aW9uID1cbiAgICAgICAgICBpc0JlZm9yZShkYXRlLCBtYXhEYXRlRW5kT2ZEYXkpIHx8XG4gICAgICAgICAgaXNFcXVhbChkYXRlU3RhcnRPZkRheSwgbWF4RGF0ZUVuZE9mRGF5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzVmFsaWREYXRlU2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcHJlU2VsZWN0aW9uOiBkYXRlLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUNhbGVuZGFyID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0T3BlbighdGhpcy5zdGF0ZS5vcGVuKTtcbiAgfTtcblxuICBoYW5kbGVUaW1lQ2hhbmdlID0gKHRpbWUpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMucHJvcHMuc2VsZWN0ZWRcbiAgICAgID8gdGhpcy5wcm9wcy5zZWxlY3RlZFxuICAgICAgOiB0aGlzLmdldFByZVNlbGVjdGlvbigpO1xuICAgIGxldCBjaGFuZ2VkRGF0ZSA9IHRoaXMucHJvcHMuc2VsZWN0ZWRcbiAgICAgID8gdGltZVxuICAgICAgOiBzZXRUaW1lKHNlbGVjdGVkLCB7XG4gICAgICAgICAgaG91cjogZ2V0SG91cnModGltZSksXG4gICAgICAgICAgbWludXRlOiBnZXRNaW51dGVzKHRpbWUpLFxuICAgICAgICB9KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcHJlU2VsZWN0aW9uOiBjaGFuZ2VkRGF0ZSxcbiAgICB9KTtcblxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UoY2hhbmdlZERhdGUpO1xuICAgIGlmICh0aGlzLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QpIHtcbiAgICAgIHRoaXMuc2VuZEZvY3VzQmFja1RvSW5wdXQoKTtcbiAgICAgIHRoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnNob3dUaW1lSW5wdXQpIHtcbiAgICAgIHRoaXMuc2V0T3Blbih0cnVlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5IHx8IHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3QpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1JlbmRlckFyaWFMaXZlTWVzc2FnZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlucHV0VmFsdWU6IG51bGwgfSk7XG4gIH07XG5cbiAgb25JbnB1dENsaWNrID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhdGhpcy5wcm9wcy5yZWFkT25seSkge1xuICAgICAgdGhpcy5zZXRPcGVuKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25JbnB1dENsaWNrKCk7XG4gIH07XG5cbiAgb25JbnB1dEtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICB0aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7XG4gICAgY29uc3QgZXZlbnRLZXkgPSBldmVudC5rZXk7XG5cbiAgICBpZiAoXG4gICAgICAhdGhpcy5zdGF0ZS5vcGVuICYmXG4gICAgICAhdGhpcy5wcm9wcy5pbmxpbmUgJiZcbiAgICAgICF0aGlzLnByb3BzLnByZXZlbnRPcGVuT25Gb2N1c1xuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICBldmVudEtleSA9PT0gXCJBcnJvd0Rvd25cIiB8fFxuICAgICAgICBldmVudEtleSA9PT0gXCJBcnJvd1VwXCIgfHxcbiAgICAgICAgZXZlbnRLZXkgPT09IFwiRW50ZXJcIlxuICAgICAgKSB7XG4gICAgICAgIHRoaXMub25JbnB1dENsaWNrKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaWYgY2FsZW5kYXIgaXMgb3BlbiwgdGhlc2Uga2V5cyB3aWxsIGZvY3VzIHRoZSBzZWxlY3RlZCBpdGVtXG4gICAgaWYgKHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgaWYgKGV2ZW50S2V5ID09PSBcIkFycm93RG93blwiIHx8IGV2ZW50S2V5ID09PSBcIkFycm93VXBcIikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBzZWxlY3RvclN0cmluZyA9XG4gICAgICAgICAgdGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlciAmJiB0aGlzLnByb3BzLnNob3dXZWVrTnVtYmVyc1xuICAgICAgICAgICAgPyAnLnJlYWN0LWRhdGVwaWNrZXJfX3dlZWstbnVtYmVyW3RhYmluZGV4PVwiMFwiXSdcbiAgICAgICAgICAgIDogdGhpcy5wcm9wcy5zaG93RnVsbE1vbnRoWWVhclBpY2tlciB8fFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlclxuICAgICAgICAgICAgICA/ICcucmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dFt0YWJpbmRleD1cIjBcIl0nXG4gICAgICAgICAgICAgIDogJy5yZWFjdC1kYXRlcGlja2VyX19kYXlbdGFiaW5kZXg9XCIwXCJdJztcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtID1cbiAgICAgICAgICB0aGlzLmNhbGVuZGFyLmNvbXBvbmVudE5vZGUgJiZcbiAgICAgICAgICB0aGlzLmNhbGVuZGFyLmNvbXBvbmVudE5vZGUucXVlcnlTZWxlY3RvcihzZWxlY3RvclN0cmluZyk7XG4gICAgICAgIHNlbGVjdGVkSXRlbSAmJiBzZWxlY3RlZEl0ZW0uZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29weSA9IG5ld0RhdGUodGhpcy5zdGF0ZS5wcmVTZWxlY3Rpb24pO1xuICAgICAgaWYgKGV2ZW50S2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuaW5wdXRPaygpICYmXG4gICAgICAgICAgdGhpcy5zdGF0ZS5sYXN0UHJlU2VsZWN0Q2hhbmdlID09PSBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9OQVZJR0FURVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZVNlbGVjdChjb3B5LCBldmVudCk7XG4gICAgICAgICAgIXRoaXMucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdCAmJiB0aGlzLnNldFByZVNlbGVjdGlvbihjb3B5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldE9wZW4oZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50S2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuc2VuZEZvY3VzQmFja1RvSW5wdXQoKTtcbiAgICAgICAgdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnRLZXkgPT09IFwiVGFiXCIpIHtcbiAgICAgICAgdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmlucHV0T2soKSkge1xuICAgICAgICB0aGlzLnByb3BzLm9uSW5wdXRFcnJvcih7IGNvZGU6IDEsIG1zZzogSU5QVVRfRVJSXzEgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIG9uUG9ydGFsS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50S2V5ID0gZXZlbnQua2V5O1xuICAgIGlmIChldmVudEtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgIHtcbiAgICAgICAgICBwcmV2ZW50Rm9jdXM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0aGlzLnNldE9wZW4oZmFsc2UpO1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRGb2N1cygpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByZXZlbnRGb2N1czogZmFsc2UgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICAvLyBrZXlEb3duIGV2ZW50cyBwYXNzZWQgZG93biB0byBkYXkuanN4XG4gIG9uRGF5S2V5RG93biA9IChldmVudCkgPT4ge1xuICAgIHRoaXMucHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgICBjb25zdCBldmVudEtleSA9IGV2ZW50LmtleTtcbiAgICBjb25zdCBpc1NoaWZ0S2V5QWN0aXZlID0gZXZlbnQuc2hpZnRLZXk7XG5cbiAgICBjb25zdCBjb3B5ID0gbmV3RGF0ZSh0aGlzLnN0YXRlLnByZVNlbGVjdGlvbik7XG4gICAgaWYgKGV2ZW50S2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhhbmRsZVNlbGVjdChjb3B5LCBldmVudCk7XG4gICAgICAhdGhpcy5wcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0ICYmIHRoaXMuc2V0UHJlU2VsZWN0aW9uKGNvcHkpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRLZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHRoaXMuc2V0T3BlbihmYWxzZSk7XG4gICAgICBpZiAoIXRoaXMuaW5wdXRPaygpKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25JbnB1dEVycm9yKHsgY29kZTogMSwgbXNnOiBJTlBVVF9FUlJfMSB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICBsZXQgbmV3U2VsZWN0aW9uO1xuICAgICAgc3dpdGNoIChldmVudEtleSkge1xuICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd1dlZWtQaWNrZXIpIHtcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IHN1YldlZWtzKGNvcHksIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdTZWxlY3Rpb24gPSBzdWJEYXlzKGNvcHksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy5zaG93V2Vla1BpY2tlcikge1xuICAgICAgICAgICAgbmV3U2VsZWN0aW9uID0gYWRkV2Vla3MoY29weSwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IGFkZERheXMoY29weSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IHN1YldlZWtzKGNvcHksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgICAgbmV3U2VsZWN0aW9uID0gYWRkV2Vla3MoY29weSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJQYWdlVXBcIjpcbiAgICAgICAgICBuZXdTZWxlY3Rpb24gPSBpc1NoaWZ0S2V5QWN0aXZlXG4gICAgICAgICAgICA/IHN1YlllYXJzKGNvcHksIDEpXG4gICAgICAgICAgICA6IHN1Yk1vbnRocyhjb3B5LCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIlBhZ2VEb3duXCI6XG4gICAgICAgICAgbmV3U2VsZWN0aW9uID0gaXNTaGlmdEtleUFjdGl2ZVxuICAgICAgICAgICAgPyBhZGRZZWFycyhjb3B5LCAxKVxuICAgICAgICAgICAgOiBhZGRNb250aHMoY29weSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJIb21lXCI6XG4gICAgICAgICAgbmV3U2VsZWN0aW9uID0gZ2V0U3RhcnRPZldlZWsoXG4gICAgICAgICAgICBjb3B5LFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5sb2NhbGUsXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkVuZFwiOlxuICAgICAgICAgIG5ld1NlbGVjdGlvbiA9IGdldEVuZE9mV2Vlayhjb3B5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBuZXdTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKCFuZXdTZWxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25JbnB1dEVycm9yKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbklucHV0RXJyb3IoeyBjb2RlOiAxLCBtc2c6IElOUFVUX0VSUl8xIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgbGFzdFByZVNlbGVjdENoYW5nZTogUFJFU0VMRUNUX0NIQU5HRV9WSUFfTkFWSUdBVEUgfSk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hZGp1c3REYXRlT25DaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZChuZXdTZWxlY3Rpb24pO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRQcmVTZWxlY3Rpb24obmV3U2VsZWN0aW9uKTtcbiAgICAgIC8vIG5lZWQgdG8gZmlndXJlIG91dCB3aGV0aGVyIG1vbnRoIGhhcyBjaGFuZ2VkIHRvIGZvY3VzIGRheSBpbiBpbmxpbmUgdmVyc2lvblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW5saW5lKSB7XG4gICAgICAgIGNvbnN0IHByZXZNb250aCA9IGdldE1vbnRoKGNvcHkpO1xuICAgICAgICBjb25zdCBuZXdNb250aCA9IGdldE1vbnRoKG5ld1NlbGVjdGlvbik7XG4gICAgICAgIGNvbnN0IHByZXZZZWFyID0gZ2V0WWVhcihjb3B5KTtcbiAgICAgICAgY29uc3QgbmV3WWVhciA9IGdldFllYXIobmV3U2VsZWN0aW9uKTtcblxuICAgICAgICBpZiAocHJldk1vbnRoICE9PSBuZXdNb250aCB8fCBwcmV2WWVhciAhPT0gbmV3WWVhcikge1xuICAgICAgICAgIC8vIG1vbnRoIGhhcyBjaGFuZ2VkXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3VsZEZvY3VzRGF5SW5saW5lOiB0cnVlIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG1vbnRoIGhhc24ndCBjaGFuZ2VkXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3VsZEZvY3VzRGF5SW5saW5lOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBoYW5kbGUgZ2VuZXJpYyBrZXkgZG93biBldmVudHMgaW4gdGhlIHBvcHBlciB0aGF0IGRvIG5vdCBhZGp1c3Qgb3Igc2VsZWN0IGRhdGVzXG4gIC8vIGV4OiB3aGlsZSBmb2N1c2luZyBwcmV2IGFuZCBuZXh0IG1vbnRoIGJ1dHRvbnNcbiAgb25Qb3BwZXJLZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgZXZlbnRLZXkgPSBldmVudC5rZXk7XG4gICAgaWYgKGV2ZW50S2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5zZW5kRm9jdXNCYWNrVG9JbnB1dCgpO1xuICAgIH1cbiAgfTtcblxuICBvbkNsZWFyQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2VuZEZvY3VzQmFja1RvSW5wdXQoKTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdHNSYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShbbnVsbCwgbnVsbF0sIGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShudWxsLCBldmVudCk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyBpbnB1dFZhbHVlOiBudWxsIH0pO1xuICB9O1xuXG4gIGNsZWFyID0gKCkgPT4ge1xuICAgIHRoaXMub25DbGVhckNsaWNrKCk7XG4gIH07XG5cbiAgb25TY3JvbGwgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgdGhpcy5wcm9wcy5jbG9zZU9uU2Nyb2xsID09PSBcImJvb2xlYW5cIiAmJlxuICAgICAgdGhpcy5wcm9wcy5jbG9zZU9uU2Nyb2xsXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50LnRhcmdldCA9PT0gZG9jdW1lbnQgfHxcbiAgICAgICAgZXZlbnQudGFyZ2V0ID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHxcbiAgICAgICAgZXZlbnQudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5XG4gICAgICApIHtcbiAgICAgICAgdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmNsb3NlT25TY3JvbGwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPblNjcm9sbChldmVudCkpIHtcbiAgICAgICAgdGhpcy5zZXRPcGVuKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyQ2FsZW5kYXIgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmlubGluZSAmJiAhdGhpcy5pc0NhbGVuZGFyT3BlbigpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxXcmFwcGVkQ2FsZW5kYXJcbiAgICAgICAgcmVmPXsoZWxlbSkgPT4ge1xuICAgICAgICAgIHRoaXMuY2FsZW5kYXIgPSBlbGVtO1xuICAgICAgICB9fVxuICAgICAgICBsb2NhbGU9e3RoaXMucHJvcHMubG9jYWxlfVxuICAgICAgICBjYWxlbmRhclN0YXJ0RGF5PXt0aGlzLnByb3BzLmNhbGVuZGFyU3RhcnREYXl9XG4gICAgICAgIGNob29zZURheUFyaWFMYWJlbFByZWZpeD17dGhpcy5wcm9wcy5jaG9vc2VEYXlBcmlhTGFiZWxQcmVmaXh9XG4gICAgICAgIGRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4PXt0aGlzLnByb3BzLmRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4fVxuICAgICAgICB3ZWVrQXJpYUxhYmVsUHJlZml4PXt0aGlzLnByb3BzLndlZWtBcmlhTGFiZWxQcmVmaXh9XG4gICAgICAgIG1vbnRoQXJpYUxhYmVsUHJlZml4PXt0aGlzLnByb3BzLm1vbnRoQXJpYUxhYmVsUHJlZml4fVxuICAgICAgICBhZGp1c3REYXRlT25DaGFuZ2U9e3RoaXMucHJvcHMuYWRqdXN0RGF0ZU9uQ2hhbmdlfVxuICAgICAgICBzZXRPcGVuPXt0aGlzLnNldE9wZW59XG4gICAgICAgIHNob3VsZENsb3NlT25TZWxlY3Q9e3RoaXMucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdH1cbiAgICAgICAgZGF0ZUZvcm1hdD17dGhpcy5wcm9wcy5kYXRlRm9ybWF0Q2FsZW5kYXJ9XG4gICAgICAgIHVzZVdlZWtkYXlzU2hvcnQ9e3RoaXMucHJvcHMudXNlV2Vla2RheXNTaG9ydH1cbiAgICAgICAgZm9ybWF0V2Vla0RheT17dGhpcy5wcm9wcy5mb3JtYXRXZWVrRGF5fVxuICAgICAgICBkcm9wZG93bk1vZGU9e3RoaXMucHJvcHMuZHJvcGRvd25Nb2RlfVxuICAgICAgICBzZWxlY3RlZD17dGhpcy5wcm9wcy5zZWxlY3RlZH1cbiAgICAgICAgcHJlU2VsZWN0aW9uPXt0aGlzLnN0YXRlLnByZVNlbGVjdGlvbn1cbiAgICAgICAgb25TZWxlY3Q9e3RoaXMuaGFuZGxlU2VsZWN0fVxuICAgICAgICBvbldlZWtTZWxlY3Q9e3RoaXMucHJvcHMub25XZWVrU2VsZWN0fVxuICAgICAgICBvcGVuVG9EYXRlPXt0aGlzLnByb3BzLm9wZW5Ub0RhdGV9XG4gICAgICAgIG1pbkRhdGU9e3RoaXMucHJvcHMubWluRGF0ZX1cbiAgICAgICAgbWF4RGF0ZT17dGhpcy5wcm9wcy5tYXhEYXRlfVxuICAgICAgICBzZWxlY3RzU3RhcnQ9e3RoaXMucHJvcHMuc2VsZWN0c1N0YXJ0fVxuICAgICAgICBzZWxlY3RzRW5kPXt0aGlzLnByb3BzLnNlbGVjdHNFbmR9XG4gICAgICAgIHNlbGVjdHNSYW5nZT17dGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2V9XG4gICAgICAgIHNlbGVjdHNNdWx0aXBsZT17dGhpcy5wcm9wcy5zZWxlY3RzTXVsdGlwbGV9XG4gICAgICAgIHNlbGVjdGVkRGF0ZXM9e3RoaXMucHJvcHMuc2VsZWN0ZWREYXRlc31cbiAgICAgICAgc3RhcnREYXRlPXt0aGlzLnByb3BzLnN0YXJ0RGF0ZX1cbiAgICAgICAgZW5kRGF0ZT17dGhpcy5wcm9wcy5lbmREYXRlfVxuICAgICAgICBleGNsdWRlRGF0ZXM9e3RoaXMucHJvcHMuZXhjbHVkZURhdGVzfVxuICAgICAgICBleGNsdWRlRGF0ZUludGVydmFscz17dGhpcy5wcm9wcy5leGNsdWRlRGF0ZUludGVydmFsc31cbiAgICAgICAgZmlsdGVyRGF0ZT17dGhpcy5wcm9wcy5maWx0ZXJEYXRlfVxuICAgICAgICBvbkNsaWNrT3V0c2lkZT17dGhpcy5oYW5kbGVDYWxlbmRhckNsaWNrT3V0c2lkZX1cbiAgICAgICAgZm9ybWF0V2Vla051bWJlcj17dGhpcy5wcm9wcy5mb3JtYXRXZWVrTnVtYmVyfVxuICAgICAgICBoaWdobGlnaHREYXRlcz17dGhpcy5zdGF0ZS5oaWdobGlnaHREYXRlc31cbiAgICAgICAgaG9saWRheXM9e2dldEhvbGlkYXlzTWFwKHRoaXMubW9kaWZ5SG9saWRheXMoKSl9XG4gICAgICAgIGluY2x1ZGVEYXRlcz17dGhpcy5wcm9wcy5pbmNsdWRlRGF0ZXN9XG4gICAgICAgIGluY2x1ZGVEYXRlSW50ZXJ2YWxzPXt0aGlzLnByb3BzLmluY2x1ZGVEYXRlSW50ZXJ2YWxzfVxuICAgICAgICBpbmNsdWRlVGltZXM9e3RoaXMucHJvcHMuaW5jbHVkZVRpbWVzfVxuICAgICAgICBpbmplY3RUaW1lcz17dGhpcy5wcm9wcy5pbmplY3RUaW1lc31cbiAgICAgICAgaW5saW5lPXt0aGlzLnByb3BzLmlubGluZX1cbiAgICAgICAgc2hvdWxkRm9jdXNEYXlJbmxpbmU9e3RoaXMuc3RhdGUuc2hvdWxkRm9jdXNEYXlJbmxpbmV9XG4gICAgICAgIHBlZWtOZXh0TW9udGg9e3RoaXMucHJvcHMucGVla05leHRNb250aH1cbiAgICAgICAgc2hvd01vbnRoRHJvcGRvd249e3RoaXMucHJvcHMuc2hvd01vbnRoRHJvcGRvd259XG4gICAgICAgIHNob3dQcmV2aW91c01vbnRocz17dGhpcy5wcm9wcy5zaG93UHJldmlvdXNNb250aHN9XG4gICAgICAgIHVzZVNob3J0TW9udGhJbkRyb3Bkb3duPXt0aGlzLnByb3BzLnVzZVNob3J0TW9udGhJbkRyb3Bkb3dufVxuICAgICAgICBzaG93TW9udGhZZWFyRHJvcGRvd249e3RoaXMucHJvcHMuc2hvd01vbnRoWWVhckRyb3Bkb3dufVxuICAgICAgICBzaG93V2Vla051bWJlcnM9e3RoaXMucHJvcHMuc2hvd1dlZWtOdW1iZXJzfVxuICAgICAgICBzaG93WWVhckRyb3Bkb3duPXt0aGlzLnByb3BzLnNob3dZZWFyRHJvcGRvd259XG4gICAgICAgIHdpdGhQb3J0YWw9e3RoaXMucHJvcHMud2l0aFBvcnRhbH1cbiAgICAgICAgZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uPXt0aGlzLnByb3BzLmZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbn1cbiAgICAgICAgc2hvd0Rpc2FibGVkTW9udGhOYXZpZ2F0aW9uPXt0aGlzLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbn1cbiAgICAgICAgc2Nyb2xsYWJsZVllYXJEcm9wZG93bj17dGhpcy5wcm9wcy5zY3JvbGxhYmxlWWVhckRyb3Bkb3dufVxuICAgICAgICBzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd249e3RoaXMucHJvcHMuc2Nyb2xsYWJsZU1vbnRoWWVhckRyb3Bkb3dufVxuICAgICAgICB0b2RheUJ1dHRvbj17dGhpcy5wcm9wcy50b2RheUJ1dHRvbn1cbiAgICAgICAgd2Vla0xhYmVsPXt0aGlzLnByb3BzLndlZWtMYWJlbH1cbiAgICAgICAgb3V0c2lkZUNsaWNrSWdub3JlQ2xhc3M9e291dHNpZGVDbGlja0lnbm9yZUNsYXNzfVxuICAgICAgICBmaXhlZEhlaWdodD17dGhpcy5wcm9wcy5maXhlZEhlaWdodH1cbiAgICAgICAgbW9udGhzU2hvd249e3RoaXMucHJvcHMubW9udGhzU2hvd259XG4gICAgICAgIG1vbnRoU2VsZWN0ZWRJbj17dGhpcy5zdGF0ZS5tb250aFNlbGVjdGVkSW59XG4gICAgICAgIG9uRHJvcGRvd25Gb2N1cz17dGhpcy5oYW5kbGVEcm9wZG93bkZvY3VzfVxuICAgICAgICBvbk1vbnRoQ2hhbmdlPXt0aGlzLnByb3BzLm9uTW9udGhDaGFuZ2V9XG4gICAgICAgIG9uWWVhckNoYW5nZT17dGhpcy5wcm9wcy5vblllYXJDaGFuZ2V9XG4gICAgICAgIGRheUNsYXNzTmFtZT17dGhpcy5wcm9wcy5kYXlDbGFzc05hbWV9XG4gICAgICAgIHdlZWtEYXlDbGFzc05hbWU9e3RoaXMucHJvcHMud2Vla0RheUNsYXNzTmFtZX1cbiAgICAgICAgbW9udGhDbGFzc05hbWU9e3RoaXMucHJvcHMubW9udGhDbGFzc05hbWV9XG4gICAgICAgIHRpbWVDbGFzc05hbWU9e3RoaXMucHJvcHMudGltZUNsYXNzTmFtZX1cbiAgICAgICAgc2hvd0RhdGVTZWxlY3Q9e3RoaXMucHJvcHMuc2hvd0RhdGVTZWxlY3R9XG4gICAgICAgIHNob3dUaW1lU2VsZWN0PXt0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0fVxuICAgICAgICBzaG93VGltZVNlbGVjdE9ubHk9e3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5fVxuICAgICAgICBvblRpbWVDaGFuZ2U9e3RoaXMuaGFuZGxlVGltZUNoYW5nZX1cbiAgICAgICAgdGltZUZvcm1hdD17dGhpcy5wcm9wcy50aW1lRm9ybWF0fVxuICAgICAgICB0aW1lSW50ZXJ2YWxzPXt0aGlzLnByb3BzLnRpbWVJbnRlcnZhbHN9XG4gICAgICAgIG1pblRpbWU9e3RoaXMucHJvcHMubWluVGltZX1cbiAgICAgICAgbWF4VGltZT17dGhpcy5wcm9wcy5tYXhUaW1lfVxuICAgICAgICBleGNsdWRlVGltZXM9e3RoaXMucHJvcHMuZXhjbHVkZVRpbWVzfVxuICAgICAgICBmaWx0ZXJUaW1lPXt0aGlzLnByb3BzLmZpbHRlclRpbWV9XG4gICAgICAgIHRpbWVDYXB0aW9uPXt0aGlzLnByb3BzLnRpbWVDYXB0aW9ufVxuICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2FsZW5kYXJDbGFzc05hbWV9XG4gICAgICAgIGNvbnRhaW5lcj17dGhpcy5wcm9wcy5jYWxlbmRhckNvbnRhaW5lcn1cbiAgICAgICAgeWVhckl0ZW1OdW1iZXI9e3RoaXMucHJvcHMueWVhckl0ZW1OdW1iZXJ9XG4gICAgICAgIHllYXJEcm9wZG93bkl0ZW1OdW1iZXI9e3RoaXMucHJvcHMueWVhckRyb3Bkb3duSXRlbU51bWJlcn1cbiAgICAgICAgcHJldmlvdXNNb250aEFyaWFMYWJlbD17dGhpcy5wcm9wcy5wcmV2aW91c01vbnRoQXJpYUxhYmVsfVxuICAgICAgICBwcmV2aW91c01vbnRoQnV0dG9uTGFiZWw9e3RoaXMucHJvcHMucHJldmlvdXNNb250aEJ1dHRvbkxhYmVsfVxuICAgICAgICBuZXh0TW9udGhBcmlhTGFiZWw9e3RoaXMucHJvcHMubmV4dE1vbnRoQXJpYUxhYmVsfVxuICAgICAgICBuZXh0TW9udGhCdXR0b25MYWJlbD17dGhpcy5wcm9wcy5uZXh0TW9udGhCdXR0b25MYWJlbH1cbiAgICAgICAgcHJldmlvdXNZZWFyQXJpYUxhYmVsPXt0aGlzLnByb3BzLnByZXZpb3VzWWVhckFyaWFMYWJlbH1cbiAgICAgICAgcHJldmlvdXNZZWFyQnV0dG9uTGFiZWw9e3RoaXMucHJvcHMucHJldmlvdXNZZWFyQnV0dG9uTGFiZWx9XG4gICAgICAgIG5leHRZZWFyQXJpYUxhYmVsPXt0aGlzLnByb3BzLm5leHRZZWFyQXJpYUxhYmVsfVxuICAgICAgICBuZXh0WWVhckJ1dHRvbkxhYmVsPXt0aGlzLnByb3BzLm5leHRZZWFyQnV0dG9uTGFiZWx9XG4gICAgICAgIHRpbWVJbnB1dExhYmVsPXt0aGlzLnByb3BzLnRpbWVJbnB1dExhYmVsfVxuICAgICAgICBkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbj17dGhpcy5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbn1cbiAgICAgICAgcmVuZGVyQ3VzdG9tSGVhZGVyPXt0aGlzLnByb3BzLnJlbmRlckN1c3RvbUhlYWRlcn1cbiAgICAgICAgcG9wcGVyUHJvcHM9e3RoaXMucHJvcHMucG9wcGVyUHJvcHN9XG4gICAgICAgIHJlbmRlckRheUNvbnRlbnRzPXt0aGlzLnByb3BzLnJlbmRlckRheUNvbnRlbnRzfVxuICAgICAgICByZW5kZXJNb250aENvbnRlbnQ9e3RoaXMucHJvcHMucmVuZGVyTW9udGhDb250ZW50fVxuICAgICAgICByZW5kZXJRdWFydGVyQ29udGVudD17dGhpcy5wcm9wcy5yZW5kZXJRdWFydGVyQ29udGVudH1cbiAgICAgICAgcmVuZGVyWWVhckNvbnRlbnQ9e3RoaXMucHJvcHMucmVuZGVyWWVhckNvbnRlbnR9XG4gICAgICAgIG9uRGF5TW91c2VFbnRlcj17dGhpcy5wcm9wcy5vbkRheU1vdXNlRW50ZXJ9XG4gICAgICAgIG9uTW9udGhNb3VzZUxlYXZlPXt0aGlzLnByb3BzLm9uTW9udGhNb3VzZUxlYXZlfVxuICAgICAgICBvblllYXJNb3VzZUVudGVyPXt0aGlzLnByb3BzLm9uWWVhck1vdXNlRW50ZXJ9XG4gICAgICAgIG9uWWVhck1vdXNlTGVhdmU9e3RoaXMucHJvcHMub25ZZWFyTW91c2VMZWF2ZX1cbiAgICAgICAgc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2U9e3RoaXMucHJvcHMuc2VsZWN0c0Rpc2FibGVkRGF5c0luUmFuZ2V9XG4gICAgICAgIHNob3dUaW1lSW5wdXQ9e3RoaXMucHJvcHMuc2hvd1RpbWVJbnB1dH1cbiAgICAgICAgc2hvd01vbnRoWWVhclBpY2tlcj17dGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyfVxuICAgICAgICBzaG93RnVsbE1vbnRoWWVhclBpY2tlcj17dGhpcy5wcm9wcy5zaG93RnVsbE1vbnRoWWVhclBpY2tlcn1cbiAgICAgICAgc2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlcj17dGhpcy5wcm9wcy5zaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyfVxuICAgICAgICBzaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlcj17dGhpcy5wcm9wcy5zaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlcn1cbiAgICAgICAgc2hvd1llYXJQaWNrZXI9e3RoaXMucHJvcHMuc2hvd1llYXJQaWNrZXJ9XG4gICAgICAgIHNob3dRdWFydGVyWWVhclBpY2tlcj17dGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXJ9XG4gICAgICAgIHNob3dXZWVrUGlja2VyPXt0aGlzLnByb3BzLnNob3dXZWVrUGlja2VyfVxuICAgICAgICBleGNsdWRlU2Nyb2xsYmFyPXt0aGlzLnByb3BzLmV4Y2x1ZGVTY3JvbGxiYXJ9XG4gICAgICAgIGhhbmRsZU9uS2V5RG93bj17dGhpcy5wcm9wcy5vbktleURvd259XG4gICAgICAgIGhhbmRsZU9uRGF5S2V5RG93bj17dGhpcy5vbkRheUtleURvd259XG4gICAgICAgIGlzSW5wdXRGb2N1c2VkPXt0aGlzLnN0YXRlLmZvY3VzZWR9XG4gICAgICAgIGN1c3RvbVRpbWVJbnB1dD17dGhpcy5wcm9wcy5jdXN0b21UaW1lSW5wdXR9XG4gICAgICAgIHNldFByZVNlbGVjdGlvbj17dGhpcy5zZXRQcmVTZWxlY3Rpb259XG4gICAgICAgIHVzZVBvaW50ZXJFdmVudD17dGhpcy5wcm9wcy51c2VQb2ludGVyRXZlbnR9XG4gICAgICAgIHllYXJDbGFzc05hbWU9e3RoaXMucHJvcHMueWVhckNsYXNzTmFtZX1cbiAgICAgID5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICA8L1dyYXBwZWRDYWxlbmRhcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlckFyaWFMaXZlUmVnaW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZGF0ZUZvcm1hdCwgbG9jYWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlzQ29udGFpbnNUaW1lID1cbiAgICAgIHRoaXMucHJvcHMuc2hvd1RpbWVJbnB1dCB8fCB0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0O1xuICAgIGNvbnN0IGxvbmdEYXRlRm9ybWF0ID0gaXNDb250YWluc1RpbWUgPyBcIlBQUFBwXCIgOiBcIlBQUFBcIjtcbiAgICBsZXQgYXJpYUxpdmVNZXNzYWdlO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0c1JhbmdlKSB7XG4gICAgICBhcmlhTGl2ZU1lc3NhZ2UgPSBgU2VsZWN0ZWQgc3RhcnQgZGF0ZTogJHtzYWZlRGF0ZUZvcm1hdChcbiAgICAgICAgdGhpcy5wcm9wcy5zdGFydERhdGUsXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRlRm9ybWF0OiBsb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgICBsb2NhbGUsXG4gICAgICAgIH0sXG4gICAgICApfS4gJHtcbiAgICAgICAgdGhpcy5wcm9wcy5lbmREYXRlXG4gICAgICAgICAgPyBcIkVuZCBkYXRlOiBcIiArXG4gICAgICAgICAgICBzYWZlRGF0ZUZvcm1hdCh0aGlzLnByb3BzLmVuZERhdGUsIHtcbiAgICAgICAgICAgICAgZGF0ZUZvcm1hdDogbG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBcIlwiXG4gICAgICB9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KSB7XG4gICAgICAgIGFyaWFMaXZlTWVzc2FnZSA9IGBTZWxlY3RlZCB0aW1lOiAke3NhZmVEYXRlRm9ybWF0KFxuICAgICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgeyBkYXRlRm9ybWF0LCBsb2NhbGUgfSxcbiAgICAgICAgKX1gO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNob3dZZWFyUGlja2VyKSB7XG4gICAgICAgIGFyaWFMaXZlTWVzc2FnZSA9IGBTZWxlY3RlZCB5ZWFyOiAke3NhZmVEYXRlRm9ybWF0KFxuICAgICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgeyBkYXRlRm9ybWF0OiBcInl5eXlcIiwgbG9jYWxlIH0sXG4gICAgICAgICl9YDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyKSB7XG4gICAgICAgIGFyaWFMaXZlTWVzc2FnZSA9IGBTZWxlY3RlZCBtb250aDogJHtzYWZlRGF0ZUZvcm1hdChcbiAgICAgICAgICB0aGlzLnByb3BzLnNlbGVjdGVkLFxuICAgICAgICAgIHsgZGF0ZUZvcm1hdDogXCJNTU1NIHl5eXlcIiwgbG9jYWxlIH0sXG4gICAgICAgICl9YDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXIpIHtcbiAgICAgICAgYXJpYUxpdmVNZXNzYWdlID0gYFNlbGVjdGVkIHF1YXJ0ZXI6ICR7c2FmZURhdGVGb3JtYXQoXG4gICAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkYXRlRm9ybWF0OiBcInl5eXksIFFRUVwiLFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgIH0sXG4gICAgICAgICl9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyaWFMaXZlTWVzc2FnZSA9IGBTZWxlY3RlZCBkYXRlOiAke3NhZmVEYXRlRm9ybWF0KFxuICAgICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGF0ZUZvcm1hdDogbG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgKX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8c3BhblxuICAgICAgICByb2xlPVwiYWxlcnRcIlxuICAgICAgICBhcmlhLWxpdmU9XCJwb2xpdGVcIlxuICAgICAgICBjbGFzc05hbWU9XCJyZWFjdC1kYXRlcGlja2VyX19hcmlhLWxpdmVcIlxuICAgICAgPlxuICAgICAgICB7YXJpYUxpdmVNZXNzYWdlfVxuICAgICAgPC9zcGFuPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGF0ZUlucHV0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGNsc3godGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgIFtvdXRzaWRlQ2xpY2tJZ25vcmVDbGFzc106IHRoaXMuc3RhdGUub3BlbixcbiAgICB9KTtcblxuICAgIGNvbnN0IGN1c3RvbUlucHV0ID0gdGhpcy5wcm9wcy5jdXN0b21JbnB1dCB8fCA8aW5wdXQgdHlwZT1cInRleHRcIiAvPjtcbiAgICBjb25zdCBjdXN0b21JbnB1dFJlZiA9IHRoaXMucHJvcHMuY3VzdG9tSW5wdXRSZWYgfHwgXCJyZWZcIjtcbiAgICBjb25zdCBpbnB1dFZhbHVlID1cbiAgICAgIHR5cGVvZiB0aGlzLnByb3BzLnZhbHVlID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gdGhpcy5wcm9wcy52YWx1ZVxuICAgICAgICA6IHR5cGVvZiB0aGlzLnN0YXRlLmlucHV0VmFsdWUgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICA/IHRoaXMuc3RhdGUuaW5wdXRWYWx1ZVxuICAgICAgICAgIDogdGhpcy5wcm9wcy5zZWxlY3RzUmFuZ2VcbiAgICAgICAgICAgID8gc2FmZURhdGVSYW5nZUZvcm1hdChcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmVuZERhdGUsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiB0aGlzLnByb3BzLnNlbGVjdHNNdWx0aXBsZVxuICAgICAgICAgICAgICA/IHNhZmVNdWx0aXBsZURhdGVzRm9ybWF0KHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlcywgdGhpcy5wcm9wcylcbiAgICAgICAgICAgICAgOiBzYWZlRGF0ZUZvcm1hdCh0aGlzLnByb3BzLnNlbGVjdGVkLCB0aGlzLnByb3BzKTtcblxuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY3VzdG9tSW5wdXQsIHtcbiAgICAgIFtjdXN0b21JbnB1dFJlZl06IChpbnB1dCkgPT4ge1xuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICB9LFxuICAgICAgdmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMub25JbnB1dENsaWNrLFxuICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgIG9uS2V5RG93bjogdGhpcy5vbklucHV0S2V5RG93bixcbiAgICAgIGlkOiB0aGlzLnByb3BzLmlkLFxuICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgZm9ybTogdGhpcy5wcm9wcy5mb3JtLFxuICAgICAgYXV0b0ZvY3VzOiB0aGlzLnByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIHBsYWNlaG9sZGVyOiB0aGlzLnByb3BzLnBsYWNlaG9sZGVyVGV4dCxcbiAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgYXV0b0NvbXBsZXRlOiB0aGlzLnByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjdXN0b21JbnB1dC5wcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSksXG4gICAgICB0aXRsZTogdGhpcy5wcm9wcy50aXRsZSxcbiAgICAgIHJlYWRPbmx5OiB0aGlzLnByb3BzLnJlYWRPbmx5LFxuICAgICAgcmVxdWlyZWQ6IHRoaXMucHJvcHMucmVxdWlyZWQsXG4gICAgICB0YWJJbmRleDogdGhpcy5wcm9wcy50YWJJbmRleCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiB0aGlzLnByb3BzLmFyaWFEZXNjcmliZWRCeSxcbiAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IHRoaXMucHJvcHMuYXJpYUludmFsaWQsXG4gICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiB0aGlzLnByb3BzLmFyaWFMYWJlbGxlZEJ5LFxuICAgICAgXCJhcmlhLXJlcXVpcmVkXCI6IHRoaXMucHJvcHMuYXJpYVJlcXVpcmVkLFxuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlckNsZWFyQnV0dG9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzQ2xlYXJhYmxlLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgIGVuZERhdGUsXG4gICAgICBjbGVhckJ1dHRvblRpdGxlLFxuICAgICAgY2xlYXJCdXR0b25DbGFzc05hbWUgPSBcIlwiLFxuICAgICAgYXJpYUxhYmVsQ2xvc2UgPSBcIkNsb3NlXCIsXG4gICAgICBzZWxlY3RlZERhdGVzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChcbiAgICAgIGlzQ2xlYXJhYmxlICYmXG4gICAgICAoc2VsZWN0ZWQgIT0gbnVsbCB8fFxuICAgICAgICBzdGFydERhdGUgIT0gbnVsbCB8fFxuICAgICAgICBlbmREYXRlICE9IG51bGwgfHxcbiAgICAgICAgc2VsZWN0ZWREYXRlcz8ubGVuZ3RoKVxuICAgICkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICAgIFwicmVhY3QtZGF0ZXBpY2tlcl9fY2xvc2UtaWNvblwiLFxuICAgICAgICAgICAgY2xlYXJCdXR0b25DbGFzc05hbWUsXG4gICAgICAgICAgICB7IFwicmVhY3QtZGF0ZXBpY2tlcl9fY2xvc2UtaWNvbi0tZGlzYWJsZWRcIjogZGlzYWJsZWQgfSxcbiAgICAgICAgICApfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWxDbG9zZX1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xlYXJDbGlja31cbiAgICAgICAgICB0aXRsZT17Y2xlYXJCdXR0b25UaXRsZX1cbiAgICAgICAgICB0YWJJbmRleD17LTF9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVySW5wdXRDb250YWluZXIoKSB7XG4gICAgY29uc3QgeyBzaG93SWNvbiwgaWNvbiwgY2FsZW5kYXJJY29uQ2xhc3NuYW1lLCB0b2dnbGVDYWxlbmRhck9uSWNvbkNsaWNrIH0gPVxuICAgICAgdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IG9wZW4gfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2ByZWFjdC1kYXRlcGlja2VyX19pbnB1dC1jb250YWluZXIke1xuICAgICAgICAgIHNob3dJY29uID8gXCIgcmVhY3QtZGF0ZXBpY2tlcl9fdmlldy1jYWxlbmRhci1pY29uXCIgOiBcIlwiXG4gICAgICAgIH1gfVxuICAgICAgPlxuICAgICAgICB7c2hvd0ljb24gJiYgKFxuICAgICAgICAgIDxDYWxlbmRhckljb25cbiAgICAgICAgICAgIGljb249e2ljb259XG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake2NhbGVuZGFySWNvbkNsYXNzbmFtZX0gJHtcbiAgICAgICAgICAgICAgb3BlbiAmJiBcInJlYWN0LWRhdGVwaWNrZXItaWdub3JlLW9uY2xpY2tvdXRzaWRlXCJcbiAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgey4uLih0b2dnbGVDYWxlbmRhck9uSWNvbkNsaWNrXG4gICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy50b2dnbGVDYWxlbmRhcixcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogbnVsbCl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge3RoaXMuc3RhdGUuaXNSZW5kZXJBcmlhTGl2ZU1lc3NhZ2UgJiYgdGhpcy5yZW5kZXJBcmlhTGl2ZVJlZ2lvbigpfVxuICAgICAgICB7dGhpcy5yZW5kZXJEYXRlSW5wdXQoKX1cbiAgICAgICAge3RoaXMucmVuZGVyQ2xlYXJCdXR0b24oKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY2FsZW5kYXIgPSB0aGlzLnJlbmRlckNhbGVuZGFyKCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmxpbmUpIHJldHVybiBjYWxlbmRhcjtcblxuICAgIGlmICh0aGlzLnByb3BzLndpdGhQb3J0YWwpIHtcbiAgICAgIGxldCBwb3J0YWxDb250YWluZXIgPSB0aGlzLnN0YXRlLm9wZW4gPyAoXG4gICAgICAgIDxUYWJMb29wIGVuYWJsZVRhYkxvb3A9e3RoaXMucHJvcHMuZW5hYmxlVGFiTG9vcH0+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVhY3QtZGF0ZXBpY2tlcl9fcG9ydGFsXCJcbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5vblBvcnRhbEtleURvd259XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NhbGVuZGFyfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1RhYkxvb3A+XG4gICAgICApIDogbnVsbDtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUub3BlbiAmJiB0aGlzLnByb3BzLnBvcnRhbElkKSB7XG4gICAgICAgIHBvcnRhbENvbnRhaW5lciA9IChcbiAgICAgICAgICA8UG9ydGFsXG4gICAgICAgICAgICBwb3J0YWxJZD17dGhpcy5wcm9wcy5wb3J0YWxJZH1cbiAgICAgICAgICAgIHBvcnRhbEhvc3Q9e3RoaXMucHJvcHMucG9ydGFsSG9zdH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7cG9ydGFsQ29udGFpbmVyfVxuICAgICAgICAgIDwvUG9ydGFsPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHt0aGlzLnJlbmRlcklucHV0Q29udGFpbmVyKCl9XG4gICAgICAgICAge3BvcnRhbENvbnRhaW5lcn1cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8UG9wcGVyQ29tcG9uZW50XG4gICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5wb3BwZXJDbGFzc05hbWV9XG4gICAgICAgIHdyYXBwZXJDbGFzc05hbWU9e3RoaXMucHJvcHMud3JhcHBlckNsYXNzTmFtZX1cbiAgICAgICAgaGlkZVBvcHBlcj17IXRoaXMuaXNDYWxlbmRhck9wZW4oKX1cbiAgICAgICAgcG9ydGFsSWQ9e3RoaXMucHJvcHMucG9ydGFsSWR9XG4gICAgICAgIHBvcnRhbEhvc3Q9e3RoaXMucHJvcHMucG9ydGFsSG9zdH1cbiAgICAgICAgcG9wcGVyTW9kaWZpZXJzPXt0aGlzLnByb3BzLnBvcHBlck1vZGlmaWVyc31cbiAgICAgICAgdGFyZ2V0Q29tcG9uZW50PXt0aGlzLnJlbmRlcklucHV0Q29udGFpbmVyKCl9XG4gICAgICAgIHBvcHBlckNvbnRhaW5lcj17dGhpcy5wcm9wcy5wb3BwZXJDb250YWluZXJ9XG4gICAgICAgIHBvcHBlckNvbXBvbmVudD17Y2FsZW5kYXJ9XG4gICAgICAgIHBvcHBlclBsYWNlbWVudD17dGhpcy5wcm9wcy5wb3BwZXJQbGFjZW1lbnR9XG4gICAgICAgIHBvcHBlclByb3BzPXt0aGlzLnByb3BzLnBvcHBlclByb3BzfVxuICAgICAgICBwb3BwZXJPbktleURvd249e3RoaXMub25Qb3BwZXJLZXlEb3dufVxuICAgICAgICBlbmFibGVUYWJMb29wPXt0aGlzLnByb3BzLmVuYWJsZVRhYkxvb3B9XG4gICAgICAgIHNob3dBcnJvdz17dGhpcy5wcm9wcy5zaG93UG9wcGVyQXJyb3d9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgUFJFU0VMRUNUX0NIQU5HRV9WSUFfSU5QVVQgPSBcImlucHV0XCI7XG5jb25zdCBQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9OQVZJR0FURSA9IFwibmF2aWdhdGVcIjtcbiJdLCJuYW1lcyI6WyJERUZBVUxUX1lFQVJfSVRFTV9OVU1CRVIiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsIm5ld0RhdGUiLCJ2YWx1ZSIsImQiLCJTdHJpbmciLCJwYXJzZUlTTyIsInRvRGF0ZSIsIkRhdGUiLCJpc1ZhbGlkIiwicGFyc2VEYXRlIiwiZGF0ZUZvcm1hdCIsImxvY2FsZSIsInN0cmljdFBhcnNpbmciLCJtaW5EYXRlIiwicGFyc2VkRGF0ZSIsImxvY2FsZU9iamVjdCIsImdldExvY2FsZU9iamVjdCIsImdldERlZmF1bHRMb2NhbGUiLCJzdHJpY3RQYXJzaW5nVmFsdWVNYXRjaCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJkZiIsInRyeVBhcnNlRGF0ZSIsInBhcnNlIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsImZvcm1hdERhdGUiLCJtYXRjaCIsIm1hcCIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImxvbmdGb3JtYXR0ZXJzIiwiZm9ybWF0TG9uZyIsImpvaW4iLCJsZW5ndGgiLCJzbGljZSIsImRhdGUiLCJpc1ZhbGlkRGF0ZSIsImlzQmVmb3JlIiwiZm9ybWF0U3RyIiwiZm9ybWF0IiwibG9jYWxlT2JqIiwiY29uc29sZSIsIndhcm4iLCJjb25jYXQiLCJzYWZlRGF0ZUZvcm1hdCIsIl9yZWYiLCJzYWZlRGF0ZVJhbmdlRm9ybWF0Iiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInByb3BzIiwiZm9ybWF0dGVkU3RhcnREYXRlIiwiZm9ybWF0dGVkRW5kRGF0ZSIsInNhZmVNdWx0aXBsZURhdGVzRm9ybWF0IiwiZGF0ZXMiLCJmb3JtYXR0ZWRGaXJzdERhdGUiLCJmb3JtYXR0ZWRTZWNvbmREYXRlIiwiZXh0cmFEYXRlc0NvdW50Iiwic2V0VGltZSIsIl9yZWYyIiwiX3JlZjIkaG91ciIsImhvdXIiLCJfcmVmMiRtaW51dGUiLCJtaW51dGUiLCJfcmVmMiRzZWNvbmQiLCJzZWNvbmQiLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJzZXRTZWNvbmRzIiwiZ2V0V2VlayIsImdldElTT1dlZWsiLCJnZXREYXlPZldlZWtDb2RlIiwiZGF5IiwiZ2V0U3RhcnRPZkRheSIsInN0YXJ0T2ZEYXkiLCJnZXRTdGFydE9mV2VlayIsImNhbGVuZGFyU3RhcnREYXkiLCJzdGFydE9mV2VlayIsIndlZWtTdGFydHNPbiIsImdldFN0YXJ0T2ZNb250aCIsInN0YXJ0T2ZNb250aCIsImdldFN0YXJ0T2ZZZWFyIiwic3RhcnRPZlllYXIiLCJnZXRTdGFydE9mUXVhcnRlciIsInN0YXJ0T2ZRdWFydGVyIiwiZ2V0U3RhcnRPZlRvZGF5IiwiZ2V0RW5kT2ZXZWVrIiwiZW5kT2ZXZWVrIiwiaXNTYW1lWWVhciIsImRhdGUxIiwiZGF0ZTIiLCJkZklzU2FtZVllYXIiLCJpc1NhbWVNb250aCIsImRmSXNTYW1lTW9udGgiLCJpc1NhbWVRdWFydGVyIiwiZGZJc1NhbWVRdWFydGVyIiwiaXNTYW1lRGF5IiwiZGZJc1NhbWVEYXkiLCJpc0VxdWFsIiwiZGZJc0VxdWFsIiwiaXNEYXlJblJhbmdlIiwidmFsaWQiLCJzdGFydCIsImVuZCIsImVuZE9mRGF5IiwiaXNXaXRoaW5JbnRlcnZhbCIsImVyciIsInJlZ2lzdGVyTG9jYWxlIiwibG9jYWxlTmFtZSIsImxvY2FsZURhdGEiLCJzY29wZSIsIndpbmRvdyIsImdsb2JhbFRoaXMiLCJfX2xvY2FsZURhdGFfXyIsInNldERlZmF1bHRMb2NhbGUiLCJfX2xvY2FsZUlkX18iLCJsb2NhbGVTcGVjIiwiZ2V0Rm9ybWF0dGVkV2Vla2RheUluTG9jYWxlIiwiZm9ybWF0RnVuYyIsImdldFdlZWtkYXlNaW5JbkxvY2FsZSIsImdldFdlZWtkYXlTaG9ydEluTG9jYWxlIiwiZ2V0TW9udGhJbkxvY2FsZSIsIm1vbnRoIiwic2V0TW9udGgiLCJnZXRNb250aFNob3J0SW5Mb2NhbGUiLCJnZXRRdWFydGVyU2hvcnRJbkxvY2FsZSIsInF1YXJ0ZXIiLCJzZXRRdWFydGVyIiwiaXNEYXlEaXNhYmxlZCIsIl9yZWYzIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwibWF4RGF0ZSIsImV4Y2x1ZGVEYXRlcyIsImV4Y2x1ZGVEYXRlSW50ZXJ2YWxzIiwiaW5jbHVkZURhdGVzIiwiaW5jbHVkZURhdGVJbnRlcnZhbHMiLCJmaWx0ZXJEYXRlIiwiaXNPdXRPZkJvdW5kcyIsInNvbWUiLCJleGNsdWRlRGF0ZSIsIl9yZWY0IiwiaW5jbHVkZURhdGUiLCJfcmVmNSIsImlzRGF5RXhjbHVkZWQiLCJfcmVmNiIsIl9yZWY3IiwiaXNNb250aERpc2FibGVkIiwiX3JlZjgiLCJlbmRPZk1vbnRoIiwiaXNNb250aEluUmFuZ2UiLCJtIiwic3RhcnREYXRlWWVhciIsImdldFllYXIiLCJzdGFydERhdGVNb250aCIsImdldE1vbnRoIiwiZW5kRGF0ZVllYXIiLCJlbmREYXRlTW9udGgiLCJkYXlZZWFyIiwiaXNRdWFydGVyRGlzYWJsZWQiLCJfcmVmOSIsImlzWWVhckluUmFuZ2UiLCJ5ZWFyIiwic3RhcnRZZWFyIiwiZW5kWWVhciIsImlzWWVhckRpc2FibGVkIiwiX3JlZjEwIiwiZW5kT2ZZZWFyIiwiaXNRdWFydGVySW5SYW5nZSIsInEiLCJzdGFydERhdGVRdWFydGVyIiwiZ2V0UXVhcnRlciIsImVuZERhdGVRdWFydGVyIiwiX3JlZjExIiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIiwiaXNUaW1lSW5MaXN0IiwidGltZSIsInRpbWVzIiwibGlzdFRpbWUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiaXNUaW1lRGlzYWJsZWQiLCJfcmVmMTIiLCJleGNsdWRlVGltZXMiLCJpbmNsdWRlVGltZXMiLCJmaWx0ZXJUaW1lIiwiaXNUaW1lSW5EaXNhYmxlZFJhbmdlIiwiX3JlZjEzIiwibWluVGltZSIsIm1heFRpbWUiLCJFcnJvciIsImJhc2VUaW1lIiwibWluIiwibWF4IiwibW9udGhEaXNhYmxlZEJlZm9yZSIsIl9yZWYxNCIsInByZXZpb3VzTW9udGgiLCJzdWJNb250aHMiLCJkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyIsImV2ZXJ5IiwibW9udGhEaXNhYmxlZEFmdGVyIiwiX3JlZjE1IiwibmV4dE1vbnRoIiwiYWRkTW9udGhzIiwicXVhcnRlckRpc2FibGVkQmVmb3JlIiwiX3JlZjE2IiwiZmlyc3REYXRlT2ZZZWFyIiwicHJldmlvdXNRdWFydGVyIiwic3ViUXVhcnRlcnMiLCJkaWZmZXJlbmNlSW5DYWxlbmRhclF1YXJ0ZXJzIiwicXVhcnRlckRpc2FibGVkQWZ0ZXIiLCJfcmVmMTciLCJsYXN0RGF0ZU9mWWVhciIsIm5leHRRdWFydGVyIiwiYWRkUXVhcnRlcnMiLCJ5ZWFyRGlzYWJsZWRCZWZvcmUiLCJfcmVmMTgiLCJwcmV2aW91c1llYXIiLCJzdWJZZWFycyIsImRpZmZlcmVuY2VJbkNhbGVuZGFyWWVhcnMiLCJ5ZWFyc0Rpc2FibGVkQmVmb3JlIiwiX3JlZjE5IiwiX3JlZjE5JHllYXJJdGVtTnVtYmVyIiwieWVhckl0ZW1OdW1iZXIiLCJfZ2V0WWVhcnNQZXJpb2QiLCJnZXRZZWFyc1BlcmlvZCIsImVuZFBlcmlvZCIsIm1pbkRhdGVZZWFyIiwieWVhckRpc2FibGVkQWZ0ZXIiLCJfcmVmMjAiLCJuZXh0WWVhciIsImFkZFllYXJzIiwieWVhcnNEaXNhYmxlZEFmdGVyIiwiX3JlZjIxIiwiX3JlZjIxJHllYXJJdGVtTnVtYmVyIiwiX2dldFllYXJzUGVyaW9kMiIsInN0YXJ0UGVyaW9kIiwibWF4RGF0ZVllYXIiLCJnZXRFZmZlY3RpdmVNaW5EYXRlIiwiX3JlZjIyIiwibWluRGF0ZXMiLCJmaWx0ZXIiLCJnZXRFZmZlY3RpdmVNYXhEYXRlIiwiX3JlZjIzIiwibWF4RGF0ZXMiLCJnZXRIaWdodExpZ2h0RGF5c01hcCIsImhpZ2hsaWdodERhdGVzIiwiZGVmYXVsdENsYXNzTmFtZSIsImRhdGVDbGFzc2VzIiwiTWFwIiwiaSIsImxlbiIsIm9iaiIsImlzRGF0ZSIsImtleSIsImNsYXNzTmFtZXNBcnIiLCJnZXQiLCJpbmNsdWRlcyIsInB1c2giLCJzZXQiLCJfdHlwZW9mIiwia2V5cyIsIk9iamVjdCIsImNsYXNzTmFtZSIsImFyck9mRGF0ZXMiLCJjb25zdHJ1Y3RvciIsImsiLCJhcnJheXNBcmVFcXVhbCIsImFycmF5MSIsImFycmF5MiIsImluZGV4IiwiZ2V0SG9saWRheXNNYXAiLCJob2xpZGF5RGF0ZXMiLCJob2xpZGF5IiwiZGF0ZU9iaiIsImhvbGlkYXlOYW1lIiwiY2xhc3NOYW1lc09iaiIsImhvbGlkYXlOYW1lQXJyIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwidGltZXNUb0luamVjdEFmdGVyIiwiY3VycmVudFRpbWUiLCJjdXJyZW50TXVsdGlwbGllciIsImludGVydmFscyIsImluamVjdGVkVGltZXMiLCJsIiwiaW5qZWN0ZWRUaW1lIiwiYWRkSG91cnMiLCJhZGRNaW51dGVzIiwiYWRkU2Vjb25kcyIsIm5leHRUaW1lIiwiaXNBZnRlciIsImFkZFplcm8iLCJNYXRoIiwiY2VpbCIsImdldEhvdXJzSW5EYXkiLCJnZXRGdWxsWWVhciIsImdldERhdGUiLCJzdGFydE9mVGhlTmV4dERheSIsInJvdW5kIiwic3RhcnRPZk1pbnV0ZSIsInNlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRUaW1lIiwiaXNTYW1lTWludXRlIiwiZDEiLCJkMiIsImdldE1pZG5pZ2h0RGF0ZSIsImRhdGVXaXRob3V0VGltZSIsImlzRGF0ZUJlZm9yZSIsImRhdGVUb0NvbXBhcmUiLCJtaWRuaWdodERhdGUiLCJtaWRuaWdodERhdGVUb0NvbXBhcmUiLCJpc1NwYWNlS2V5RG93biIsImV2ZW50IiwiU1BBQ0VfS0VZIiwiZ2VuZXJhdGVZZWFycyIsIm5vT2ZZZWFyIiwibGlzdCIsIm5ld1llYXIiLCJpc0luUmFuZ2UiLCJZZWFyRHJvcGRvd25PcHRpb25zIiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NhbGxTdXBlciIsIl9kZWZpbmVQcm9wZXJ0eSIsInNlbGVjdGVkWWVhciIsIm9wdGlvbnMiLCJzdGF0ZSIsInllYXJzTGlzdCIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsIm9uQ2xpY2siLCJvbkNoYW5nZSIsImJpbmQiLCJtaW5ZZWFyIiwibWF4WWVhciIsImZpbmQiLCJ1bnNoaWZ0IiwiaW5jcmVtZW50WWVhcnMiLCJkZWNyZW1lbnRZZWFycyIsIm9uQ2FuY2VsIiwiYW1vdW50IiwieWVhcnMiLCJzZXRTdGF0ZSIsInNoaWZ0WWVhcnMiLCJ5ZWFyRHJvcGRvd25JdGVtTnVtYmVyIiwic2Nyb2xsYWJsZVllYXJEcm9wZG93biIsImRyb3Bkb3duUmVmIiwiY3JlYXRlUmVmIiwiX2luaGVyaXRzIiwiX2NyZWF0ZUNsYXNzIiwiY29tcG9uZW50RGlkTW91bnQiLCJkcm9wZG93bkN1cnJlbnQiLCJjdXJyZW50IiwiZHJvcGRvd25DdXJyZW50Q2hpbGRyZW4iLCJjaGlsZHJlbiIsImZyb20iLCJzZWxlY3RlZFllYXJPcHRpb25FbCIsImNoaWxkRWwiLCJhcmlhU2VsZWN0ZWQiLCJzY3JvbGxUb3AiLCJvZmZzZXRUb3AiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJyZW5kZXIiLCJkcm9wZG93bkNsYXNzIiwiY2xzeCIsInJlZiIsInJlbmRlck9wdGlvbnMiLCJDb21wb25lbnQiLCJXcmFwcGVkWWVhckRyb3Bkb3duT3B0aW9ucyIsIm9uQ2xpY2tPdXRzaWRlIiwiWWVhckRyb3Bkb3duIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiZHJvcGRvd25WaXNpYmxlIiwiZSIsInRhcmdldCIsIm9uU2VsZWN0Q2hhbmdlIiwicmVuZGVyU2VsZWN0T3B0aW9ucyIsInZpc2libGUiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJ0b2dnbGVEcm9wZG93biIsInJlc3VsdCIsInJlbmRlclJlYWRWaWV3IiwicmVuZGVyRHJvcGRvd24iLCJhZGp1c3REYXRlT25DaGFuZ2UiLCJoYW5kbGVZZWFyQ2hhbmdlIiwib25TZWxlY3QiLCJzZXRPcGVuIiwicmVuZGVyZWREcm9wZG93biIsImRyb3Bkb3duTW9kZSIsInJlbmRlclNjcm9sbE1vZGUiLCJyZW5kZXJTZWxlY3RNb2RlIiwiTW9udGhEcm9wZG93bk9wdGlvbnMiLCJtb250aE5hbWVzIiwiaXNTZWxlY3RlZE1vbnRoIiwiV3JhcHBlZE1vbnRoRHJvcGRvd25PcHRpb25zIiwiTW9udGhEcm9wZG93biIsIk0iLCJfdGhpczIiLCJ1c2VTaG9ydE1vbnRoSW5Ecm9wZG93biIsInV0aWxzIiwiZ2VuZXJhdGVNb250aFllYXJzIiwiY3VyckRhdGUiLCJsYXN0RGF0ZSIsIk1vbnRoWWVhckRyb3Bkb3duT3B0aW9ucyIsIm1vbnRoWWVhcnNMaXN0IiwibW9udGhZZWFyIiwibW9udGhZZWFyUG9pbnQiLCJpc1NhbWVNb250aFllYXIiLCJzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd24iLCJXcmFwcGVkTW9udGhZZWFyRHJvcGRvd25PcHRpb25zIiwiTW9udGhZZWFyRHJvcGRvd24iLCJ0aW1lUG9pbnQiLCJ5ZWFyTW9udGgiLCJjaGFuZ2VkRGF0ZSIsInBhcnNlSW50IiwiRGF5IiwiaXNEaXNhYmxlZCIsIm9uTW91c2VFbnRlciIsImV2ZW50S2V5IiwicHJldmVudERlZmF1bHQiLCJoYW5kbGVPbktleURvd24iLCJvdGhlciIsIl90aGlzJHByb3BzJHNlbGVjdGVkRCIsImRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uIiwiaXNTZWxlY3RlZERhdGUiLCJzZWxlY3RzTXVsdGlwbGUiLCJzZWxlY3RlZERhdGVzIiwiaXNTYW1lRGF5T3JXZWVrIiwic2VsZWN0ZWQiLCJwcmVTZWxlY3Rpb24iLCJzaG93V2Vla1BpY2tlciIsImlzU2FtZVdlZWsiLCJfdGhpcyRwcm9wcyIsImRheVN0ciIsIl90aGlzJHByb3BzMiIsImhvbGlkYXlzIiwiaGFzIiwiX3RoaXMkcHJvcHMzIiwiX3RoaXMkcHJvcHMkc2VsZWN0aW5nIiwiX3RoaXMkcHJvcHM0Iiwic2VsZWN0c1N0YXJ0Iiwic2VsZWN0c0VuZCIsInNlbGVjdHNSYW5nZSIsInNlbGVjdHNEaXNhYmxlZERheXNJblJhbmdlIiwic2VsZWN0aW5nRGF0ZSIsIl90aGlzJHByb3BzJHNlbGVjdGluZzIiLCJpc0luU2VsZWN0aW5nUmFuZ2UiLCJfdGhpcyRwcm9wczUiLCJfdGhpcyRwcm9wcyRzZWxlY3RpbmczIiwiX3RoaXMkcHJvcHM2IiwiX3RoaXMkcHJvcHM3IiwiX3RoaXMkcHJvcHM4Iiwid2Vla2RheSIsImdldERheSIsIl90aGlzJHByb3BzJHNlbGVjdGVkRDIiLCJkYXlDbGFzc05hbWUiLCJpc0V4Y2x1ZGVkIiwiaXNTZWxlY3RlZCIsImlzS2V5Ym9hcmRTZWxlY3RlZCIsImlzUmFuZ2VTdGFydCIsImlzUmFuZ2VFbmQiLCJpc1NlbGVjdGluZ1JhbmdlU3RhcnQiLCJpc1NlbGVjdGluZ1JhbmdlRW5kIiwiaXNDdXJyZW50RGF5IiwiaXNXZWVrZW5kIiwiaXNBZnRlck1vbnRoIiwiaXNCZWZvcmVNb250aCIsImdldEhpZ2hMaWdodGVkQ2xhc3MiLCJnZXRIb2xpZGF5c0NsYXNzIiwiX3RoaXMkcHJvcHM5IiwiX3RoaXMkcHJvcHM5JGFyaWFMYWJlIiwiYXJpYUxhYmVsUHJlZml4V2hlbkVuYWJsZWQiLCJfdGhpcyRwcm9wczkkYXJpYUxhYmUyIiwiYXJpYUxhYmVsUHJlZml4V2hlbkRpc2FibGVkIiwicHJlZml4IiwiX3RoaXMkcHJvcHMxMCIsIl90aGlzJHByb3BzMTAkaG9saWRheSIsImNvbXBhcmVEdCIsInRpdGxlcyIsImFwcGx5IiwiaG9saWRheU5hbWVzIiwibWVzc2FnZSIsInNlbGVjdGVkRGF5IiwicHJlU2VsZWN0aW9uRGF5IiwidGFiSW5kZXgiLCJzaG93V2Vla051bWJlciIsImlzU3RhcnRPZldlZWsiLCJfdGhpcyRkYXlFbCRjdXJyZW50IiwicHJldlByb3BzIiwic2hvdWxkRm9jdXNEYXkiLCJnZXRUYWJJbmRleCIsImlzSW5wdXRGb2N1c2VkIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsImlubGluZSIsInNob3VsZEZvY3VzRGF5SW5saW5lIiwiY29udGFpbmVyUmVmIiwiY29udGFpbnMiLCJjbGFzc0xpc3QiLCJtb250aFNob3dzRHVwbGljYXRlRGF5c0VuZCIsIm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQiLCJkYXlFbCIsImZvY3VzIiwicHJldmVudFNjcm9sbCIsInJlbmRlckRheUNvbnRlbnRzIiwiZ2V0Q2xhc3NOYW1lcyIsIm9uS2V5RG93biIsImhhbmRsZUNsaWNrIiwidXNlUG9pbnRlckV2ZW50IiwiaGFuZGxlTW91c2VFbnRlciIsIm9uUG9pbnRlckVudGVyIiwiZ2V0QXJpYUxhYmVsIiwicm9sZSIsInRpdGxlIiwiZ2V0VGl0bGUiLCJoYW5kbGVGb2N1c0RheSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIldlZWtOdW1iZXIiLCJzaG91bGRGb2N1c1dlZWtOdW1iZXIiLCJ3ZWVrTnVtYmVyRWwiLCJoYW5kbGVGb2N1c1dlZWtOdW1iZXIiLCJ3ZWVrTnVtYmVyIiwiX3RoaXMkcHJvcHMkYXJpYUxhYmVsIiwiYXJpYUxhYmVsUHJlZml4Iiwid2Vla051bWJlckNsYXNzZXMiLCJXZWVrIiwib25EYXlDbGljayIsIm9uRGF5TW91c2VFbnRlciIsIm9uV2Vla1NlbGVjdCIsImhhbmRsZURheUNsaWNrIiwic2hvdWxkQ2xvc2VPblNlbGVjdCIsImZvcm1hdFdlZWtOdW1iZXIiLCJkYXlzIiwib25DbGlja0FjdGlvbiIsImhhbmRsZVdlZWtDbGljayIsIm9mZnNldCIsImFkZERheXMiLCJjaG9vc2VEYXlBcmlhTGFiZWxQcmVmaXgiLCJkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeCIsInZhbHVlT2YiLCJoYW5kbGVEYXlNb3VzZUVudGVyIiwicmVuZGVyRGF5cyIsIkZJWEVEX0hFSUdIVF9TVEFOREFSRF9XRUVLX0NPVU5UIiwiTU9OVEhfQ09MVU1OU19MQVlPVVQiLCJUV09fQ09MVU1OUyIsIlRIUkVFX0NPTFVNTlMiLCJGT1VSX0NPTFVNTlMiLCJNT05USF9DT0xVTU5TIiwiZ3JpZCIsInZlcnRpY2FsTmF2aWdhdGlvbk9mZnNldCIsIk1PTlRIX05BVklHQVRJT05fSE9SSVpPTlRBTF9PRkZTRVQiLCJnZXRNb250aENvbHVtbnNMYXlvdXQiLCJzaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlciIsInNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXIiLCJNb250aCIsIm9yZGVySW5EaXNwbGF5Iiwib25Nb3VzZUxlYXZlIiwiaXNJblNlbGVjdGluZ1JhbmdlTW9udGgiLCJfbW9udGgiLCJfdGhpcyRwcm9wcyRzZWxlY3Rpbmc0Iiwid2Vla3MiLCJpc0ZpeGVkSGVpZ2h0IiwiZml4ZWRIZWlnaHQiLCJicmVha0FmdGVyTmV4dFB1c2giLCJjdXJyZW50V2Vla1N0YXJ0Iiwid2Vla0FyaWFMYWJlbFByZWZpeCIsInNob3dXZWVrTnVtYmVycyIsImlzRml4ZWRBbmRGaW5hbFdlZWsiLCJpc05vbkZpeGVkQW5kT3V0T2ZNb250aCIsImlzV2Vla0luTW9udGgiLCJwZWVrTmV4dE1vbnRoIiwibGFiZWxEYXRlIiwibmV3TW9udGgiLCJzZXRQcmVTZWxlY3Rpb24iLCJNT05USF9SRUZTIiwiaGFuZGxlT25Nb250aEtleURvd24iLCJtb250aENvbHVtbnNMYXlvdXQiLCJ2ZXJ0aWNhbE9mZnNldCIsIm1vbnRoc0dyaWQiLCJvbk1vbnRoQ2xpY2siLCJoYW5kbGVNb250aE5hdmlnYXRpb24iLCJuZXdRdWFydGVyIiwiUVVBUlRFUl9SRUZTIiwib25RdWFydGVyQ2xpY2siLCJoYW5kbGVRdWFydGVyTmF2aWdhdGlvbiIsIl90aGlzJHByb3BzMTEiLCJtb250aENsYXNzTmFtZSIsIl9tb250aENsYXNzTmFtZSIsImlzUmFuZ2VTdGFydE1vbnRoIiwiaXNSYW5nZUVuZE1vbnRoIiwiaXNTZWxlY3RpbmdNb250aFJhbmdlU3RhcnQiLCJpc1NlbGVjdGluZ01vbnRoUmFuZ2VFbmQiLCJpc0N1cnJlbnRNb250aCIsInByZVNlbGVjdGVkTW9udGgiLCJwcmVTZWxlY3RlZFF1YXJ0ZXIiLCJfdGhpcyRwcm9wczEyIiwiX3RoaXMkcHJvcHMxMiRjaG9vc2VEIiwiX3RoaXMkcHJvcHMxMiRkaXNhYmxlIiwiX3RoaXMkcHJvcHMxMyIsImlzU2VsZWN0ZWRRdWFydGVyIiwiaXNJblNlbGVjdGluZ1JhbmdlUXVhcnRlciIsImlzUmFuZ2VTdGFydFF1YXJ0ZXIiLCJpc1JhbmdlRW5kUXVhcnRlciIsIl90aGlzJHByb3BzMTQiLCJzaG93RnVsbE1vbnRoWWVhclBpY2tlciIsInJlbmRlck1vbnRoQ29udGVudCIsInNob3J0TW9udGhUZXh0IiwiZnVsbE1vbnRoVGV4dCIsIl90aGlzJHByb3BzMTUiLCJyZW5kZXJRdWFydGVyQ29udGVudCIsInNob3J0UXVhcnRlciIsIl90aGlzJHByb3BzMTYiLCJtb250aENvbHVtbnMiLCJqIiwiZXYiLCJvbk1vbnRoS2V5RG93biIsIm9uTW9udGhNb3VzZUVudGVyIiwiZ2V0TW9udGhDbGFzc05hbWVzIiwiZ2V0TW9udGhDb250ZW50IiwiX3RoaXMkcHJvcHMxNyIsInF1YXJ0ZXJzIiwib25RdWFydGVyS2V5RG93biIsIm9uUXVhcnRlck1vdXNlRW50ZXIiLCJnZXRRdWFydGVyQ2xhc3NOYW1lcyIsImdldFF1YXJ0ZXJUYWJJbmRleCIsImlzQ3VycmVudFF1YXJ0ZXIiLCJnZXRRdWFydGVyQ29udGVudCIsIl90aGlzJHByb3BzMTgiLCJzaG93TW9udGhZZWFyUGlja2VyIiwic2hvd1F1YXJ0ZXJZZWFyUGlja2VyIiwiX3RoaXMkcHJvcHMxOSIsIl90aGlzJHByb3BzMTkkYXJpYUxhYiIsImZvcm1hdHRlZEFyaWFMYWJlbFByZWZpeCIsInRyaW0iLCJoYW5kbGVNb3VzZUxlYXZlIiwib25Qb2ludGVyTGVhdmUiLCJyZW5kZXJNb250aHMiLCJyZW5kZXJRdWFydGVycyIsInJlbmRlcldlZWtzIiwiVGltZSIsImhlaWdodCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNlbnRlckxpIiwiY2FsY0NlbnRlclBvc2l0aW9uIiwibW9udGhSZWYiLCJoZWFkZXIiLCJjbGFzc2VzIiwidGltZUNsYXNzTmFtZSIsImlzU2VsZWN0ZWRUaW1lIiwiaXNEaXNhYmxlZFRpbWUiLCJpbmplY3RUaW1lcyIsInByZXZpb3VzU2libGluZyIsIm5leHRTaWJsaW5nIiwiYWN0aXZlRGF0ZSIsIm9wZW5Ub0RhdGUiLCJiYXNlIiwic29ydGVkSW5qZWN0VGltZXMiLCJzb3J0IiwiYSIsImIiLCJtaW51dGVzSW5EYXkiLCJtdWx0aXBsaWVyIiwidGltZXNUb0luamVjdCIsInRpbWVUb0ZvY3VzIiwicmVkdWNlIiwicHJldiIsImxpQ2xhc3NlcyIsImxpIiwic2Nyb2xsVG9UaGVTZWxlY3RlZFRpbWUiLCJ0b2RheUJ1dHRvbiIsInNob3dUaW1lU2VsZWN0T25seSIsInRpbWVDYXB0aW9uIiwicmVuZGVyVGltZXMiLCJvblRpbWVDaGFuZ2UiLCJsaXN0SGVpZ2h0IiwiY2VudGVyTGlSZWYiLCJWRVJUSUNBTF9OQVZJR0FUSU9OX09GRlNFVCIsIlllYXIiLCJyZWZJbmRleCIsIndhaXRGb3JSZVJlbmRlciIsIllFQVJfUkVGUyIsIl91dGlscyRnZXRZZWFyc1BlcmlvZCIsInVwZGF0ZUZvY3VzT25QYWdpbmF0ZSIsImFicyIsInkiLCJfeWVhciIsImhhbmRsZVllYXJDbGljayIsIm9uWWVhckNsaWNrIiwiaGFuZGxlWWVhck5hdmlnYXRpb24iLCJfdXRpbHMkZ2V0WWVhcnNQZXJpb2QyIiwibGVmdE92ZXJPZmZzZXQiLCJfdXRpbHMkZ2V0WWVhcnNQZXJpb2QzIiwieWVhckNsYXNzTmFtZSIsImlzQ3VycmVudFllYXIiLCJwcmVTZWxlY3RlZCIsInJlbmRlclllYXJDb250ZW50Iiwib25ZZWFyTW91c2VFbnRlciIsIm9uWWVhck1vdXNlTGVhdmUiLCJfdXRpbHMkZ2V0WWVhcnNQZXJpb2Q0IiwiX2xvb3AiLCJvblllYXJLZXlEb3duIiwiZ2V0WWVhclRhYkluZGV4IiwiZ2V0WWVhckNsYXNzTmFtZXMiLCJnZXRZZWFyQ29udGVudCIsImdldFllYXJDb250YWluZXJDbGFzc05hbWVzIiwiY2xlYXJTZWxlY3RpbmdEYXRlIiwiaW5wdXRUaW1lIiwicHJvcERhdGUiLCJpc1Byb3BEYXRlVmFsaWQiLCJpc05hTiIsInNwbGl0IiwidGltZVN0cmluZyIsImN1c3RvbVRpbWVJbnB1dCIsImNsb25lRWxlbWVudCIsInR5cGUiLCJwbGFjZWhvbGRlciIsIm5hbWUiLCJyZXF1aXJlZCIsInRpbWVJbnB1dExhYmVsIiwicmVuZGVyVGltZUlucHV0IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiQ2FsZW5kYXJDb250YWluZXIiLCJfcmVmJHNob3dUaW1lU2VsZWN0T24iLCJfcmVmJHNob3dUaW1lIiwic2hvd1RpbWUiLCJhcmlhTGFiZWwiLCJEUk9QRE9XTl9GT0NVU19DTEFTU05BTUVTIiwiaXNEcm9wZG93blNlbGVjdCIsImVsZW1lbnQiLCJjbGFzc05hbWVzIiwidGVzdENsYXNzbmFtZSIsImluZGV4T2YiLCJDYWxlbmRhciIsIm9uRHJvcGRvd25Gb2N1cyIsImluaXRpYWxEYXRlIiwiaGFuZGxlTW9udGhDaGFuZ2UiLCJtb250aFNlbGVjdGVkSW4iLCJvbk1vbnRoTW91c2VMZWF2ZSIsInNldFllYXIiLCJvblllYXJDaGFuZ2UiLCJpc1JlbmRlckFyaWFMaXZlTWVzc2FnZSIsImhhbmRsZUN1c3RvbU1vbnRoQ2hhbmdlIiwib25Nb250aENoYW5nZSIsImhhbmRsZU1vbnRoWWVhckNoYW5nZSIsImRheU5hbWVzIiwid2Vla0xhYmVsIiwid2Vla0RheU5hbWUiLCJmb3JtYXRXZWVrZGF5Iiwid2Vla0RheUNsYXNzTmFtZSIsImZvcm1hdFdlZWtEYXkiLCJ1c2VXZWVrZGF5c1Nob3J0Iiwic2hvd1llYXJQaWNrZXIiLCJyZW5kZXJDdXN0b21IZWFkZXIiLCJhbGxQcmV2RGF5c0Rpc2FibGVkIiwiZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uIiwic2hvd0Rpc2FibGVkTW9udGhOYXZpZ2F0aW9uIiwiaWNvbkNsYXNzZXMiLCJjbGlja0hhbmRsZXIiLCJkZWNyZWFzZU1vbnRoIiwiZGVjcmVhc2VZZWFyIiwiaXNGb3JZZWFyIiwicHJldmlvdXNNb250aEJ1dHRvbkxhYmVsIiwicHJldmlvdXNZZWFyQnV0dG9uTGFiZWwiLCJfdGhpcyRwcm9wczMkcHJldmlvdXMiLCJwcmV2aW91c01vbnRoQXJpYUxhYmVsIiwiX3RoaXMkcHJvcHMzJHByZXZpb3VzMiIsInByZXZpb3VzWWVhckFyaWFMYWJlbCIsImFsbE5leHREYXlzRGlzYWJsZWQiLCJzaG93VGltZVNlbGVjdCIsImluY3JlYXNlTW9udGgiLCJpbmNyZWFzZVllYXIiLCJuZXh0TW9udGhCdXR0b25MYWJlbCIsIm5leHRZZWFyQnV0dG9uTGFiZWwiLCJfdGhpcyRwcm9wczUkbmV4dE1vbnQiLCJuZXh0TW9udGhBcmlhTGFiZWwiLCJfdGhpcyRwcm9wczUkbmV4dFllYXIiLCJuZXh0WWVhckFyaWFMYWJlbCIsInNob3dZZWFyRHJvcGRvd24iLCJzaG93TW9udGhEcm9wZG93biIsInNob3dNb250aFllYXJEcm9wZG93biIsIm92ZXJyaWRlSGlkZSIsImNoYW5nZVllYXIiLCJjaGFuZ2VNb250aCIsImNoYW5nZU1vbnRoWWVhciIsImhhbmRsZVRvZGF5QnV0dG9uQ2xpY2siLCJtb250aERhdGUiLCJyZW5kZXJDdXJyZW50TW9udGgiLCJvbkZvY3VzIiwiaGFuZGxlRHJvcGRvd25Gb2N1cyIsInJlbmRlck1vbnRoRHJvcGRvd24iLCJyZW5kZXJNb250aFllYXJEcm9wZG93biIsInJlbmRlclllYXJEcm9wZG93biIsImhlYWRlckFyZ3MiLCJtb250aENvbnRhaW5lciIsInByZXZNb250aEJ1dHRvbkRpc2FibGVkIiwibmV4dE1vbnRoQnV0dG9uRGlzYWJsZWQiLCJwcmV2WWVhckJ1dHRvbkRpc2FibGVkIiwibmV4dFllYXJCdXR0b25EaXNhYmxlZCIsInNob3dEYXlOYW1lcyIsIl9vYmplY3RTcHJlYWQiLCJjdXN0b21IZWFkZXJDb3VudCIsInJlbmRlclllYXJIZWFkZXIiLCJyZW5kZXJEZWZhdWx0SGVhZGVyIiwiX3RoaXMkcHJvcHMkbW9udGhTZWxlIiwibW9udGhMaXN0IiwibW9udGhzVG9TdWJ0cmFjdCIsInNob3dQcmV2aW91c01vbnRocyIsIm1vbnRoc1Nob3duIiwiZnJvbU1vbnRoRGF0ZSIsIm1vbnRoc1RvQWRkIiwibW9udGhLZXkiLCJkaXYiLCJyZW5kZXJIZWFkZXIiLCJtb250aEFyaWFMYWJlbFByZWZpeCIsImhhbmRsZU9uRGF5S2V5RG93biIsImhhbmRsZU1vbnRoTW91c2VMZWF2ZSIsIl9leHRlbmRzIiwiaGFuZGxlWWVhck1vdXNlRW50ZXIiLCJoYW5kbGVZZWFyTW91c2VMZWF2ZSIsInRpbWVGb3JtYXQiLCJ0aW1lSW50ZXJ2YWxzIiwid2l0aFBvcnRhbCIsInRpbWVWYWxpZCIsIkJvb2xlYW4iLCJzaG93VGltZUlucHV0IiwiSW5wdXRUaW1lIiwiYXJpYUxpdmVNZXNzYWdlIiwiZ2V0RGF0ZUluVmlldyIsImFzc2lnbk1vbnRoQ29udGFpbmVyIiwiX3RoaXMzIiwiaGFzTW9udGhDaGFuZ2VkIiwiQ29udGFpbmVyIiwiY29udGFpbmVyIiwiZGlzcGxheSIsInJlbmRlckFyaWFMaXZlUmVnaW9uIiwicmVuZGVyUHJldmlvdXNCdXR0b24iLCJyZW5kZXJOZXh0QnV0dG9uIiwicmVuZGVyWWVhcnMiLCJyZW5kZXJUb2RheUJ1dHRvbiIsInJlbmRlclRpbWVTZWN0aW9uIiwicmVuZGVySW5wdXRUaW1lU2VjdGlvbiIsInJlbmRlckNoaWxkcmVuIiwiQ2FsZW5kYXJJY29uIiwiaWNvbiIsIl9yZWYkY2xhc3NOYW1lIiwiZGVmYXVsdENsYXNzIiwiaXNWYWxpZEVsZW1lbnQiLCJ4bWxucyIsInZpZXdCb3giLCJQb3J0YWwiLCJlbCIsInBvcnRhbFJvb3QiLCJwb3J0YWxIb3N0IiwiZ2V0RWxlbWVudEJ5SWQiLCJwb3J0YWxJZCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVDaGlsZCIsIlJlYWN0RE9NIiwiY3JlYXRlUG9ydGFsIiwiZm9jdXNhYmxlRWxlbWVudHNTZWxlY3RvciIsImZvY3VzYWJsZUZpbHRlciIsIm5vZGUiLCJkaXNhYmxlZCIsIlRhYkxvb3AiLCJwcm90b3R5cGUiLCJjYWxsIiwidGFiTG9vcFJlZiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YWJDaGlsZHJlbiIsImdldFRhYkNoaWxkcmVuIiwiZW5hYmxlVGFiTG9vcCIsImhhbmRsZUZvY3VzU3RhcnQiLCJoYW5kbGVGb2N1c0VuZCIsIndpdGhGbG9hdGluZyIsIldpdGhGbG9hdGluZyIsImFsdF9wcm9wcyIsInBvcHBlck1vZGlmaWVycyIsInBvcHBlclByb3BzIiwiaGlkZVBvcHBlciIsImFycm93UmVmIiwidXNlUmVmIiwiZmxvYXRpbmdQcm9wcyIsInVzZUZsb2F0aW5nIiwib3BlbiIsIndoaWxlRWxlbWVudHNNb3VudGVkIiwiYXV0b1VwZGF0ZSIsInBsYWNlbWVudCIsInBvcHBlclBsYWNlbWVudCIsIm1pZGRsZXdhcmUiLCJmbGlwIiwicGFkZGluZyIsImFycm93IiwiUG9wcGVyQ29tcG9uZW50Iiwid3JhcHBlckNsYXNzTmFtZSIsInBvcHBlckNvbXBvbmVudCIsInRhcmdldENvbXBvbmVudCIsInBvcHBlck9uS2V5RG93biIsInNob3dBcnJvdyIsInBvcHBlciIsInJlZnMiLCJzZXRGbG9hdGluZyIsImZsb2F0aW5nU3R5bGVzIiwiRmxvYXRpbmdBcnJvdyIsImNvbnRleHQiLCJmaWxsIiwic3Ryb2tlV2lkdGgiLCJ3aWR0aCIsInRyYW5zZm9ybSIsInBvcHBlckNvbnRhaW5lciIsIndyYXBwZXJDbGFzc2VzIiwiRnJhZ21lbnQiLCJzZXRSZWZlcmVuY2UiLCJvdXRzaWRlQ2xpY2tJZ25vcmVDbGFzcyIsIldyYXBwZWRDYWxlbmRhciIsImhhc1ByZVNlbGVjdGlvbkNoYW5nZWQiLCJJTlBVVF9FUlJfMSIsIkRhdGVQaWNrZXIiLCJfdGhpcyRwcm9wcyRob2xpZGF5cyIsImFjY3VtdWxhdG9yIiwiZGVmYXVsdFByZVNlbGVjdGlvbiIsImdldFByZVNlbGVjdGlvbiIsImJvdW5kZWRQcmVTZWxlY3Rpb24iLCJzdGFydE9wZW4iLCJwcmV2ZW50Rm9jdXMiLCJmb2N1c2VkIiwicHJldmVudEZvY3VzVGltZW91dCIsImNsZWFyVGltZW91dCIsImlucHV0IiwiYmx1ciIsImNhbmNlbEZvY3VzSW5wdXQiLCJza2lwU2V0Qmx1ciIsImNhbGNJbml0aWFsU3RhdGUiLCJsYXN0UHJlU2VsZWN0Q2hhbmdlIiwiUFJFU0VMRUNUX0NIQU5HRV9WSUFfTkFWSUdBVEUiLCJzZXRCbHVyIiwiaW5wdXRWYWx1ZSIsInJlYWRPbmx5IiwicHJldmVudE9wZW5PbkZvY3VzIiwiY2xlYXJQcmV2ZW50Rm9jdXNUaW1lb3V0Iiwic2V0VGltZW91dCIsInNldEZvY3VzIiwiaW5wdXRGb2N1c1RpbWVvdXQiLCJvbkJsdXIiLCJhbGxBcmdzIiwib25DaGFuZ2VSYXciLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJQUkVTRUxFQ1RfQ0hBTkdFX1ZJQV9JTlBVVCIsImhvdXJzIiwibWludXRlcyIsInNldFNlbGVjdGVkIiwic2VuZEZvY3VzQmFja1RvSW5wdXQiLCJzaG93RGF0ZVNlbGVjdCIsInN3YXBSYW5nZSIsImtlZXBJbnB1dCIsImFsbG93U2FtZURheSIsImZvY3VzU2VsZWN0ZWRNb250aCIsIm5vUmFuZ2VzIiwiaGFzU3RhcnRSYW5nZSIsImlzUmFuZ2VGaWxsZWQiLCJpc0NoYW5nZWREYXRlQWxyZWFkeVNlbGVjdGVkIiwic2VsZWN0ZWREYXRlIiwibmV4dERhdGVzIiwiaGFzTWluRGF0ZSIsImhhc01heERhdGUiLCJpc1ZhbGlkRGF0ZVNlbGVjdGlvbiIsImRhdGVTdGFydE9mRGF5IiwibWluRGF0ZVN0YXJ0T2ZEYXkiLCJtYXhEYXRlRW5kT2ZEYXkiLCJvbklucHV0Q2xpY2siLCJzZWxlY3RvclN0cmluZyIsInNlbGVjdGVkSXRlbSIsImNhbGVuZGFyIiwiY29tcG9uZW50Tm9kZSIsInF1ZXJ5U2VsZWN0b3IiLCJjb3B5IiwiaW5wdXRPayIsImhhbmRsZVNlbGVjdCIsIm9uSW5wdXRFcnJvciIsImNvZGUiLCJtc2ciLCJpc1NoaWZ0S2V5QWN0aXZlIiwic2hpZnRLZXkiLCJuZXdTZWxlY3Rpb24iLCJzdWJXZWVrcyIsInN1YkRheXMiLCJhZGRXZWVrcyIsInByZXZNb250aCIsInByZXZZZWFyIiwib25DbGVhckNsaWNrIiwiY2xvc2VPblNjcm9sbCIsImRvY3VtZW50RWxlbWVudCIsImlzQ2FsZW5kYXJPcGVuIiwiZWxlbSIsImRhdGVGb3JtYXRDYWxlbmRhciIsImhhbmRsZUNhbGVuZGFyQ2xpY2tPdXRzaWRlIiwibW9kaWZ5SG9saWRheXMiLCJoYW5kbGVUaW1lQ2hhbmdlIiwiY2FsZW5kYXJDbGFzc05hbWUiLCJjYWxlbmRhckNvbnRhaW5lciIsImV4Y2x1ZGVTY3JvbGxiYXIiLCJvbkRheUtleURvd24iLCJpc0NvbnRhaW5zVGltZSIsImxvbmdEYXRlRm9ybWF0IiwiX1JlYWN0JGNsb25lRWxlbWVudCIsImN1c3RvbUlucHV0IiwiY3VzdG9tSW5wdXRSZWYiLCJoYW5kbGVCbHVyIiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlRm9jdXMiLCJvbklucHV0S2V5RG93biIsImlkIiwiZm9ybSIsImF1dG9Gb2N1cyIsInBsYWNlaG9sZGVyVGV4dCIsImF1dG9Db21wbGV0ZSIsImFyaWFEZXNjcmliZWRCeSIsImFyaWFJbnZhbGlkIiwiYXJpYUxhYmVsbGVkQnkiLCJhcmlhUmVxdWlyZWQiLCJpc0NsZWFyYWJsZSIsImNsZWFyQnV0dG9uVGl0bGUiLCJfdGhpcyRwcm9wczQkY2xlYXJCdXQiLCJjbGVhckJ1dHRvbkNsYXNzTmFtZSIsIl90aGlzJHByb3BzNCRhcmlhTGFiZSIsImFyaWFMYWJlbENsb3NlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uU2Nyb2xsIiwicHJldlN0YXRlIiwib25DYWxlbmRhck9wZW4iLCJvbkNhbGVuZGFyQ2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVuZGVySW5wdXRDb250YWluZXIiLCJzaG93SWNvbiIsImNhbGVuZGFySWNvbkNsYXNzbmFtZSIsInRvZ2dsZUNhbGVuZGFyT25JY29uQ2xpY2siLCJ0b2dnbGVDYWxlbmRhciIsInJlbmRlckRhdGVJbnB1dCIsInJlbmRlckNsZWFyQnV0dG9uIiwicmVuZGVyQ2FsZW5kYXIiLCJwb3J0YWxDb250YWluZXIiLCJvblBvcnRhbEtleURvd24iLCJwb3BwZXJDbGFzc05hbWUiLCJvblBvcHBlcktleURvd24iLCJzaG93UG9wcGVyQXJyb3ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkRP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\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css":
/*!*****************************************************************!*\
  !*** ./node_modules/react-datepicker/dist/react-datepicker.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"c9ebeb17ff28\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGltZS16b25lLW9yZ2FuaXplci8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcGlja2VyL2Rpc3QvcmVhY3QtZGF0ZXBpY2tlci5jc3M/NTgxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImM5ZWJlYjE3ZmYyOFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css\n");

/***/ })

};
;